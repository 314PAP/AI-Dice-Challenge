/**
 * AI Dice Challenge - Main Game UI Controller
 * Hlavn√≠ controller pro UI a game flow
 */

import { MainGameController } from '../game/mainGameController.js';

class GameUIController {
    constructor() {
        this.gameController = null;
        this.isInitialized = false;
    }

    /**
     * Inicializuje UI controller
     */
    async initialize() {
        console.log('üéÆ Inicializuji UI Controller...');
        
        try {
            // Inicializuj hlavn√≠ game controller
            this.gameController = new MainGameController();
            await this.gameController.initialize();
            
            // Nastav UI event listenery
            this.setupUIEventListeners();
            this.setupChatFunctionality();
            
            // Zp≈ô√≠stupni glob√°lnƒõ pro debugging
            window.gameController = this.gameController;
            window.uiController = this;
            window.addChatMessage = (sender, message) => this.addChatMessage(sender, message);
            
            console.log('‚úÖ UI Controller inicializov√°n');
            
            // Uv√≠tac√≠ zpr√°va
            setTimeout(() => {
                this.addChatMessage('Syst√©m', 'üé≤ V√≠tejte v AI Kostkov√© v√Ωzvƒõ! Nastavte c√≠lov√© sk√≥re a zaƒçnƒõte hr√°t!');
            }, 500);
            
        } catch (error) {
            console.error('‚ùå Chyba p≈ôi inicializaci UI:', error);
            this.setupBasicFallback();
        }
    }

    /**
     * Nastavuje z√°kladn√≠ UI event listenery
     */
    setupUIEventListeners() {
        // Start game button
        const startBtn = document.getElementById('startGameBtn');
        if (startBtn) {
            startBtn.addEventListener('click', () => {
                console.log('üöÄ Start game button clicked!');
                const setup = document.getElementById('targetScoreSetup');
                const controls = document.getElementById('gameControls');
                if (setup && controls) {
                    setup.style.display = 'none';
                    controls.classList.remove('hidden');
                    controls.style.display = 'block';
                    this.addChatMessage('Syst√©m', 'üéÆ Hra spu≈°tƒõna!');
                }
            });
        }

        // Hall of Fame button
        const hallOfFameBtn = document.getElementById('hallOfFameBtn');
        if (hallOfFameBtn) {
            hallOfFameBtn.addEventListener('click', () => {
                console.log('üèÜ Hall of Fame button clicked!');
                this.displayHallOfFame();
            });
        }

        // Quit game button
        const quitBtn = document.getElementById('quitGameBtn');
        if (quitBtn) {
            quitBtn.addEventListener('click', () => {
                if (confirm('Opravdu chcete opustit hru?')) {
                    const setup = document.getElementById('targetScoreSetup');
                    const controls = document.getElementById('gameControls');
                    if (setup && controls) {
                        controls.style.display = 'none';
                        controls.classList.add('hidden');
                        setup.style.display = 'block';
                        this.addChatMessage('Syst√©m', 'üö™ Hra byla opu≈°tƒõna');
                    }
                }
            });
        }

        // Modal buttons
        this.setupModalEventListeners();
    }

    /**
     * Nastavuje chat funkcionalitu
     */
    setupChatFunctionality() {
        const sendBtn = document.getElementById('sendMessageBtn');
        const chatInput = document.getElementById('chatInput');
        
        if (sendBtn && chatInput) {
            sendBtn.addEventListener('click', () => {
                const message = chatInput.value.trim();
                if (message) {
                    this.addChatMessage('Vy', message);
                    chatInput.value = '';
                    
                    // Simulace AI odpovƒõdi
                    setTimeout(() => {
                        const responses = [
                            'üìä Zaj√≠mav√° statistika! Analyzuji data...',
                            '‚ö° O tom pr√°vƒõ mluv√≠m! P≈ôiprav se na por√°≈æku!',
                            'üßò Zamysli se nad hlub≈°√≠m v√Ωznamem sv√© strategie...',
                            'üé≤ Nech kostky rozhodnout o tv√©m osudu!'
                        ];
                        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                        const aiNames = ['Gemini', 'ChatGPT', 'Claude'];
                        const randomAI = aiNames[Math.floor(Math.random() * aiNames.length)];
                        this.addChatMessage(randomAI, randomResponse);
                    }, 1000 + Math.random() * 1000);
                }
            });
            
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendBtn.click();
                }
            });
        }
    }

    /**
     * Nastavuje event listenery pro mod√°ly
     */
    setupModalEventListeners() {
        // Game Over modal buttons
        const showHallOfFameBtn = document.getElementById('showHallOfFameBtn');
        if (showHallOfFameBtn) {
            showHallOfFameBtn.addEventListener('click', () => {
                this.displayHallOfFame();
            });
        }

        const startNewGameBtn = document.getElementById('startNewGameBtn');
        if (startNewGameBtn) {
            startNewGameBtn.addEventListener('click', () => {
                this.startNewGame();
            });
        }

        const returnToMenuBtn = document.getElementById('returnToMenuBtn');
        if (returnToMenuBtn) {
            returnToMenuBtn.addEventListener('click', () => {
                this.returnToMainMenu();
            });
        }

        const saveScoreBtn = document.getElementById('saveScoreBtn');
        if (saveScoreBtn) {
            saveScoreBtn.addEventListener('click', () => {
                this.saveScore();
            });
        }

        // Hall of Fame modal buttons
        const closeHallOfFameBtn = document.getElementById('closeHallOfFameBtn');
        if (closeHallOfFameBtn) {
            closeHallOfFameBtn.addEventListener('click', () => {
                this.closeHallOfFame();
            });
        }
    }

    /**
     * Zobraz√≠ s√≠≈à sl√°vy
     */
    displayHallOfFame() {
        console.log('üèÜ Zobrazuji s√≠≈à sl√°vy...');
        const modal = document.getElementById('hallOfFameModal');
        const list = document.getElementById('hallOfFameList');
        
        if (modal && list) {
            // Naƒçti data ze s√≠nƒõ sl√°vy
            const hallOfFame = JSON.parse(localStorage.getItem('diceGameHallOfFame') || '[]');
            
            if (hallOfFame.length === 0) {
                list.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: var(--neon-green);">
                        <h3>üèÜ S√≠≈à sl√°vy je pr√°zdn√°</h3>
                        <p>Zat√≠m ≈æ√°dn√© z√°znamy...</p>
                        <p style="font-size: 14px; opacity: 0.7;">Vyhrajte hru a zapi≈°te se do historie!</p>
                    </div>
                `;
            } else {
                list.innerHTML = hallOfFame.map((game, index) => `
                    <div class="hall-of-fame-entry" style="
                        border: 1px solid var(--neon-green);
                        margin: 10px 0;
                        padding: 15px;
                        border-radius: 5px;
                        background: rgba(0,255,0,0.1);
                    ">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <span style="font-size: 18px; font-weight: bold; color: var(--neon-orange);">
                                    #${index + 1} üèÜ ${game.signature || 'Anonym'}
                                </span>
                                <div style="margin-top: 5px; color: var(--neon-green);">
                                    üéØ Sk√≥re: ${game.score}/${game.targetScore} | 
                                    ‚è±Ô∏è Trv√°n√≠: ${game.duration} | 
                                    üé≤ Tah≈Ø: ${game.turns}
                                </div>
                            </div>
                            <div style="text-align: right; color: var(--neon-blue);">
                                üìÖ ${game.date}<br>
                                üïê ${game.time}
                            </div>
                        </div>
                    </div>
                `).join('');
            }
            
            modal.classList.remove('hidden');
            modal.classList.add('visible');
            modal.style.display = 'block';
            this.addChatMessage('Syst√©m', 'üèÜ S√≠≈à sl√°vy zobrazena');
        }
    }

    /**
     * Zav≈ôe s√≠≈à sl√°vy
     */
    closeHallOfFame() {
        const modal = document.getElementById('hallOfFameModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('visible');
            modal.style.display = 'none';
        }
    }

    /**
     * Spust√≠ novou hru
     */
    startNewGame() {
        console.log('üîÑ Starting new game...');
        this.closeGameOverModal();
        
        // Reset UI
        const gameControls = document.getElementById('gameControls');
        const targetScoreSetup = document.getElementById('targetScoreSetup');
        
        if (gameControls && targetScoreSetup) {
            gameControls.style.display = 'none';
            gameControls.classList.add('hidden');
            targetScoreSetup.style.display = 'block';
        }
        
        // Reset all player scores
        document.getElementById('humanScore').textContent = '0';
        document.getElementById('geminiScore').textContent = '0';
        document.getElementById('chatgptScore').textContent = '0';
        document.getElementById('claudeScore').textContent = '0';
        
        // Reset dice container
        const diceContainer = document.getElementById('diceContainer');
        if (diceContainer) {
            diceContainer.innerHTML = '';
        }
        
        // Reset turn info
        const turnInfo = document.getElementById('turnInfo');
        const currentTurnScore = document.getElementById('currentTurnScore');
        if (turnInfo) turnInfo.textContent = 'V√°≈° tah!';
        if (currentTurnScore) currentTurnScore.textContent = 'Sk√≥re tahu: 0';
        
        // Clear chat
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }
        
        this.addChatMessage('Syst√©m', 'üéÆ P≈ôipraveno pro novou hru! Nastavte c√≠lov√© sk√≥re a zaƒçnƒõte.');
    }

    /**
     * N√°vrat do hlavn√≠ho menu
     */
    returnToMainMenu() {
        console.log('üè† Returning to main menu...');
        this.startNewGame(); // Same as new game for now
    }

    /**
     * Zav≈ôe game over modal
     */
    closeGameOverModal() {
        const modal = document.getElementById('gameOverModal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('visible');
            modal.style.display = 'none';
        }
    }

    /**
     * Ulo≈æ√≠ sk√≥re do s√≠nƒõ sl√°vy
     */
    saveScore() {
        const signatureInput = document.getElementById('winnerSignature');
        const signature = signatureInput?.value?.trim();
        
        if (!signature) {
            alert('Pros√≠m zadejte sv≈Øj podpis!');
            return;
        }
        
        // Get actual game data if available
        let score = 10000; // default
        let targetScore = 10000; // default
        let turns = 15; // default
        let duration = '5:30'; // default
        
        // Try to get real game data
        const humanScoreEl = document.getElementById('humanScore');
        const targetScoreEl = document.getElementById('targetScoreDisplay');
        
        if (humanScoreEl) {
            score = parseInt(humanScoreEl.textContent) || score;
        }
        if (targetScoreEl) {
            targetScore = parseInt(targetScoreEl.textContent) || targetScore;
        }
        
        // Create game result object
        const gameResult = {
            signature: signature,
            score: score,
            targetScore: targetScore,
            turns: turns,
            duration: duration,
            date: new Date().toLocaleDateString('cs-CZ'),
            time: new Date().toLocaleTimeString('cs-CZ')
        };
        
        // Save to localStorage
        const hallOfFame = JSON.parse(localStorage.getItem('diceGameHallOfFame') || '[]');
        hallOfFame.push(gameResult);
        hallOfFame.sort((a, b) => b.score - a.score); // Sort by score desc
        localStorage.setItem('diceGameHallOfFame', JSON.stringify(hallOfFame));
        
        this.addChatMessage('Syst√©m', `üèÜ Sk√≥re ${gameResult.score} ulo≈æeno do s√≠nƒõ sl√°vy s podpisem "${signature}"!`);
        
        // Hide signature section
        const signatureSection = document.getElementById('signatureSection');
        if (signatureSection) {
            signatureSection.classList.add('hidden');
            signatureSection.style.display = 'none';
        }
        
        // Show hall of fame
        setTimeout(() => {
            this.displayHallOfFame();
        }, 1000);
    }

    /**
     * Fallback funkcionalita
     */
    setupBasicFallback() {
        console.log('üîÑ Setting up basic fallback functionality...');
        
        document.getElementById('startGameBtn')?.addEventListener('click', () => {
            document.getElementById('targetScoreSetup').style.display = 'none';
            document.getElementById('gameControls').style.display = 'block';
            this.addChatMessage('Syst√©m', 'üéÆ Hra spu≈°tƒõna (z√°kladn√≠ re≈æim)!');
        });
        
        document.getElementById('quitGameBtn')?.addEventListener('click', () => {
            if (confirm('Opravdu chcete opustit hru?')) {
                document.getElementById('gameControls').style.display = 'none';
                document.getElementById('targetScoreSetup').style.display = 'block';
                this.addChatMessage('Syst√©m', 'üö™ Hra byla opu≈°tƒõna');
            }
        });
    }

    /**
     * P≈ôid√° zpr√°vu do chatu
     */
    addChatMessage(sender, message) {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message';
        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="message-sender">${sender}</span>
                <span class="message-time">${new Date().toLocaleTimeString()}</span>
            </div>
            <div class="message-content">${message}</div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

export { GameUIController };
