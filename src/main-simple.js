/**
 * üé≤ AI Dice Challenge - Simplified Main
 * Zjednodu≈°en√° verze bez extern√≠ch core modul≈Ø
 */

console.log('üé≤ AI Dice Challenge - Starting simplified version...');

// Jednoduch√° implementace bez extern√≠ch z√°vislost√≠
class SimpleDiceGame {
    constructor() {
        this.gameState = {
            gameStarted: false,
            gameEnded: false,
            players: [
                { name: 'Hr√°ƒç', score: 0, isHuman: true },
                { name: 'AI Sarah', score: 0, isHuman: false },
                { name: 'AI Marcus', score: 0, isHuman: false },
                { name: 'AI Luna', score: 0, isHuman: false }
            ],
            currentPlayerIndex: 0,
            targetScore: 5000
        };
        
        this.templates = new Map();
        this.initialized = false;
    }

    // Jednoduch√Ω template loader
    async loadTemplate(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Failed to load ${url}`);
            return await response.text();
        } catch (error) {
            console.error('Template load error:', error);
            return `<div class="alert alert-warning">Template ${url} could not be loaded</div>`;
        }
    }

    // Inicializace aplikace
    async initialize() {
        try {
            console.log('üöÄ Loading templates...');
            
            // Naƒçten√≠ ≈°ablon
            const templates = [
                { id: 'gameContent', file: '/src/templates/game-menu.html' },
                { id: 'gameMobileContent', file: '/src/templates/game-menu-mobile.html' },
                { id: 'chatPanel', file: '/src/templates/chat.html' },
                { id: 'chatPanelMobileContainer', file: '/src/templates/chat-mobile.html' },
                { id: 'gameControls', file: '/src/templates/game-controls.html' },
                { id: 'gameControlsMobile', file: '/src/templates/game-controls-mobile.html' }
            ];

            // Naƒçten√≠ v≈°ech ≈°ablon
            for (const template of templates) {
                try {
                    const html = await this.loadTemplate(template.file);
                    const container = document.getElementById(template.id);
                    if (container) {
                        container.innerHTML = html;
                    }
                } catch (error) {
                    console.error(`Failed to load template ${template.file}:`, error);
                }
            }

            // Naƒçten√≠ mod√°l≈Ø
            await this.loadModals();

            // Nastaven√≠ event listener≈Ø
            this.setupEventListeners();

            // Inicializace AOS (pokud je dostupn√°)
            if (typeof AOS !== 'undefined') {
                AOS.init({
                    duration: 800,
                    easing: 'ease-in-out'
                });
            }

            // P≈ôid√°n√≠ uv√≠tac√≠ zpr√°vy do chatu
            setTimeout(() => {
                this.addChatMessage('AI Sarah', 'V√≠tej v AI Kostkov√© V√Ωzvƒõ! üé≤ Jsem p≈ôipravena na souboj!', 'ai');
            }, 1000);

            this.initialized = true;
            console.log('‚úÖ Application initialized');
            
        } catch (error) {
            console.error('‚ùå Initialization failed:', error);
            this.showError('Chyba p≈ôi naƒç√≠t√°n√≠ aplikace. Zkuste obnovit str√°nku.');
        }
    }

    // Naƒçten√≠ mod√°l≈Ø
    async loadModals() {
        const modals = [
            '/src/templates/modals/rules-modal.html',
            '/src/templates/modals/hall-of-fame-modal.html',
            '/src/templates/modals/game-over-modal.html'
        ];

        const container = document.getElementById('modalsContainer') || document.body;
        
        for (const modal of modals) {
            try {
                const html = await this.loadTemplate(modal);
                container.insertAdjacentHTML('beforeend', html);
            } catch (error) {
                console.error(`Failed to load modal ${modal}:`, error);
            }
        }
    }

    // Nastaven√≠ event listener≈Ø
    setupEventListeners() {
        // Delegov√°n√≠ ud√°lost√≠ na document
        document.addEventListener('click', (e) => {
            // Start game buttons
            if (e.target.matches('#startGameBtn, #startGameBtnMobile')) {
                e.preventDefault();
                this.startGame();
            }
            
            // Quit game buttons
            if (e.target.matches('#quitGameBtn, #quitGameBtnMobile')) {
                e.preventDefault();
                this.quitGame();
            }
            
            // Hall of Fame buttons
            if (e.target.matches('#hallOfFameBtn, #hallOfFameBtnMobile')) {
                e.preventDefault();
                this.showHallOfFame();
            }
            
            // Rules buttons
            if (e.target.matches('#rulesBtn, #rulesBtnMobile')) {
                e.preventDefault();
                this.showRules();
            }
            
            // Target score arrows
            if (e.target.matches('#scoreUpBtn, #scoreUpBtnMobile')) {
                e.preventDefault();
                this.adjustTargetScore(1000);
            }
            
            if (e.target.matches('#scoreDownBtn, #scoreDownBtnMobile')) {
                e.preventDefault();
                this.adjustTargetScore(-1000);
            }
            
            // Chat send button
            if (e.target.matches('#sendMessageBtn, #sendMessageBtnMobile')) {
                e.preventDefault();
                this.sendChatMessage();
            }
            
            // Modal close buttons
            if (e.target.matches('.modal-close, .modal-overlay')) {
                this.closeModal(e.target);
            }
        });

        // Escape key pro zav≈ôen√≠ mod√°l≈Ø
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeTopModal();
            }
            
            // Enter key pro odesl√°n√≠ zpr√°vy
            if (e.key === 'Enter' && e.target.matches('#chatInput, #chatInputMobile')) {
                e.preventDefault();
                this.sendChatMessage();
            }
        });

        // Resize handler
        window.addEventListener('resize', () => {
            this.handleResize();
        });
    }

    // √öprava c√≠lov√©ho sk√≥re
    adjustTargetScore(amount) {
        const inputs = ['targetScoreInput', 'targetScoreInputMobile'];
        
        inputs.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                let currentValue = parseInt(input.value) || 5000;
                let newValue = currentValue + amount;
                
                // Minimum 1000
                if (newValue < 1000) {
                    newValue = 1000;
                }
                
                // Maximum 100000
                if (newValue > 100000) {
                    newValue = 100000;
                }
                
                input.value = newValue;
            }
        });
    }

    // Odesl√°n√≠ chat zpr√°vy
    sendChatMessage() {
        const inputs = ['chatInput', 'chatInputMobile'];
        
        inputs.forEach(id => {
            const input = document.getElementById(id);
            if (input && input.value.trim()) {
                const message = input.value.trim();
                
                // P≈ôid√°n√≠ zpr√°vy do chatu
                this.addChatMessage('Hr√°ƒç', message, 'user');
                
                // Vymaz√°n√≠ inputu
                input.value = '';
                
                // Simulace AI odpovƒõdi
                setTimeout(() => {
                    this.addAIResponse(message);
                }, 500);
            }
        });
    }

    // P≈ôid√°n√≠ zpr√°vy do chatu
    addChatMessage(sender, message, type = 'user') {
        const chatContainers = ['chatMessages', 'chatMessagesMobile'];
        
        chatContainers.forEach(id => {
            const container = document.getElementById(id);
            if (container) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${type} mb-2`;
                
                const color = type === 'user' ? 'text-neon-green' : 'text-neon-blue';
                
                messageDiv.innerHTML = `
                    <div class="d-flex align-items-start">
                        <div class="chat-avatar me-2">
                            <span class="badge bg-secondary">${sender.charAt(0)}</span>
                        </div>
                        <div class="chat-content">
                            <div class="chat-sender ${color} fw-bold small">${sender}</div>
                            <div class="chat-text text-light">${message}</div>
                        </div>
                    </div>
                `;
                
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }
        });
    }

    // Simulace AI odpovƒõdi
    addAIResponse(userMessage) {
        const responses = [
            "Zaj√≠mav√©! Co si o tom mysl√≠≈°?",
            "Dob≈ôe zahr√°no! Pokraƒçuj!",
            "Strategie je kl√≠ƒçov√° v t√©to h≈ôe.",
            "Zkus to jinak, mo≈æn√° to bude lep≈°√≠.",
            "Skvƒõl√Ω tah! Jsem napjat√°, jak to dopadne.",
            "Hmm, to je tricky situace...",
            "Rozhodnƒõ m√°≈° talent na tuto hru!",
            "Jak√Ω je tv≈Øj dal≈°√≠ pl√°n?"
        ];
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        const aiNames = ['AI Sarah', 'AI Marcus', 'AI Luna'];
        const randomAI = aiNames[Math.floor(Math.random() * aiNames.length)];
        
        this.addChatMessage(randomAI, randomResponse, 'ai');
    }

    // Spu≈°tƒõn√≠ hry
    async startGame() {
        try {
            console.log('üéÆ Starting game...');
            
            // Z√≠sk√°n√≠ c√≠lov√©ho sk√≥re
            const targetInput = document.getElementById('targetScoreInput') || 
                              document.getElementById('targetScoreInputMobile');
            
            if (targetInput) {
                const target = parseInt(targetInput.value) || 5000;
                this.gameState.targetScore = target;
            }
            
            // Skryt√≠ menu
            this.hideMenus();
            
            // Zobrazen√≠ hern√≠ch ovl√°d√°n√≠
            this.showGameControls();
            
            // Aktualizace stavu
            this.gameState.gameStarted = true;
            this.gameState.gameEnded = false;
            
            // Zobrazen√≠ √∫spƒõ≈°n√© zpr√°vy
            this.showNotification('Hra byla spu≈°tƒõna!', 'success');
            
        } catch (error) {
            console.error('‚ùå Failed to start game:', error);
            this.showError('Chyba p≈ôi spu≈°tƒõn√≠ hry');
        }
    }

    // Ukonƒçen√≠ hry
    async quitGame() {
        try {
            console.log('üîö Quitting game...');
            
            // Skryt√≠ hern√≠ch ovl√°d√°n√≠
            this.hideGameControls();
            
            // Zobrazen√≠ menu
            this.showMenus();
            
            // Reset stavu
            this.gameState.gameStarted = false;
            this.gameState.gameEnded = false;
            
            // Zobrazen√≠ zpr√°vy
            this.showNotification('Hra byla ukonƒçena', 'info');
            
        } catch (error) {
            console.error('‚ùå Failed to quit game:', error);
        }
    }

    // Zobrazen√≠ Hall of Fame
    showHallOfFame() {
        const modal = document.getElementById('hallOfFameModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // Zobrazen√≠ pravidel
    showRules() {
        const modal = document.getElementById('rulesModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // Skryt√≠ menu
    hideMenus() {
        const elements = [
            document.getElementById('gameContent'),
            document.getElementById('gameMobileContent')
        ];
        
        elements.forEach(el => {
            if (el) el.classList.add('hidden');
        });
    }

    // Zobrazen√≠ menu
    showMenus() {
        const elements = [
            document.getElementById('gameContent'),
            document.getElementById('gameMobileContent')
        ];
        
        elements.forEach(el => {
            if (el) el.classList.remove('hidden');
        });
    }

    // Skryt√≠ hern√≠ch ovl√°d√°n√≠
    hideGameControls() {
        const elements = [
            document.getElementById('gameControls'),
            document.getElementById('gameControlsMobile')
        ];
        
        elements.forEach(el => {
            if (el) el.classList.add('hidden');
        });
    }

    // Zobrazen√≠ hern√≠ch ovl√°d√°n√≠
    showGameControls() {
        const elements = [
            document.getElementById('gameControls'),
            document.getElementById('gameControlsMobile')
        ];
        
        elements.forEach(el => {
            if (el) el.classList.remove('hidden');
        });
    }

    // Zav≈ôen√≠ mod√°ln√≠ho okna
    closeModal(target) {
        const modal = target.closest('.modal-overlay');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // Zav≈ôen√≠ vrchn√≠ho mod√°ln√≠ho okna
    closeTopModal() {
        const modals = document.querySelectorAll('.modal-overlay:not(.hidden)');
        if (modals.length > 0) {
            modals[modals.length - 1].classList.add('hidden');
        }
    }

    // Zobrazen√≠ notifikace
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = `
            top: 20px;
            right: 20px;
            z-index: 1060;
            min-width: 300px;
        `;
        
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // Zobrazen√≠ chyby
    showError(message) {
        this.showNotification(message, 'danger');
    }

    // Zpracov√°n√≠ resize
    handleResize() {
        if (typeof AOS !== 'undefined') {
            AOS.refresh();
        }
    }
}

// Inicializace aplikace
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üé≤ DOM loaded, initializing simple dice game...');
    
    try {
        const game = new SimpleDiceGame();
        await game.initialize();
        
        // Zp≈ô√≠stupnƒõn√≠ pro debugging
        window.simpleDiceGame = game;
        
        console.log('‚úÖ Simple dice game initialized successfully!');
        
    } catch (error) {
        console.error('‚ùå Failed to initialize simple dice game:', error);
        
        // Fallback error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger position-fixed top-0 start-0 w-100 text-center';
        errorDiv.style.zIndex = '9999';
        errorDiv.innerHTML = `
            <h4>‚ùå Chyba aplikace</h4>
            <p>Aplikace se nepoda≈ôila naƒç√≠st. Zkuste obnovit str√°nku.</p>
            <button class="btn btn-primary" onclick="window.location.reload()">Obnovit</button>
        `;
        
        document.body.appendChild(errorDiv);
    }
});

export default SimpleDiceGame;
