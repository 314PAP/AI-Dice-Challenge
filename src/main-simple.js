/**
 * üé≤ AI Dice Challenge - Simplified Main
 * Zjednodu≈°en√° verze bez extern√≠ch core modul≈Ø
 */

console.log('üé≤ AI Dice Challenge - Starting simplified version...');

// Jednoduch√° implementace bez extern√≠ch z√°vislost√≠
class SimpleDiceGame {
    constructor() {
        this.gameState = {
            gameStarted: false,
            gameEnded: false,
            players: [
                { name: 'Hr√°ƒç', score: 0, isHuman: true },
                { name: 'AI Sarah', score: 0, isHuman: false },
                { name: 'AI Marcus', score: 0, isHuman: false },
                { name: 'AI Luna', score: 0, isHuman: false }
            ],
            currentPlayerIndex: 0,
            targetScore: 5000
        };
        
        this.templates = new Map();
        this.initialized = false;
    }

    // Jednoduch√Ω template loader
    async loadTemplate(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Failed to load ${url}`);
            return await response.text();
        } catch (error) {
            console.error('Template load error:', error);
            return `<div class="alert alert-warning">Template ${url} could not be loaded</div>`;
        }
    }

    // Inicializace aplikace
    async initialize() {
        try {
            console.log('üöÄ Loading templates...');
            
            // Naƒçten√≠ ≈°ablon
            const templates = [
                { id: 'gameContent', file: '/src/templates/game-menu.html' },
                { id: 'gameMobileContent', file: '/src/templates/game-menu-mobile.html' },
                { id: 'chatPanel', file: '/src/templates/chat.html' },
                { id: 'chatPanelMobileContainer', file: '/src/templates/chat-mobile.html' },
                { id: 'gameControls', file: '/src/templates/game-controls.html' },
                { id: 'gameControlsMobile', file: '/src/templates/game-controls-mobile.html' }
            ];

            // Naƒçten√≠ v≈°ech ≈°ablon
            for (const template of templates) {
                try {
                    console.log(`üìÑ Loading template: ${template.file}`);
                    const html = await this.loadTemplate(template.file);
                    const container = document.getElementById(template.id);
                    if (container) {
                        container.innerHTML = html;
                        console.log(`‚úÖ Template ${template.file} loaded into ${template.id}`);
                    } else {
                        console.warn(`‚ö†Ô∏è Container ${template.id} not found for template ${template.file}`);
                    }
                } catch (error) {
                    console.error(`‚ùå Failed to load template ${template.file}:`, error);
                }
            }

            // Naƒçten√≠ mod√°l≈Ø
            await this.loadModals();

            // Nastaven√≠ event listener≈Ø
            this.setupEventListeners();

            // Inicializace AOS (pokud je dostupn√°)
            if (typeof AOS !== 'undefined') {
                console.log('üé® Initializing AOS animations...');
                AOS.init({
                    duration: 800,
                    easing: 'ease-in-out'
                });
            }

            // P≈ôid√°n√≠ uv√≠tac√≠ zpr√°vy do chatu
            setTimeout(() => {
                this.addChatMessage('AI Sarah', 'V√≠tej v AI Kostkov√© V√Ωzvƒõ! üé≤ Jsem p≈ôipravena na souboj!', 'ai');
            }, 1000);

            this.initialized = true;
            console.log('‚úÖ Application initialized');
            
        } catch (error) {
            console.error('‚ùå Initialization failed:', error);
            this.showError('Chyba p≈ôi naƒç√≠t√°n√≠ aplikace. Zkuste obnovit str√°nku.');
        }
    }

    // Naƒçten√≠ mod√°l≈Ø
    async loadModals() {
        const modals = [
            '/src/templates/modals/rules-modal.html',
            '/src/templates/modals/hall-of-fame-modal.html',
            '/src/templates/modals/game-over-modal.html'
        ];

        const container = document.getElementById('modalsContainer') || document.body;
        
        for (const modal of modals) {
            try {
                const html = await this.loadTemplate(modal);
                container.insertAdjacentHTML('beforeend', html);
            } catch (error) {
                console.error(`Failed to load modal ${modal}:`, error);
            }
        }
    }

    // Nastaven√≠ event listener≈Ø
    setupEventListeners() {
        console.log('üîß Setting up event listeners...');
        
        // Delegov√°n√≠ ud√°lost√≠ na document
        document.addEventListener('click', (e) => {
            console.log('üëÜ Click detected on element:', e.target.tagName, 'ID:', e.target.id, 'Classes:', e.target.className);
            
            // Pomocn√° funkce pro kontrolu tlaƒç√≠tek - zkontroluje jak target tak closest parent
            const isButton = (selectors) => {
                return e.target.matches(selectors) || e.target.closest(selectors);
            };
            
            // Start game buttons
            if (isButton('#startGameBtn, #startGameBtnMobile')) {
                e.preventDefault();
                console.log('üéÆ Start game button clicked');
                this.startGame();
            }
            
            // Quit game buttons
            else if (isButton('#quitGameBtn, #quitGameBtnMobile')) {
                e.preventDefault();
                console.log('üö™ Quit game button clicked');
                this.quitGame();
            }
            
            // Hall of Fame buttons
            else if (isButton('#hallOfFameBtn, #hallOfFameBtnMobile')) {
                e.preventDefault();
                console.log('üèÜ Hall of Fame button clicked');
                this.showHallOfFame();
            }
            
            // Rules buttons
            else if (isButton('#rulesBtn, #rulesBtnMobile')) {
                e.preventDefault();
                console.log('üìñ Rules button clicked');
                this.showRules();
            }
            
            // Target score arrows
            else if (isButton('#scoreUpBtn, #scoreUpBtnMobile')) {
                e.preventDefault();
                console.log('‚¨ÜÔ∏è Score up button clicked');
                this.adjustTargetScore(1000);
            }
            
            else if (isButton('#scoreDownBtn, #scoreDownBtnMobile')) {
                e.preventDefault();
                console.log('‚¨áÔ∏è Score down button clicked');
                this.adjustTargetScore(-1000);
            }
            
            // Chat send button
            else if (isButton('#sendMessageBtn, #sendMessageBtnMobile')) {
                e.preventDefault();
                console.log('üí¨ Chat send button clicked');
                this.sendChatMessage();
            }
            
            // HERN√ç TLAƒå√çTKA
            // Roll dice button
            else if (isButton('#rollBtn, #rollBtnMobile')) {
                e.preventDefault();
                console.log('üé≤ Roll dice button clicked');
                this.rollDice();
            }
            
            // Bank dice button
            else if (isButton('#bankBtn, #bankBtnMobile')) {
                e.preventDefault();
                console.log('üè¶ Bank dice button clicked');
                this.bankDice();
            }
            
            // End turn button
            else if (isButton('#endTurnBtn, #endTurnBtnMobile')) {
                e.preventDefault();
                console.log('‚úã End turn button clicked');
                this.endTurn();
            }
            
            // Dice selection
            else if (e.target.matches('.dice') || e.target.closest('.dice')) {
                console.log('üéØ Dice clicked');
                const diceElement = e.target.closest('.dice') || e.target;
                this.selectDice(diceElement);
            }
            
            // Modal close buttons
            else if (isButton('.modal-close, .modal-overlay')) {
                console.log('‚ùå Modal close clicked');
                this.closeModal(e.target);
            }
            
            // Pokud nebyla detekov√°na ≈æ√°dn√° akce, log to
            else {
                console.log('ü§∑ No action detected for this click');
            }
        });
        
        console.log('‚úÖ Event listeners set up successfully');

        // Escape key pro zav≈ôen√≠ mod√°l≈Ø
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeTopModal();
            }
            
            // Enter key pro odesl√°n√≠ zpr√°vy
            if (e.key === 'Enter' && e.target.matches('#chatInput, #chatInputMobile')) {
                e.preventDefault();
                this.sendChatMessage();
            }
        });

        // Resize handler
        window.addEventListener('resize', () => {
            this.handleResize();
        });
    }

    // √öprava c√≠lov√©ho sk√≥re
    adjustTargetScore(amount) {
        const inputs = ['targetScoreInput', 'targetScoreInputMobile'];
        
        inputs.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                let currentValue = parseInt(input.value) || 5000;
                let newValue = currentValue + amount;
                
                // Minimum 1000
                if (newValue < 1000) {
                    newValue = 1000;
                }
                
                // Maximum 100000
                if (newValue > 100000) {
                    newValue = 100000;
                }
                
                input.value = newValue;
            }
        });
    }

    // Odesl√°n√≠ chat zpr√°vy
    sendChatMessage() {
        const inputs = ['chatInput', 'chatInputMobile'];
        
        inputs.forEach(id => {
            const input = document.getElementById(id);
            if (input && input.value.trim()) {
                const message = input.value.trim();
                
                // P≈ôid√°n√≠ zpr√°vy do chatu
                this.addChatMessage('Hr√°ƒç', message, 'user');
                
                // Vymaz√°n√≠ inputu
                input.value = '';
                
                // Simulace AI odpovƒõdi
                setTimeout(() => {
                    this.addAIResponse(message);
                }, 500);
            }
        });
    }

    // P≈ôid√°n√≠ zpr√°vy do chatu
    addChatMessage(sender, message, type = 'user') {
        const chatContainers = ['chatMessages', 'chatMessagesMobile'];
        
        chatContainers.forEach(id => {
            const container = document.getElementById(id);
            if (container) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${type} mb-2`;
                
                const color = type === 'user' ? 'text-neon-green' : 'text-neon-blue';
                
                messageDiv.innerHTML = `
                    <div class="d-flex align-items-start">
                        <div class="chat-avatar me-2">
                            <span class="badge bg-secondary">${sender.charAt(0)}</span>
                        </div>
                        <div class="chat-content">
                            <div class="chat-sender ${color} fw-bold small">${sender}</div>
                            <div class="chat-text text-light">${message}</div>
                        </div>
                    </div>
                `;
                
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }
        });
    }

    // Simulace AI odpovƒõdi
    addAIResponse(userMessage) {
        const responses = [
            "Zaj√≠mav√©! Co si o tom mysl√≠≈°?",
            "Dob≈ôe zahr√°no! Pokraƒçuj!",
            "Strategie je kl√≠ƒçov√° v t√©to h≈ôe.",
            "Zkus to jinak, mo≈æn√° to bude lep≈°√≠.",
            "Skvƒõl√Ω tah! Jsem napjat√°, jak to dopadne.",
            "Hmm, to je tricky situace...",
            "Rozhodnƒõ m√°≈° talent na tuto hru!",
            "Jak√Ω je tv≈Øj dal≈°√≠ pl√°n?"
        ];
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        const aiNames = ['AI Sarah', 'AI Marcus', 'AI Luna'];
        const randomAI = aiNames[Math.floor(Math.random() * aiNames.length)];
        
        this.addChatMessage(randomAI, randomResponse, 'ai');
    }

    // Spu≈°tƒõn√≠ hry
    async startGame() {
        try {
            console.log('üéÆ Starting game...');
            console.log('üîç Current game state before start:', {
                gameStarted: this.gameState.gameStarted,
                gameEnded: this.gameState.gameEnded,
                initialized: this.initialized
            });
            
            // Z√≠sk√°n√≠ c√≠lov√©ho sk√≥re
            const targetInput = document.getElementById('targetScoreInput') || 
                              document.getElementById('targetScoreInputMobile');
            
            if (targetInput) {
                const target = parseInt(targetInput.value) || 5000;
                this.gameState.targetScore = target;
                console.log('üéØ Target score set to:', target);
            }
            
            // Reset hr√°ƒç≈Ø
            this.gameState.players.forEach(player => {
                player.score = 0;
            });
            this.gameState.currentPlayerIndex = 0;
            console.log('üë• Players reset');
            
            // Inicializace hern√≠ch promƒõnn√Ωch
            this.initGameVariables();
            
            // Skryt√≠ menu
            console.log('ü´• Hiding menus...');
            this.hideMenus();
            
            // Zobrazen√≠ hern√≠ch ovl√°d√°n√≠
            console.log('üéÆ Showing game controls...');
            this.showGameControls();
            
            // Aktualizace stavu
            this.gameState.gameStarted = true;
            this.gameState.gameEnded = false;
            console.log('‚úÖ Game state updated:', {
                gameStarted: this.gameState.gameStarted,
                gameEnded: this.gameState.gameEnded
            });
            
            // Aktualizace UI
            this.updateDiceDisplay();
            this.updateGameButtons();
            this.updateScore();
            console.log('üñºÔ∏è UI updated');
            
            // Zobrazen√≠ √∫spƒõ≈°n√© zpr√°vy
            this.showNotification('Hra byla spu≈°tƒõna!', 'success');
            this.addChatMessage('Syst√©m', 'üéÆ Hra zaƒçala! Hoƒète kostky pro zaƒç√°tek.', 'system');
            
            console.log('‚úÖ Game started successfully!');
            
        } catch (error) {
            console.error('‚ùå Failed to start game:', error);
            this.showError('Chyba p≈ôi spu≈°tƒõn√≠ hry');
        }
    }

    // Ukonƒçen√≠ hry
    async quitGame() {
        try {
            console.log('üîö Quitting game...');
            console.log('üîç Current game state before quit:', {
                gameStarted: this.gameState.gameStarted,
                gameEnded: this.gameState.gameEnded
            });
            
            // Skryt√≠ hern√≠ch ovl√°d√°n√≠
            console.log('ü´• Hiding game controls...');
            this.hideGameControls();
            
            // Zobrazen√≠ menu
            console.log('üè† Showing menus...');
            this.showMenus();
            
            // Reset stavu
            this.gameState.gameStarted = false;
            this.gameState.gameEnded = false;
            console.log('üîÑ Game state reset:', {
                gameStarted: this.gameState.gameStarted,
                gameEnded: this.gameState.gameEnded
            });
            
            // Zobrazen√≠ zpr√°vy
            this.showNotification('Hra byla ukonƒçena', 'info');
            
            console.log('‚úÖ Game quit successfully!');
            
        } catch (error) {
            console.error('‚ùå Failed to quit game:', error);
        }
    }

    // Zobrazen√≠ Hall of Fame
    showHallOfFame() {
        const modal = document.getElementById('hallOfFameModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // Zobrazen√≠ pravidel
    showRules() {
        const modal = document.getElementById('rulesModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    // Skryt√≠ menu
    hideMenus() {
        console.log('ü´• hideMenus() called');
        const elements = [
            document.getElementById('gameContent'),
            document.getElementById('gameMobileContent')
        ];
        
        elements.forEach((el, index) => {
            if (el) {
                el.classList.add('hidden');
                console.log(`‚úÖ Hidden menu element ${index + 1}`);
            } else {
                console.warn(`‚ö†Ô∏è Menu element ${index + 1} not found`);
            }
        });
    }

    // Zobrazen√≠ menu
    showMenus() {
        console.log('üè† showMenus() called');
        const elements = [
            document.getElementById('gameContent'),
            document.getElementById('gameMobileContent')
        ];
        
        elements.forEach((el, index) => {
            if (el) {
                el.classList.remove('hidden');
                console.log(`‚úÖ Shown menu element ${index + 1}`);
            } else {
                console.warn(`‚ö†Ô∏è Menu element ${index + 1} not found`);
            }
        });
    }

    // Skryt√≠ hern√≠ch ovl√°d√°n√≠
    hideGameControls() {
        console.log('ü´• hideGameControls() called');
        const elements = [
            document.getElementById('gameControls'),
            document.getElementById('gameControlsMobile')
        ];
        
        elements.forEach((el, index) => {
            if (el) {
                el.classList.add('hidden');
                console.log(`‚úÖ Hidden game control element ${index + 1}`);
            } else {
                console.warn(`‚ö†Ô∏è Game control element ${index + 1} not found`);
            }
        });
    }

    // Zobrazen√≠ hern√≠ch ovl√°d√°n√≠
    showGameControls() {
        console.log('üéÆ showGameControls() called');
        const elements = [
            document.getElementById('gameControls'),
            document.getElementById('gameControlsMobile')
        ];
        
        elements.forEach((el, index) => {
            if (el) {
                el.classList.remove('hidden');
                console.log(`‚úÖ Shown game control element ${index + 1}`);
            } else {
                console.warn(`‚ö†Ô∏è Game control element ${index + 1} not found`);
            }
        });
    }

    // Zav≈ôen√≠ mod√°ln√≠ho okna
    closeModal(target) {
        const modal = target.closest('.modal-overlay');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // Zav≈ôen√≠ vrchn√≠ho mod√°ln√≠ho okna
    closeTopModal() {
        const modals = document.querySelectorAll('.modal-overlay:not(.hidden)');
        if (modals.length > 0) {
            modals[modals.length - 1].classList.add('hidden');
        }
    }

    // Zobrazen√≠ notifikace
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = `
            top: 20px;
            right: 20px;
            z-index: 1060;
            min-width: 300px;
        `;
        
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // Zobrazen√≠ chyby
    showError(message) {
        this.showNotification(message, 'danger');
    }

    // Zpracov√°n√≠ resize
    handleResize() {
        if (typeof AOS !== 'undefined') {
            AOS.refresh();
        }
    }

    // ============================================
    // HERN√ç LOGIKA
    // ============================================

    // Inicializace hern√≠ch promƒõnn√Ωch
    initGameVariables() {
        this.gameState.currentTurn = {
            diceValues: [],
            selectedDice: [],
            availableDice: 6,
            turnScore: 0,
            mustBankDice: false
        };
        
        console.log('üéÆ Game variables initialized');
    }

    // Hozen√≠ kostkami
    rollDice() {
        console.log('üé≤ Rolling dice...');
        
        if (!this.gameState.gameStarted) {
            console.warn('Game not started');
            return;
        }

        // Inicializace hern√≠ch promƒõnn√Ωch pokud nejsou
        if (!this.gameState.currentTurn) {
            this.initGameVariables();
        }

        const availableDice = this.gameState.currentTurn.availableDice;
        
        if (availableDice <= 0) {
            console.warn('No dice available to roll');
            return;
        }

        // Hozen√≠ kostkami
        const diceValues = [];
        for (let i = 0; i < availableDice; i++) {
            diceValues.push(Math.floor(Math.random() * 6) + 1);
        }

        console.log('üé≤ Dice rolled:', diceValues);
        
        // Ulo≈æen√≠ v√Ωsledk≈Ø
        this.gameState.currentTurn.diceValues = diceValues;
        this.gameState.currentTurn.selectedDice = [];
        
        // Aktualizace UI
        this.updateDiceDisplay();
        this.updateGameButtons();
        
        // Zkontroluj FARKLE
        const score = this.calculateScore(diceValues);
        if (score === 0) {
            console.log('‚ùå FARKLE! No scoring dice');
            this.handleFarkle();
        } else {
            console.log('‚úÖ Scoring dice available, score:', score);
            this.gameState.currentTurn.mustBankDice = true;
            this.addChatMessage('Syst√©m', `üé≤ Hodil jste: ${diceValues.join(', ')}. Mo≈æn√© body: ${score}`, 'system');
        }
    }

    // V√Ωpoƒçet sk√≥re
    calculateScore(diceValues) {
        if (!Array.isArray(diceValues)) return 0;
        
        // Jednoduch√Ω v√Ωpoƒçet Farkle sk√≥re
        const counts = {};
        diceValues.forEach(value => {
            counts[value] = (counts[value] || 0) + 1;
        });

        let score = 0;
        
        // Jedniƒçky (100 bod≈Ø za kus, 1000 za triple)
        if (counts[1]) {
            if (counts[1] >= 3) {
                score += 1000;
                counts[1] -= 3;
            }
            score += counts[1] * 100;
        }

        // Pƒõtky (50 bod≈Ø za kus, 500 za triple)
        if (counts[5]) {
            if (counts[5] >= 3) {
                score += 500;
                counts[5] -= 3;
            }
            score += counts[5] * 50;
        }

        // Ostatn√≠ triple kombinace
        [2, 3, 4, 6].forEach(num => {
            if (counts[num] >= 3) {
                score += num * 100;
            }
        });

        return score;
    }

    // V√Ωbƒõr kostky
    selectDice(diceElement) {
        console.log('üéØ Selecting dice');
        
        if (!this.gameState.currentTurn || !this.gameState.currentTurn.mustBankDice) {
            console.warn('Cannot select dice - must roll first or bank dice');
            return;
        }

        const index = parseInt(diceElement.dataset.index);
        const selectedDice = this.gameState.currentTurn.selectedDice;
        
        if (selectedDice.includes(index)) {
            // Odznaƒçit
            selectedDice.splice(selectedDice.indexOf(index), 1);
            diceElement.classList.remove('selected');
            console.log('‚ûñ Dice deselected:', index);
        } else {
            // Oznaƒçit
            selectedDice.push(index);
            diceElement.classList.add('selected');
            console.log('‚ûï Dice selected:', index);
        }

        this.updateGameButtons();
    }

    // Odlo≈æen√≠ vybran√Ωch kostek
    bankDice() {
        console.log('üè¶ Banking dice...');
        
        if (!this.gameState.currentTurn || this.gameState.currentTurn.selectedDice.length === 0) {
            console.warn('No dice selected to bank');
            return;
        }

        const selectedIndices = this.gameState.currentTurn.selectedDice;
        const selectedValues = selectedIndices.map(i => this.gameState.currentTurn.diceValues[i]);
        const score = this.calculateScore(selectedValues);
        
        if (score === 0) {
            console.warn('Selected dice have no score');
            return;
        }

        // P≈ôid√°n√≠ sk√≥re
        this.gameState.currentTurn.turnScore += score;
        this.gameState.currentTurn.availableDice -= selectedIndices.length;
        
        // Hot dice - pokud se pou≈æily v≈°echny kostky
        if (this.gameState.currentTurn.availableDice === 0) {
            this.gameState.currentTurn.availableDice = 6;
            this.addChatMessage('Syst√©m', 'üî• HOT DICE! V≈°echny kostky pou≈æity, dost√°v√°te 6 nov√Ωch!', 'system');
        }

        // Reset pro dal≈°√≠ hod
        this.gameState.currentTurn.diceValues = [];
        this.gameState.currentTurn.selectedDice = [];
        this.gameState.currentTurn.mustBankDice = false;
        
        console.log('üí∞ Banked dice for score:', score, 'Total turn score:', this.gameState.currentTurn.turnScore);
        this.addChatMessage('Syst√©m', `üí∞ Z√≠skali jste ${score} bod≈Ø. Celkem v tahu: ${this.gameState.currentTurn.turnScore}`, 'system');
        
        this.updateDiceDisplay();
        this.updateGameButtons();
        this.updateScore();
    }

    // Ukonƒçen√≠ tahu
    endTurn() {
        console.log('‚úã Ending turn...');
        
        if (!this.gameState.currentTurn) {
            console.warn('No active turn to end');
            return;
        }

        // P≈ôid√°n√≠ sk√≥re k celkov√©mu sk√≥re hr√°ƒçe
        this.gameState.players[this.gameState.currentPlayerIndex].score += this.gameState.currentTurn.turnScore;
        
        const finalScore = this.gameState.players[this.gameState.currentPlayerIndex].score;
        console.log('üìä Turn ended with score:', this.gameState.currentTurn.turnScore, 'Total score:', finalScore);
        
        this.addChatMessage('Syst√©m', `üèÅ Tah ukonƒçen! Celkov√© sk√≥re: ${finalScore}`, 'system');
        
        // Zkontroluj v√Ωhru
        if (finalScore >= this.gameState.targetScore) {
            this.handleGameWin();
            return;
        }

        // P≈ôechod na dal≈°√≠ho hr√°ƒçe
        this.nextPlayer();
    }

    // Zpracov√°n√≠ FARKLE
    handleFarkle() {
        console.log('üí• FARKLE!');
        this.addChatMessage('Syst√©m', 'üí• FARKLE! ≈Ω√°dn√© boduj√≠c√≠ kostky! Tah konƒç√≠ s 0 body.', 'system');
        
        // Reset tahu
        this.gameState.currentTurn = {
            diceValues: [],
            selectedDice: [],
            availableDice: 6,
            turnScore: 0,
            mustBankDice: false
        };
        
        this.updateDiceDisplay();
        this.updateGameButtons();
        
        // P≈ôechod na dal≈°√≠ho hr√°ƒçe po chvilce
        setTimeout(() => {
            this.nextPlayer();
        }, 2000);
    }

    // P≈ôechod na dal≈°√≠ho hr√°ƒçe
    nextPlayer() {
        this.gameState.currentPlayerIndex = (this.gameState.currentPlayerIndex + 1) % this.gameState.players.length;
        
        // Reset tahu
        this.initGameVariables();
        
        const currentPlayer = this.gameState.players[this.gameState.currentPlayerIndex];
        console.log('üë§ Next player:', currentPlayer.name);
        
        this.updateDiceDisplay();
        this.updateGameButtons();
        this.updateScore();
        
        // AI tah
        if (!currentPlayer.isHuman) {
            this.handleAITurn();
        } else {
            this.addChatMessage('Syst√©m', `üéÆ ${currentPlayer.name}, je v√°≈° tah!`, 'system');
        }
    }

    // Zpracov√°n√≠ AI tahu
    handleAITurn() {
        const currentPlayer = this.gameState.players[this.gameState.currentPlayerIndex];
        this.addChatMessage(currentPlayer.name, `ü§ñ P≈ôem√Ω≈°l√≠m o sv√©m tahu...`, 'ai');
        
        // Simulace AI tahu
        setTimeout(() => {
            const aiScore = Math.floor(Math.random() * 500) + 100;
            this.gameState.players[this.gameState.currentPlayerIndex].score += aiScore;
            
            this.addChatMessage(currentPlayer.name, `üéØ Z√≠skal jsem ${aiScore} bod≈Ø!`, 'ai');
            
            // Zkontroluj v√Ωhru
            if (this.gameState.players[this.gameState.currentPlayerIndex].score >= this.gameState.targetScore) {
                this.handleGameWin();
            } else {
                this.nextPlayer();
            }
        }, 2000);
    }

    // Zpracov√°n√≠ v√Ωhry
    handleGameWin() {
        const winner = this.gameState.players[this.gameState.currentPlayerIndex];
        console.log('üèÜ Game won by:', winner.name);
        
        this.gameState.gameEnded = true;
        this.addChatMessage('Syst√©m', `üèÜ ${winner.name} vyhr√°l hru se sk√≥re ${winner.score}!`, 'system');
        
        // Zobrazit modal v√Ωhry
        setTimeout(() => {
            this.showGameOverModal(winner);
        }, 2000);
    }

    // Zobrazen√≠ modalu konce hry
    showGameOverModal(winner) {
        const modal = document.getElementById('gameOverModal');
        if (modal) {
            // Aktualizace textu v√Ωhry
            const winnerText = modal.querySelector('#winnerText');
            if (winnerText) {
                winnerText.textContent = `${winner.name} vyhr√°l se sk√≥re ${winner.score}!`;
            }
            
            modal.classList.remove('hidden');
        }
    }

    // Aktualizace zobrazen√≠ kostek
    updateDiceDisplay() {
        const containers = ['diceContainer', 'diceContainerMobile'];
        
        containers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            container.innerHTML = '';
            
            if (this.gameState.currentTurn && this.gameState.currentTurn.diceValues.length > 0) {
                this.gameState.currentTurn.diceValues.forEach((value, index) => {
                    const diceElement = document.createElement('div');
                    diceElement.className = 'dice';
                    diceElement.dataset.index = index;
                    diceElement.textContent = value;
                    
                    // Oznaƒçen√≠ vybran√Ωch kostek
                    if (this.gameState.currentTurn.selectedDice.includes(index)) {
                        diceElement.classList.add('selected');
                    }
                    
                    container.appendChild(diceElement);
                });
            }
        });
    }

    // Aktualizace stavu tlaƒç√≠tek
    updateGameButtons() {
        const buttons = [
            { id: 'rollBtn', condition: !this.gameState.currentTurn?.mustBankDice && this.gameState.currentTurn?.availableDice > 0 },
            { id: 'bankBtn', condition: this.gameState.currentTurn?.mustBankDice && this.gameState.currentTurn?.selectedDice.length > 0 },
            { id: 'endTurnBtn', condition: this.gameState.currentTurn?.turnScore > 0 && !this.gameState.currentTurn?.mustBankDice }
        ];
        
        buttons.forEach(button => {
            const elements = [document.getElementById(button.id), document.getElementById(button.id + 'Mobile')];
            elements.forEach(element => {
                if (element) {
                    element.disabled = !button.condition;
                }
            });
        });
    }

    // Aktualizace sk√≥re
    updateScore() {
        const scoreElements = [
            { id: 'humanScore', index: 0 },
            { id: 'geminiScore', index: 1 },
            { id: 'chatgptScore', index: 2 },
            { id: 'claudeScore', index: 3 }
        ];
        
        scoreElements.forEach(element => {
            const scoreElement = document.getElementById(element.id);
            if (scoreElement && this.gameState.players[element.index]) {
                scoreElement.textContent = this.gameState.players[element.index].score;
            }
        });
        
        // Aktualizace sk√≥re tahu
        const turnScoreElements = ['currentTurnScore', 'currentTurnScoreMobile'];
        turnScoreElements.forEach(id => {
            const element = document.getElementById(id);
            if (element && this.gameState.currentTurn) {
                element.textContent = `Sk√≥re tahu: ${this.gameState.currentTurn.turnScore}`;
            }
        });
        
        // Aktualizace informace o tahu
        const turnInfoElements = ['turnInfo', 'turnInfoMobile'];
        turnInfoElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                const currentPlayer = this.gameState.players[this.gameState.currentPlayerIndex];
                element.textContent = currentPlayer.isHuman ? 'V√°≈° tah!' : `Tah: ${currentPlayer.name}`;
            }
        });
    }
}

// Inicializace aplikace
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üé≤ DOM loaded, initializing simple dice game...');
    
    try {
        const game = new SimpleDiceGame();
        await game.initialize();
        
        // Zp≈ô√≠stupnƒõn√≠ pro debugging
        window.simpleDiceGame = game;
        
        console.log('‚úÖ Simple dice game initialized successfully!');
        
    } catch (error) {
        console.error('‚ùå Failed to initialize simple dice game:', error);
        
        // Fallback error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger position-fixed top-0 start-0 w-100 text-center';
        errorDiv.style.zIndex = '9999';
        errorDiv.innerHTML = `
            <h4>‚ùå Chyba aplikace</h4>
            <p>Aplikace se nepoda≈ôila naƒç√≠st. Zkuste obnovit str√°nku.</p>
            <button class="btn btn-primary" onclick="window.location.reload()">Obnovit</button>
        `;
        
        document.body.appendChild(errorDiv);
    }
});

export default SimpleDiceGame;
