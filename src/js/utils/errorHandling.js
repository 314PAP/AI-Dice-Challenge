/**
 * üõ°Ô∏è Enhanced Error Handling
 * Pokroƒçil√Ω syst√©m pro zpracov√°n√≠ chyb s vyu≈æit√≠m funkcion√°ln√≠ho programov√°n√≠
 */

import { curry, pipe, tap, tryCatch } from 'ramda';

/**
 * Vlastn√≠ typy chyb pro lep≈°√≠ klasifikaci
 */
export class GameError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = 'GameError';
    this.code = options.code || 'GAME_ERROR';
    this.context = options.context || {};
  }
}

export class UIError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = 'UIError';
    this.code = options.code || 'UI_ERROR';
    this.context = options.context || {};
  }
}

export class NetworkError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = 'NetworkError';
    this.code = options.code || 'NETWORK_ERROR';
    this.context = options.context || {};
  }
}

/**
 * Vytvo≈ô√≠ bezpeƒçnou funkci, kter√° nikdy nespadne
 * @param {Function} fn - Funkce, kterou chceme udƒõlat bezpeƒçnou
 * @param {*} fallbackValue - Hodnota, kter√° se vr√°t√≠ v p≈ô√≠padƒõ chyby
 * @param {string} operationName - N√°zev operace pro logov√°n√≠
 * @returns {Function} Bezpeƒçn√° funkce, kter√° nikdy nespadne
 */
export const tryCatchWithLogging = curry((fn, fallbackValue, operationName = 'Operation') => {
  return tryCatch(
    // Hlavn√≠ funkce
    pipe(
      fn,
      tap(result => console.log(`‚úÖ ${operationName} completed successfully`, { result }))
    ),
    
    // Error handler
    err => {
      console.error(`‚ùå Error in ${operationName}:`, err);
      
      // Logov√°n√≠ do monitorovac√≠ho syst√©mu (pokud existuje)
      if (window.errorReporter && typeof window.errorReporter.report === 'function') {
        window.errorReporter.report(err, {
          operation: operationName,
          timestamp: new Date().toISOString()
        });
      }
      
      // Vr√°cen√≠ fallback hodnoty
      return fallbackValue;
    }
  );
});

/**
 * Validuje vstupn√≠ hodnotu podle sch√©matu
 * @param {Object} schema - Sch√©ma pro validaci
 * @param {*} value - Hodnota k validaci
 * @returns {Object} V√Ωsledek validace { isValid, value, errors }
 */
export const validateInput = curry((schema, value) => {
  const result = { isValid: true, value, errors: [] };
  
  // Kontrola typu
  if (schema.type && typeof value !== schema.type) {
    result.isValid = false;
    result.errors.push(`Expected type ${schema.type}, got ${typeof value}`);
  }
  
  // Kontrola hodnoty ƒç√≠sla
  if (schema.type === 'number') {
    // Kontrola minim√°ln√≠ hodnoty
    if (schema.min !== undefined && value < schema.min) {
      result.isValid = false;
      result.errors.push(`Value ${value} is less than minimum ${schema.min}`);
    }
    
    // Kontrola maxim√°ln√≠ hodnoty
    if (schema.max !== undefined && value > schema.max) {
      result.isValid = false;
      result.errors.push(`Value ${value} is greater than maximum ${schema.max}`);
    }
  }
  
  // Kontrola ≈ôetƒõzce
  if (schema.type === 'string') {
    // Kontrola minim√°ln√≠ d√©lky
    if (schema.minLength !== undefined && value.length < schema.minLength) {
      result.isValid = false;
      result.errors.push(`String length ${value.length} is less than minimum ${schema.minLength}`);
    }
    
    // Kontrola maxim√°ln√≠ d√©lky
    if (schema.maxLength !== undefined && value.length > schema.maxLength) {
      result.isValid = false;
      result.errors.push(`String length ${value.length} is greater than maximum ${schema.maxLength}`);
    }
    
    // Kontrola form√°tu pomoc√≠ regul√°rn√≠ho v√Ωrazu
    if (schema.pattern && !schema.pattern.test(value)) {
      result.isValid = false;
      result.errors.push('String does not match required pattern');
    }
  }
  
  return result;
});

/**
 * Vytvo≈ô√≠ valid√°tor, kter√Ω buƒè vr√°t√≠ validovanou hodnotu, nebo vyhod√≠ v√Ωjimku
 * @param {Object} schema - Sch√©ma pro validaci
 * @returns {Function} Validaƒçn√≠ funkce
 */
export const createValidator = curry((schema, value) => {
  const result = validateInput(schema, value);
  
  if (!result.isValid) {
    throw new GameError(`Validation failed: ${result.errors.join(', ')}`, { 
      code: 'VALIDATION_ERROR', 
      context: { schema, value, errors: result.errors }
    });
  }
  
  return value;
});

// Export pro pou≈æit√≠ v jin√Ωch modulech
export const safeExecute = tryCatchWithLogging;
