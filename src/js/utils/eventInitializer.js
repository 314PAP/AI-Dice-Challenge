/**
 * üéÆ Event Initializer - Zaji≈°tuje spr√°vn√© nastaven√≠ v≈°ech event handler≈Ø v aplikaci
 * Tento soubor ≈ôe≈°√≠ probl√©my s event handlery po refaktoringu
 */

import { startGame, nextPlayer, resetGame, returnToMainMenu } from '../game/controllers/gameFlowController.js';
import { rollDiceForPlayer, bankSelectedDice } from '../game/controllers/turnActionsController.js';
import { displayHallOfFame } from '../utils/hallOfFame.js';
import { setupEventListeners as setupGameEventListeners } from '../game/controllers/eventSetupController.js';

let eventInitialized = false;

/**
 * Inicializuje v≈°echny event listenery pro celou aplikaci
 * Pou≈æ√≠v√° se jako z√°chrann√° s√≠≈• pro zaji≈°tƒõn√≠ funkƒçnosti v≈°ech tlaƒç√≠tek
 */
export function initializeAllEventListeners() {
    if (eventInitialized) {
        console.log('‚ö†Ô∏è Event listenery u≈æ byly inicializov√°ny, p≈ôeskakuji...');
        return;
    }

    console.log('üöÄ Inicializuji v≈°echny event listenery aplikace...');
    
    // Nejd≈ô√≠v zkus√≠me pou≈æ√≠t standardn√≠ inicializaci
    setupGameEventListeners();
    
    // Potom p≈ôid√°me z√°lo≈æn√≠ event listenery pro p≈ô√≠pad, ≈æe by nƒõco nefungovalo
    setupBackupEventListeners();
    
    // Inicializace chatu
    setupChatListeners();
    
    eventInitialized = true;
    console.log('‚úÖ V≈°echny event listenery √∫spƒõ≈°nƒõ inicializov√°ny!');
}

/**
 * Nastav√≠ z√°lo≈æn√≠ event listenery pro p≈ô√≠pad, ≈æe by p≈Øvodn√≠ implementace selhala
 */
function setupBackupEventListeners() {
    console.log('üîß Nastavuji z√°lo≈æn√≠ event listenery...');
    
    // Start Game Button - pou≈æijeme robustn√≠ p≈ô√≠stup s n√°hradou elementu
    const startBtn = document.getElementById('startGameBtn');
    if (startBtn) {
        // Vytvo≈ô√≠me kopii tlaƒç√≠tka
        const newStartBtn = startBtn.cloneNode(true);
        // P≈ôid√°me event listener
        newStartBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üéÆ Start Game button clicked (backup listener)');
            const targetScoreInput = document.getElementById('targetScoreInput');
            const targetScore = parseInt(targetScoreInput?.value || '1000');
            
            if (targetScore >= 1000) {
                startGame();
            } else {
                alert('C√≠lov√© sk√≥re mus√≠ b√Ωt alespo≈à 1000 bod≈Ø!');
            }
        });
        // Nahrad√≠me p≈Øvodn√≠ tlaƒç√≠tko na≈°√≠m nov√Ωm
        startBtn.parentNode.replaceChild(newStartBtn, startBtn);
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Start Game Button (kompletn√≠ n√°hrada)');
    } else {
        console.error('‚ùå Start Game Button nenalezen!');
    }
    
    // Roll Button
    const rollBtn = document.getElementById('rollBtn');
    if (rollBtn && !rollBtn._hasClickListener) {
        rollBtn.addEventListener('click', () => {
            console.log('üé≤ Roll button clicked (backup listener)');
            rollDiceForPlayer();
        });
        rollBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Roll Button');
    }
    
    // Bank Button
    const bankBtn = document.getElementById('bankBtn');
    if (bankBtn && !bankBtn._hasClickListener) {
        bankBtn.addEventListener('click', () => {
            console.log('üí∞ Bank button clicked (backup listener)');
            bankSelectedDice();
        });
        bankBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Bank Button');
    }
    
    // End Turn Button
    const endTurnBtn = document.getElementById('endTurnBtn');
    if (endTurnBtn && !endTurnBtn._hasClickListener) {
        endTurnBtn.addEventListener('click', () => {
            console.log('‚è≠Ô∏è End Turn button clicked (backup listener)');
            nextPlayer(); // Pou≈æ√≠v√°me importovanou funkci nextPlayer
        });
        endTurnBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k End Turn Button');
    }
    
    // Hall of Fame Button
    const hallBtn = document.getElementById('hallOfFameBtn');
    if (hallBtn && !hallBtn._hasClickListener) {
        hallBtn.addEventListener('click', () => {
            console.log('üèÜ Hall of Fame button clicked (backup listener)');
            displayHallOfFame();
        });
        hallBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Hall of Fame Button');
    }
    
    // Reset Game Button
    const resetBtn = document.getElementById('resetGameBtn');
    if (resetBtn && !resetBtn._hasClickListener) {
        resetBtn.addEventListener('click', () => {
            console.log('üîÑ Reset Game button clicked (backup listener)');
            resetGame();
        });
        resetBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Reset Game Button');
    }
    
    // Return to Main Menu Button
    const menuBtn = document.getElementById('mainMenuBtn');
    if (menuBtn && !menuBtn._hasClickListener) {
        menuBtn.addEventListener('click', () => {
            console.log('üè† Return to Main Menu button clicked (backup listener)');
            returnToMainMenu();
        });
        menuBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Return to Main Menu Button');
    }
}

/**
 * Nastav√≠ event listenery pro chat
 */
function setupChatListeners() {
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendMessageBtn');
    
    if (chatInput && !chatInput._hasKeyListener) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
        chatInput._hasKeyListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Chat Input');
    }
    
    if (sendBtn && !sendBtn._hasClickListener) {
        sendBtn.addEventListener('click', () => {
            sendChatMessage();
        });
        sendBtn._hasClickListener = true;
        console.log('‚úÖ Z√°lo≈æn√≠ listener p≈ôid√°n k Send Button');
    }
}

/**
 * Pomocn√° funkce pro odesl√°n√≠ zpr√°vy z chatu
 */
function sendChatMessage() {
    const chatInput = document.getElementById('chatInput');
    if (!chatInput || !chatInput.value.trim()) return;
    
    const message = chatInput.value.trim();
    console.log('üì§ Sending chat message:', message);
    
    // Zkus√≠me naj√≠t funkci pro p≈ôid√°n√≠ zpr√°vy r≈Øzn√Ωmi zp≈Øsoby
    if (typeof window.addChatMessage === 'function') {
        window.addChatMessage('Hr√°ƒç', message, 'player');
    } else if (window.chatController && typeof window.chatController.addMessage === 'function') {
        window.chatController.addMessage('Hr√°ƒç', message, 'player');
    } else if (window.enhancedChatController && typeof window.enhancedChatController.addMessage === 'function') {
        window.enhancedChatController.addMessage('Hr√°ƒç', message, 'player');
    } else {
        console.error('‚ùå Nenalezena funkce pro p≈ôid√°n√≠ zpr√°vy do chatu!');
    }
    
    chatInput.value = '';
}
