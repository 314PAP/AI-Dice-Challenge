/**
 * Hall of Fame - Spr√°va s√≠nƒõ slavy
 * Ukl√°d√°n√≠ a naƒç√≠t√°n√≠ nejlep≈°√≠ch v√Ωsledk≈Ø hr√°ƒç≈Ø
 */

import { STORAGE_KEYS } from './constants.js';
import { saveToLocalStorage, loadFromLocalStorage } from './helpers.js';

/**
 * P≈ôid√° nov√© sk√≥re do s√≠nƒõ slavy
 * @param {string} playerName - Jm√©no hr√°ƒçe
 * @param {number} score - Dosa≈æen√© sk√≥re
 */
export const addScoreToHallOfFame = (playerName, score) => {
    try {
        // Naƒçteme souƒçasnou s√≠≈à slavy
        const currentHallOfFame = getHallOfFame();
        
        // P≈ôid√°me nov√© sk√≥re
        const newEntry = {
            name: playerName,
            score: score,
            date: new Date().toISOString(),
            timestamp: Date.now()
        };
        
        currentHallOfFame.push(newEntry);
        
        // Se≈ôad√≠me podle sk√≥re (sestupnƒõ) a vezmeme top 10
        const sortedHallOfFame = currentHallOfFame
            .sort((a, b) => b.score - a.score)
            .slice(0, 10);
        
        // Ulo≈æ√≠me zpƒõt
        saveToLocalStorage(STORAGE_KEYS.HALL_OF_FAME, sortedHallOfFame);
        
        console.log(`üèÜ P≈ôid√°no do s√≠nƒõ slavy: ${playerName} - ${score} bod≈Ø`);
        return true;
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ do s√≠nƒõ slavy:', error);
        return false;
    }
};

/**
 * Naƒçte s√≠≈à slavy z localStorage
 * @returns {Array} Pole s nejlep≈°√≠mi v√Ωsledky
 */
export const getHallOfFame = () => {
    try {
        const hallOfFame = loadFromLocalStorage(STORAGE_KEYS.HALL_OF_FAME, []);
        return Array.isArray(hallOfFame) ? hallOfFame : [];
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ s√≠nƒõ slavy:', error);
        return [];
    }
};

/**
 * Vyma≈æe celou s√≠≈à slavy
 */
export const clearHallOfFame = () => {
    try {
        saveToLocalStorage(STORAGE_KEYS.HALL_OF_FAME, []);
        console.log('üóëÔ∏è S√≠≈à slavy byla vymaz√°na');
        return true;
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi maz√°n√≠ s√≠nƒõ slavy:', error);
        return false;
    }
};

/**
 * Zkontroluje, jestli je sk√≥re dostateƒçnƒõ dobr√© na z√°pis do s√≠nƒõ slavy
 * @param {number} score - Sk√≥re ke kontrole
 * @returns {boolean} True pokud se sk√≥re dostane do top 10
 */
export const isScoreWorthyOfHallOfFame = (score) => {
    try {
        const hallOfFame = getHallOfFame();
        
        // Pokud je s√≠≈à slavy pr√°zdn√° nebo m√° m√©nƒõ ne≈æ 10 z√°znam≈Ø
        if (hallOfFame.length < 10) {
            return true;
        }
        
        // Pokud je sk√≥re lep≈°√≠ ne≈æ nejhor≈°√≠ v top 10
        const worstScore = hallOfFame[hallOfFame.length - 1].score;
        return score > worstScore;
    } catch (error) {
        console.error('‚ùå Chyba p≈ôi kontrole s√≠nƒõ slavy:', error);
        return false;
    }
};
