/**
 * AI Player Controller - Automatick√© hran√≠ za AI hr√°ƒçe
 * 
 * OBSAH MODULU:
 * - Automatick√© hran√≠ za AI hr√°ƒçe
 * - AI rozhodov√°n√≠ o dal≈°√≠ch taz√≠ch
 * - Vyhodnocov√°n√≠ nejlep≈°√≠ch kombinac√≠
 * - AI reakce na hern√≠ ud√°losti
 * - Simulace lidsk√©ho hran√≠ (delay, koment√°≈ôe)
 * 
 * FUNKCE P≈òESUNUT√â Z gameUI.js:
 * - playAiTurn() - automatick√© hran√≠ AI
 * - makeAiDecision() - rozhodov√°n√≠ AI
 * - findBestDiceToSave() - hled√°n√≠ nejlep≈°√≠ch kostek
 * - triggerAiReactions() - reakce AI na ud√°losti
 */

/**
 * SEZNAM POU≈Ω√çVAN√ùCH CSS T≈ò√çD:
 * Bootstrap: (≈æ√°dn√© p≈ô√≠m√© CSS t≈ô√≠dy - AI logika)
 * Neon t≈ô√≠dy: (≈æ√°dn√© - ƒçist√° AI logika)  
 * Vlastn√≠: (≈æ√°dn√© - logika bez UI)
 */

/**
 * SEZNAM PROMƒöNN√ùCH (lok√°ln√≠ v metod√°ch):
 * state, attempts, maxAttempts, currentState, hasScoring, decision, selectedValues, points, bestDice, currentTurnPoints,
 * newPoints, totalPoints, riskFactor, diceRisk, pointsRisk, combinations, aPointsPerDie, bPointsPerDie, used, counts
 * 
 * MO≈ΩN√â DUPLICITY: 
 * - state/currentState (pou≈æ√≠v√° se ve v√≠ce metod√°ch - OK, lok√°ln√≠ scope)
 * - points (pou≈æ√≠v√° se v executeAiAction a findBestDiceToSave)
 * - combinations (pou≈æ√≠v√° se v findBestDiceToSave a findAllValidCombinations)
 */

import { calculatePoints, hasScoringDice } from '../game/diceMechanics.js';
import gameState from '../game/gameState.js';
import chatSystem from './chatSystem.js';
import { CHAT_COLORS } from '../utils/colors.js';

export class AiPlayerController {
    constructor(gameLogic) {
        this.gameLogic = gameLogic;
    }

    /**
     * Hraje automatick√Ω tah za AI hr√°ƒçe
     * P≈òESUNUTO Z gameUI.js
     * @param {Object} aiPlayer - AI hr√°ƒç na tahu
     */
    async playAiTurn(aiPlayer) {
        console.log(`ü§ñ AiController: ${aiPlayer.name} hraje automaticky...`);
        // ODSTRANƒöNO: Syst√©mov√° zpr√°va "p≈ôem√Ω≈°l√≠" - ru≈°√≠ AI chat
        
        const state = gameState.getState();
        
        // Pokud AI nen√≠ na tahu, ukonƒç√≠me
        if (state.players[state.currentPlayerIndex].name !== aiPlayer.name) {
            console.warn('‚ö†Ô∏è AI nen√≠ na tahu!');
            return;
        }
        
        try {
            // Pokud nejsou kostky na stole, zaƒçneme hodem
            if (!state.currentRoll || state.currentRoll.length === 0) {
                await this.delay(1000);
                chatSystem.addAiMessage(aiPlayer.name, "Zaƒç√≠n√°m tah! üé≤");
                await this.gameLogic.rollDice();
                await this.delay(3000); // Del≈°√≠ ƒçek√°n√≠ po hodu
            }
            
            // AI rozhodov√°n√≠ loop
            await this.aiDecisionLoop(aiPlayer);
            
        } catch (error) {
            console.error('‚ùå Chyba v AI tahu:', error);
            // Backup - ukonƒç√≠me tah pokud se nƒõco pokaz√≠
            this.gameLogic.endTurn();
        }
    }

    /**
     * Hlavn√≠ smyƒçka rozhodov√°n√≠ AI
     * @param {Object} aiPlayer - AI hr√°ƒç
     */
    async aiDecisionLoop(aiPlayer) {
        let attempts = 0;
        const maxAttempts = 10; // Ochrana proti nekoneƒçn√© smyƒçce
        
        while (attempts < maxAttempts) {
            attempts++;
            const currentState = gameState.getState();
            
            // KONTROLA ZRU≈†EN√âHO TAHU - pokud se zpracov√°v√° farkle, ukonƒç√≠me
            if (currentState.isFarkleProcessing) {
                console.log(`ü§ñ AI ${aiPlayer.name} - farkle se u≈æ zpracov√°v√°, ukonƒçuji rozhodov√°n√≠`);
                break;
            }
            
            // Kontrola, zda je AI st√°le na tahu
            if (currentState.players[currentState.currentPlayerIndex].name !== aiPlayer.name) {
                console.log(`ü§ñ AI ${aiPlayer.name} u≈æ nen√≠ na tahu, ukonƒçuji rozhodov√°n√≠`);
                break;
            }
            
            // Pokud nen√≠ co odlo≈æit a nejsou ani odlo≈æen√© kostky ani turnScore, m≈Ø≈æe to b√Ωt konec tahu
            if (!currentState.currentRoll || currentState.currentRoll.length === 0) {
                // Kontrola HOT DICE - pokud m√°me turnScore ale ≈æ√°dn√© kostky, znamen√° to HOT DICE reset
                if (currentState.turnScore > 0) {
                    console.log(`ü§ñ AI ${aiPlayer.name} m√° HOT DICE (turnScore: ${currentState.turnScore}), h√°z√≠m znovu v≈°emi kostkami`);
                    // Je≈°tƒõ jednou zkontrolujeme, ≈æe AI je st√°le na tahu p≈ôed HOT DICE hodem
                    const recentState = gameState.getState();
                    if (recentState.players[recentState.currentPlayerIndex].name === aiPlayer.name) {
                        this.gameLogic.rollDice();
                        await this.delay(3000); // ƒåek√°me na dokonƒçen√≠ animace
                        continue; // Pokraƒçujeme v rozhodov√°n√≠
                    } else {
                        console.log(`ü§ñ AI ${aiPlayer.name} u≈æ nen√≠ na tahu bƒõhem HOT DICE, ukonƒçuji rozhodov√°n√≠`);
                        break;
                    }
                } else {
                    console.log(`ü§ñ AI ${aiPlayer.name} nem√° kostky na stole, ukonƒçuji rozhodov√°n√≠`);
                    break;
                }
            }
            
            // KONTROLA FARKLE - pokud jsou na stole kostky, ale ≈æ√°dn√© nejsou boduj√≠c√≠
            if (currentState.currentRoll && currentState.currentRoll.length > 0) {
                console.log(`üé≤ AI ${aiPlayer.name} kontroluje FARKLE na kostk√°ch:`, currentState.currentRoll);
                const hasScoring = hasScoringDice(currentState.currentRoll);
                console.log(`üé≤ hasScoringDice(${JSON.stringify(currentState.currentRoll)}) =`, hasScoring);
                
                if (!hasScoring) {
                    console.log(`ü§ñ AI ${aiPlayer.name} detekoval FARKLE - spou≈°t√≠m handleFarkle() pro automatick√© zpracov√°n√≠`);
                    chatSystem.addAiMessage(aiPlayer.name, "Oh ne, FARKLE! üí•üò±");
                    
                    // FORCE spu≈°tƒõn√≠ handleFarkle() pro zpracov√°n√≠ FARKLE - s kontrolou, zda je AI st√°le na tahu
                    setTimeout(() => {
                        const currentState = gameState.getState();
                        if (currentState.players[currentState.currentPlayerIndex].name === aiPlayer.name) {
                            this.gameLogic.handleFarkle(currentState.currentRoll);
                        } else {
                            console.log(`ü§ñ AI ${aiPlayer.name} u≈æ nen√≠ na tahu, nebudu volat handleFarkle()`);
                        }
                    }, 1000); // Kr√°tk√© zpo≈ædƒõn√≠ pro lep≈°√≠ UX
                    
                    console.log(`ü§ñ AI ${aiPlayer.name} ukonƒçuje rozhodov√°n√≠ - FARKLE bude zpracov√°n`);
                    return; // UKONƒåUJEME CELOU FUNKCI, NE POUZE SMYƒåKU!
                } else {
                    console.log(`‚úÖ AI ${aiPlayer.name} na≈°el boduj√≠c√≠ kostky, pokraƒçuje...`);
                }
            }
            
            // AI rozhodov√°n√≠
            const decision = this.makeAiDecision(aiPlayer, currentState);
            
            if (decision.action === 'save') {
                const result = await this.executeSaveDecision(aiPlayer, decision, currentState);
                if (result === 'endTurn') {
                    break; // Ukonƒçit smyƒçku - tah je dokonƒçen
                } else if (result === 'continue') {
                    continue; // Pokraƒçovat ve smyƒçce - AI u≈æ hodil
                }
                // Jinak pokraƒçovat norm√°lnƒõ ve smyƒçce
            } else if (decision.action === 'endTurn') {
                await this.executeEndTurnDecision(aiPlayer);
                break;
            } else if (decision.action === 'continue') {
                await this.executeContinueDecision(aiPlayer);
            } else {
                console.warn('‚ö†Ô∏è AI nerozpoznalo akci, ukonƒçuji tah');
                this.gameLogic.endTurn();
                break;
            }
            
            await this.delay(1500); // Pauza mezi akcemi
        }
        
        if (attempts >= maxAttempts) {
            console.warn('‚ö†Ô∏è AI dos√°hlo maxim√°ln√≠ho poƒçtu pokus≈Ø');
            this.gameLogic.endTurn();
        }
    }

    /**
     * Provede rozhodnut√≠ o odlo≈æen√≠ kostek
     * @param {Object} aiPlayer - AI hr√°ƒç
     * @param {Object} decision - Rozhodnut√≠ AI
     * @param {Object} currentState - Aktu√°ln√≠ stav
     */
    async executeSaveDecision(aiPlayer, decision, currentState) {
        console.log(`ü§ñ AI ${aiPlayer.name} vyb√≠r√° kostky:`, decision.diceToSave);
        gameState.updateState({ selectedDice: decision.diceToSave });
        await this.delay(500);
        
        const selectedValues = decision.diceToSave.map(i => currentState.currentRoll[i]);
        const points = calculatePoints(selectedValues);
        
        chatSystem.addAiMessage(aiPlayer.name, `Odkl√°d√°m kostky [${selectedValues.join(', ')}] za ${points} bod≈Ø! üíé`);
        
        this.gameLogic.saveDice();
        await this.delay(1000);
        
        // ZPRACOV√ÅN√ç NEXT ACTION - co dƒõlat po ulo≈æen√≠ kostek
        if (decision.nextAction === 'endTurn') {
            console.log(`ü§ñ AI ${aiPlayer.name} rozhodl ukonƒçit tah po ulo≈æen√≠ kostek`);
            await this.executeEndTurnDecision(aiPlayer);
            return 'endTurn'; // Sign√°l pro ukonƒçen√≠ smyƒçky
        } else if (decision.nextAction === 'continue') {
            console.log(`ü§ñ AI ${aiPlayer.name} rozhodl pokraƒçovat v h√°zen√≠`);
            await this.executeContinueDecision(aiPlayer);
            return 'continue'; // Sign√°l pro pokraƒçov√°n√≠
        }
        
        return 'save'; // Pouze ulo≈æen√≠, pokraƒçovat v rozhodov√°n√≠
    }

    /**
     * Provede rozhodnut√≠ o ukonƒçen√≠ tahu
     * @param {Object} aiPlayer - AI hr√°ƒç
     */
    async executeEndTurnDecision(aiPlayer) {
        chatSystem.addAiMessage(aiPlayer.name, "Ukonƒçuji tah. Solidn√≠ v√Ωsledek! ‚úÖ");
        await this.delay(1000);
        this.gameLogic.endTurn();
    }

    /**
     * Provede rozhodnut√≠ o pokraƒçov√°n√≠
     * @param {Object} aiPlayer - AI hr√°ƒç
     */
    async executeContinueDecision(aiPlayer) {
        // Zkontrolujeme, ≈æe AI je st√°le na tahu p≈ôed pokraƒçov√°n√≠m
        const currentState = gameState.getState();
        if (currentState.players[currentState.currentPlayerIndex].name !== aiPlayer.name) {
            console.log(`ü§ñ AI ${aiPlayer.name} u≈æ nen√≠ na tahu, nemohu pokraƒçovat`);
            return;
        }
        
        chatSystem.addAiMessage(aiPlayer.name, "Zkus√≠m hodit znovu! üéØ");
        await this.delay(1000);
        await this.gameLogic.rollDice();
        await this.delay(3000);
    }

    /**
     * AI rozhodov√°n√≠ o dal≈°√≠m tahu
     * P≈òESUNUTO Z gameUI.js
     * @param {Object} aiPlayer - AI hr√°ƒç
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     * @returns {Object} Rozhodnut√≠ AI
     */
    makeAiDecision(aiPlayer, state) {
        // Jednoduch√° AI logika - odlo≈æit nejlep≈°√≠ kostky, pak rozhodnout
        const bestDice = this.findBestDiceToSave(state.currentRoll);
        
        if (bestDice.length === 0) {
            // ≈Ω√°dn√© validn√≠ kostky - bude farkle
            return { action: 'wait' }; // Poƒçk√°me, a≈æ se farkle zpracuje automaticky
        }
        
        // Spoƒç√≠t√°me aktu√°ln√≠ body v tahu
        const currentTurnPoints = calculatePoints(state.savedDice || []) + (state.turnScore || 0);
        const newPoints = calculatePoints(bestDice.map(i => state.currentRoll[i]));
        const totalPoints = currentTurnPoints + newPoints;
        
        // D≈ÆLE≈ΩIT√â: Pokud je to prvn√≠ z√°pis a nem√°me dost bod≈Ø, MUS√çME pokraƒçovat
        if (aiPlayer.score === 0 && totalPoints < 300) {
            console.log(`ü§ñ AI ${aiPlayer.name}: Prvn√≠ z√°pis, pot≈ôebuji min 300 bod≈Ø (m√°m ${totalPoints})`);
            return { action: 'save', diceToSave: bestDice, nextAction: 'continue' };
        }
        
        // AI rozhodov√°n√≠ podle z√≠skan√Ωch bod≈Ø a risk/reward
        if (totalPoints >= 300) {
            // M√°me solidn√≠ body
            const riskFactor = this.calculateRiskFactor(state.currentRoll.length, totalPoints);
            
            if (riskFactor > 0.7 || totalPoints >= 600) {
                // Vysok√© riziko nebo dostateƒçn√© body - ukonƒç√≠me tah
                console.log(`ü§ñ AI ${aiPlayer.name}: M√°m ${totalPoints} bod≈Ø, riziko ${riskFactor.toFixed(2)} - ukonƒçuji tah`);
                return { action: 'save', diceToSave: bestDice, nextAction: 'endTurn' };
            } else {
                // St≈ôedn√≠ riziko - odlo≈æ√≠me a pokraƒçujeme
                console.log(`ü§ñ AI ${aiPlayer.name}: M√°m ${totalPoints} bod≈Ø, riziko ${riskFactor.toFixed(2)} - pokraƒçuji`);
                return { action: 'save', diceToSave: bestDice, nextAction: 'continue' };
            }
        } else {
            // M√°lo bod≈Ø - mus√≠me riskovat
            console.log(`ü§ñ AI ${aiPlayer.name}: Pouze ${totalPoints} bod≈Ø - mus√≠m riskovat`);
            return { action: 'save', diceToSave: bestDice, nextAction: 'continue' };
        }
    }

    /**
     * Vypoƒç√≠t√° rizikov√Ω faktor pro AI rozhodov√°n√≠
     * @param {number} remainingDice - Poƒçet zb√Ωvaj√≠c√≠ch kostek
     * @param {number} currentPoints - Aktu√°ln√≠ body
     * @returns {number} Rizikov√Ω faktor 0-1
     */
    calculateRiskFactor(remainingDice, currentPoints) {
        // ƒå√≠m m√©nƒõ kostek, t√≠m vy≈°≈°√≠ riziko
        const diceRisk = (6 - remainingDice) / 6;
        
        // ƒå√≠m v√≠ce bod≈Ø m√°me, t√≠m je ≈°koda o nƒõ p≈ôij√≠t
        const pointsRisk = Math.min(currentPoints / 1000, 1);
        
        return (diceRisk + pointsRisk) / 2;
    }

    /**
     * Najde nejlep≈°√≠ kostky k odlo≈æen√≠
     * P≈òESUNUTO Z gameUI.js
     * @param {Array} dice - Kostky na stole
     * @returns {Array} Indexy nejlep≈°√≠ch kostek
     */
    findBestDiceToSave(dice) {
        if (!dice || dice.length === 0) return [];
        
        const combinations = this.findAllValidCombinations(dice);
        
        if (combinations.length === 0) return [];
        
        // Se≈ôad√≠me kombinace podle hodnoty bod≈Ø na kostku
        combinations.sort((a, b) => {
            const aPointsPerDie = a.points / a.indices.length;
            const bPointsPerDie = b.points / b.indices.length;
            return bPointsPerDie - aPointsPerDie;
        });
        
        // Vr√°t√≠me nejlep≈°√≠ kombinaci
        return combinations[0].indices;
    }

    /**
     * Najde v≈°echny platn√© kombinace v hodu
     * @param {Array} dice - Kostky na stole
     * @returns {Array} Pole kombinac√≠ s body a indexy
     */
    findAllValidCombinations(dice) {
        const combinations = [];
        const used = new Array(dice.length).fill(false);
        
        // Najdeme v≈°echny stejn√© hodnoty a jejich poƒçty
        const counts = {};
        dice.forEach((die, index) => {
            if (!counts[die]) counts[die] = [];
            counts[die].push(index);
        });
        
        // Kontrolujeme trojice a v√≠ce (2,3,4,6)
        for (const value of [2, 3, 4, 6]) {
            if (counts[value] && counts[value].length >= 3) {
                const points = this.calculateMultiplePoints(value, counts[value].length);
                combinations.push({
                    points: points,
                    indices: [...counts[value]],
                    type: `${counts[value].length}x${value}`
                });
            }
        }
        
        // Kontrolujeme trojice a v√≠ce jedniƒçek (speci√°ln√≠ pravidlo)
        if (counts[1] && counts[1].length >= 3) {
            const points = this.calculateMultiplePoints(1, counts[1].length);
            combinations.push({
                points: points,
                indices: [...counts[1]],
                type: `${counts[1].length}x1`
            });
        }
        
        // Jednotliv√© jedniƒçky (100 bod≈Ø)
        if (counts[1]) {
            for (let i = 0; i < Math.min(counts[1].length, 2); i++) { // Max 2 jednotliv√©
                combinations.push({
                    points: 100,
                    indices: [counts[1][i]],
                    type: '1x1'
                });
            }
        }
        
        // Jednotliv√© pƒõtky (50 bod≈Ø)
        if (counts[5]) {
            for (let i = 0; i < Math.min(counts[5].length, 2); i++) { // Max 2 jednotliv√©
                combinations.push({
                    points: 50,
                    indices: [counts[5][i]],
                    type: '1x5'
                });
            }
        }
        
        return combinations.filter(combo => combo.points > 0);
    }

    /**
     * Vypoƒç√≠t√° body pro v√≠ce stejn√Ωch kostek
     * @param {number} value - Hodnota kostky
     * @param {number} count - Poƒçet kostek
     * @returns {number} Body
     */
    calculateMultiplePoints(value, count) {
        if (count < 3) return 0;
        
        const basePoints = value === 1 ? 1000 : value * 100;
        const multipliers = [0, 0, 0, 1, 2, 4, 8]; // index = poƒçet kostek
        
        return basePoints * (multipliers[count] || 8);
    }

    /**
     * Vyvol√° AI reakce na hern√≠ ud√°lost
     * P≈òESUNUTO Z gameUI.js
     * @param {string} eventType - Typ ud√°losti ('roll', 'save', 'endTurn', 'farkle')
     * @param {Object} eventData - Data o ud√°losti
     */
    triggerAiReactions(eventType, eventData = {}) {
        const state = gameState.getState();
        const currentPlayer = state.players[state.currentPlayerIndex];
        
        // POUZE pro lidsk√©ho hr√°ƒçe - AI nekomentuje sv√© vlastn√≠ tahy
        if (!currentPlayer.isHuman) {
            console.log(`ü§ñ AI reakce p≈ôeskoƒçeny - na tahu je AI hr√°ƒç ${currentPlayer.name}`);
            return;
        }
        
        // Z√≠sk√°me AI hr√°ƒçe (v≈°ichni kromƒõ aktu√°ln√≠ho)
        const aiPlayers = state.players.filter(player => !player.isHuman);
        
        // N√°hodnƒõ vybereme 1 AI pro reakci (ne v≈°ichni najednou)
        const reactingAI = aiPlayers
            .sort(() => Math.random() - 0.5)
            .slice(0, 1);
        
        // Reakce s prodlevou pro realistiƒçnost
        reactingAI.forEach((aiPlayer, index) => {
            setTimeout(() => {
                const reaction = this.generateReaction(eventType, eventData, currentPlayer, aiPlayer);
                chatSystem.addAiMessage(aiPlayer.name, reaction);
            }, (index + 1) * 1000);
        });
    }

    /**
     * Generuje reakci AI na ud√°lost
     * @param {string} eventType - Typ ud√°losti
     * @param {Object} eventData - Data ud√°losti
     * @param {Object} currentPlayer - Aktu√°ln√≠ hr√°ƒç
     * @param {Object} aiPlayer - AI hr√°ƒç reaguj√≠c√≠
     * @returns {string} Reakce AI
     */
    generateReaction(eventType, eventData, currentPlayer, aiPlayer) {
        const reactions = {
            roll: [
                `Pƒõkn√Ω hod, ${currentPlayer.name}! üé≤`,
                `Zaj√≠mav√© kostky na stole! ü§î`,
                `Co si z toho vybere≈°? üëÄ`
            ],
            farkle: [
                `Ouch! To bol√≠! üí•`,
                `Farkle! Sm≈Øla ${currentPlayer.name}! üòÖ`,
                `Riziko se nevyplatilo! ü§∑‚Äç‚ôÇÔ∏è`
            ],
            save: [
                `Dobr√° volba! üëç`,
                `Solidn√≠ taktika! üí°`,
                `Zaj√≠mav√© rozhodnut√≠! üéØ`
            ],
            endTurn: [
                `Bezpeƒçn√° hra! ‚úÖ`,
                `Moudr√© ukonƒçen√≠! üß†`,
                `${eventData.points} bod≈Ø - nen√≠ ≈°patn√©! üìä`
            ]
        };
        
        const possibleReactions = reactions[eventType] || [`Zaj√≠mav√Ω tah, ${currentPlayer.name}! üéÆ`];
        return possibleReactions[Math.floor(Math.random() * possibleReactions.length)];
    }

    /**
     * Pomocn√° funkce pro zpo≈ædƒõn√≠
     * @param {number} ms - Milisekundy
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
