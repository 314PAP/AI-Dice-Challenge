/**
 * Real AI Integration Module
 * Pro skuteƒçn√© AI odpovƒõdi m√≠sto p≈ôednastaven√Ωch
 */

export class RealAI {
    constructor() {
        this.apiEndpoint = '/api/ai-response'; // V√°≈° backend endpoint
        this.gameContext = {
            currentScore: 0,
            turnScore: 0,
            gamePhase: 'early', // early, middle, late, final
            lastAction: null
        };
    }

    /**
     * Aktualizuje kontext hry pro AI
     */
    updateGameContext(context) {
        this.gameContext = { ...this.gameContext, ...context };
    }

    /**
     * Vytvo≈ô√≠ prompt pro AI na z√°kladƒõ hern√≠ situace
     */
    createGamePrompt(aiType, situation, data = {}) {
        const personality = this.getPersonalityPrompt(aiType);
        const context = this.getGameContextPrompt();
        const situationPrompt = this.getSituationPrompt(situation, data);

        return `${personality}\n\n${context}\n\n${situationPrompt}\n\nOdpovƒõz kr√°tce (max 50 znak≈Ø) jako ${aiType} v ƒçesk√©m jazyce:`;
    }

    /**
     * Definice osobnost√≠ pro prompty
     */
    getPersonalityPrompt(aiType) {
        const personalities = {
            gemini: 'Jsi Gemini AI - analytick√Ω, faktick√Ω, zamƒõ≈ôen√Ω na data a statistiky. Pou≈æ√≠v√°≈° vƒõdeck√Ω p≈ô√≠stup.',
            chatgpt: 'Jsi ChatGPT - kreativn√≠, p≈ô√°telsk√Ω, pou≈æ√≠v√°≈° emojis a hry na slova. Jsi optimistick√Ω a vtipn√Ω.',
            claude: 'Jsi Claude AI - moudr√Ω, uv√°≈æliv√Ω, filosofick√Ω. Preferuje≈° strategick√© my≈°len√≠ a dlouhodob√© pl√°nov√°n√≠.'
        };
        return personalities[aiType] || '';
    }

    /**
     * Kontext aktu√°ln√≠ hern√≠ situace
     */
    getGameContextPrompt() {
        return `Hern√≠ kontext:
- Moje sk√≥re: ${this.gameContext.currentScore}
- Sk√≥re tohoto tahu: ${this.gameContext.turnScore}
- F√°ze hry: ${this.gameContext.gamePhase}
- Posledn√≠ akce: ${this.gameContext.lastAction || '≈æ√°dn√°'}`;
    }

    /**
     * Specifick√Ω prompt pro hern√≠ situaci
     */
    getSituationPrompt(situation, data) {
        const prompts = {
            hello: 'P≈ôiv√≠tej se do kostiƒçkov√© hry Farkle.',
            goodRoll: `Hodil jsem dob≈ôe: ${data.dice?.join(', ')}. Komentuj m≈Øj √∫spƒõch.`,
            badRoll: `Hodil jsem ≈°patnƒõ: ${data.dice?.join(', ')}. Komentuj ne√∫spƒõch.`,
            scoredPoints: `Z√≠skal jsem ${data.points} bod≈Ø. Komentuj m≈Øj tah.`,
            farkle: 'Dostal jsem farkle (≈æ√°dn√© body). Komentuj to.',
            playerTurn: `Hr√°ƒç ${data.playerName} je na tahu. Komentuj to.`,
            gameWon: `${data.winner} vyhr√°l hru! Komentuj v√Ωsledek.`,
            strategy: `M√°m ${data.dice?.length} kostek k hodu. Poraƒè strategii.`
        };
        return prompts[situation] || 'Komentuj aktu√°ln√≠ hern√≠ situaci.';
    }

    /**
     * Zavol√° skuteƒçn√© AI API
     */
    async callRealAI(aiType, prompt) {
        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    aiType: aiType,
                    prompt: prompt,
                    maxTokens: 50
                })
            });

            if (!response.ok) {
                throw new Error(`AI API error: ${response.status}`);
            }

            const data = await response.json();
            return data.response;
        } catch (error) {
            console.error('Real AI call failed:', error);
            // Fallback na p≈ôednastaven√© odpovƒõdi
            return this.getFallbackResponse(aiType);
        }
    }

    /**
     * Z√°lo≈æn√≠ odpovƒõdi kdy≈æ AI API nefunguje
     */
    getFallbackResponse(aiType) {
        const fallbacks = {
            gemini: 'Analyzuji situaci...',
            chatgpt: 'Zaj√≠mav√©! üé≤',
            claude: 'Zaj√≠mav√Ω v√Ωvoj hry.'
        };
        return fallbacks[aiType] || '...';
    }

    /**
     * Hlavn√≠ metoda pro z√≠sk√°n√≠ AI odpovƒõdi
     */
    async getAIResponse(aiType, situation, data = {}) {
        const prompt = this.createGamePrompt(aiType, situation, data);
        const response = await this.callRealAI(aiType, prompt);
        return response;
    }
}

// Export singleton instance
export const realAI = new RealAI();
