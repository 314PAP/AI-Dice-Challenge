/**
 * üé≤ AI Dice Challenge - Dice Manager Module
 * 
 * Modul pro spr√°vu kostek oddƒõlen√Ω z GameLogic.js  
 * Pou≈æ√≠v√° lodash pro optimalizaci pr√°ce s kostkami
 */

// Lodash utilities (naƒçteno z CDN)
const { filter, map, sum, isEmpty, clone } = _;

import gameState from './gameState.js';
import { calculatePoints, hasScoringDice } from './diceMechanics.js';
import chatSystem from '../ai/chatSystem.js';
import { CHAT_COLORS } from '../utils/colors.js';
import soundSystem from '../utils/soundSystem.js';

/**
 * T≈ô√≠da pro spr√°vu kostek
 */
export class DiceManager {
    constructor(animationManager) {
        this.animationManager = animationManager;
    }

    /**
     * Odlo≈æ√≠ vybran√© kostky - s lodash optimalizac√≠ a validac√≠ prvn√≠ho z√°pisu
     */
    saveDice() {
        const state = gameState.getState();
        
        if (isEmpty(state.selectedDice)) {
            const warningMsg = '‚ö†Ô∏è Vyberte kostky k odlo≈æen√≠!';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.YELLOW);
            return;
        }
        
        // Lodash filter a map pro z√≠sk√°n√≠ hodnot vybran√Ωch kostek
        const selectedDiceValues = map(
            filter(state.currentRoll, (_, index) => state.selectedDice.includes(index)),
            (value) => value
        );
        
        // Spoƒç√≠t√°me body za vybran√© kostky
        const points = calculatePoints(selectedDiceValues);
        
        if (points === 0) {
            const errorMsg = '‚ùå Vybran√© kostky nezisk√°vaj√≠ body!';
            console.error(errorMsg);
            chatSystem.addSystemMessage(errorMsg, CHAT_COLORS.RED);
            return;
        }
        
        // VALIDACE PRVN√çHO Z√ÅPISU
        const currentPlayer = state.players[state.currentPlayerIndex];
        const currentTurnScore = (state.turnScore || 0) + points;
        
        if (currentPlayer.score === 0 && currentTurnScore < 300) {
            const errorMsg = `‚ùå Prvn√≠ z√°pis vy≈æaduje minim√°lnƒõ 300 bod≈Ø! M√°te jen ${currentTurnScore} bod≈Ø.`;
            console.error(errorMsg);
            chatSystem.addSystemMessage(errorMsg, CHAT_COLORS.RED);
            return;
        }
        
        // P≈ôid√°me sk√≥rovac√≠ animaci
        this.animationManager.addScoringAnimation();
        
        // üéµ Zvuk pro ulo≈æen√≠ kostek
        soundSystem.play('saveDice');
        
        // Aktualizujeme stav s ulo≈æen√Ωmi kostkami
        this.updateSavedDice(selectedDiceValues, points);
    }

    /**
     * Aktualizuje ulo≈æen√© kostky - s lodash optimalizac√≠
     * @param {Array} savedDiceValues - Hodnoty kostek k ulo≈æen√≠
     * @param {number} points - Body za kostky
     */
    updateSavedDice(savedDiceValues, points) {
        const state = gameState.getState();
        
        // Lodash clone pro bezpeƒçnou kopii
        const newSavedDice = [...(state.savedDice || []), ...savedDiceValues];
        const newTurnScore = (state.turnScore || 0) + points;
        
        // Filtrujeme zb√Ωvaj√≠c√≠ kostky (nevy bran√©)
        const remainingDice = filter(state.currentRoll, (_, index) => 
            !state.selectedDice.includes(index)
        );
        
        // Aktualizujeme hern√≠ stav
        gameState.updateState({
            savedDice: newSavedDice,
            turnScore: newTurnScore,
            currentRoll: remainingDice,
            selectedDice: []
        });
        
        // Kontrola Hot Dice
        this.checkHotDice(newSavedDice, newTurnScore, remainingDice);
        
        const message = `üíæ Ulo≈æeno ${savedDiceValues.length} kostek za ${points} bod≈Ø`;
        chatSystem.addSystemMessage(message, CHAT_COLORS.BLUE);
    }

    /**
     * Kontrola Hot Dice - v≈°ech 6 kostek ulo≈æeno
     * @param {Array} newSavedDice - Nov√© ulo≈æen√© kostky
     * @param {number} newSavedPoints - Nov√© body
     * @param {Array} remainingDice - Zb√Ωvaj√≠c√≠ kostky
     */
    checkHotDice(newSavedDice, newSavedPoints, remainingDice) {
        if (newSavedDice.length === 6) {
            const hotDiceMsg = 'üî• HOT DICE! V≈°ech 6 kostek ulo≈æeno!';
            chatSystem.addSystemMessage(hotDiceMsg, CHAT_COLORS.ORANGE);
            
            // üéµ Speci√°ln√≠ zvuk pro Hot Dice
            soundSystem.play('hotDice');
            
            // Reset aktu√°ln√≠ho hodu - hr√°ƒç m≈Ø≈æe hodit znovu v≈°emi kostkami
            gameState.updateState({
                currentRoll: [],
                selectedDice: []
            });
        } else if (isEmpty(remainingDice)) {
            // ≈Ω√°dn√© zb√Ωvaj√≠c√≠ kostky, ale m√©nƒõ ne≈æ 6 ulo≈æen√Ωch
        }
    }

    /**
     * Urƒç√≠ kolik kostek hodit - s lodash optimalizac√≠
     */
    getDiceCountToRoll() {
        const state = gameState.getState();
        
        // Pokud jsou zb√Ωvaj√≠c√≠ kostky z p≈ôedchoz√≠ho hodu, h√°z√≠me jimi
        if (!isEmpty(state.currentRoll)) {
            return state.currentRoll.length;
        }
        
        // Jinak h√°z√≠me podle poƒçtu ulo≈æen√Ωch kostek
        const totalSavedDice = (state.savedDice || []).length;
        
        if (totalSavedDice === 0) {
            // Zaƒç√°tek tahu - hod√≠me v≈°emi 6 kostkami
            return 6;
        } else if (totalSavedDice === 6) {
            // Hot dice - v≈°ech 6 kostek bylo odlo≈æeno, h√°z√≠me znovu v≈°emi
            return 6;
        } else {
            // H√°z√≠me zb√Ωvaj√≠c√≠mi kostkami
            return 6 - totalSavedDice;
        }
    }

    /**
     * Kontrola, zda m≈Ø≈æeme hodit kostky
     */
    canRollDice() {
        const state = gameState.getState();
        
        return !state.isRolling && 
               isEmpty(state.selectedDice) && 
               (!state.currentRoll || state.currentRoll.length > 0 || (state.savedDice || []).length < 6);
    }

    /**
     * Z√≠sk√° informace o aktu√°ln√≠m stavu kostek
     */
    getDiceStatus() {
        const state = gameState.getState();
        
        return {
            currentRoll: state.currentRoll || [],
            selectedDice: state.selectedDice || [],
            savedDice: state.savedDice || [],
            turnScore: state.turnScore || 0,
            canRoll: this.canRollDice(),
            diceToRoll: this.getDiceCountToRoll(),
            isRolling: state.isRolling || false
        };
    }

    /**
     * Reset stavu kostek pro nov√Ω tah
     */
    resetDiceForNewTurn() {
        gameState.updateState({
            currentRoll: [],
            selectedDice: [],
            savedDice: [],
            turnScore: 0,
            isRolling: false
        });
    }
}
