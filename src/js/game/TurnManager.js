/**
 * üé≤ AI Dice Challenge - Turn Manager Module
 * 
 * Modul pro spr√°vu tah≈Ø oddƒõlen√Ω z GameLogic.js
 * Pou≈æ√≠v√° lodash pro optimalizaci logiky tah≈Ø
 */

// Lodash utilities (naƒçteno z CDN)
const { cloneDeep, sumBy, maxBy, filter } = _;

import gameState from './gameState.js';
import chatSystem from '../ai/chatSystem.js';
import soundSystem from '../utils/soundSystem.js';
import { CHAT_COLORS } from '../utils/colors.js';
import { AiPlayerController } from '../ai/aiPlayerController.js';

/**
 * T≈ô√≠da pro spr√°vu tah≈Ø hry
 */
export class TurnManager {
    constructor() {
        this.gameLogic = null;
        this.aiController = null;
        this.aiTurnInProgress = false; // Ochrana proti duplicitn√≠m AI tah≈Øm
    }

    /**
     * Nastav√≠ reference na gameLogic pro AI funkƒçnost
     * @param {Object} gameLogic - Instance GameLogic
     */
    setGameLogic(gameLogic) {
        this.gameLogic = gameLogic;
        this.aiController = new AiPlayerController(gameLogic);
    }

    /**
     * Ukonƒç√≠ tah hr√°ƒçe
     * @param {boolean} isFarkle - Zda je tah ukonƒçen FARKLE
     */
    endTurn(isFarkle = false) {
        const state = gameState.getState();
        if (state.gamePhase === 'gameover') return; // Hra skonƒçila

        const result = this.calculateTurnResult(isFarkle);
        this.updatePlayerScore(result.player.name, result.pointsGained);

        // Pokud je tah neplatn√Ω, nepokraƒçujeme v endTurn sekvenci
        if (result.invalidTurn) {
            return; // Hr√°ƒç z≈Øst√°v√° na tahu a m≈Ø≈æe pokraƒçovat
        }

        // Kontrola v√Ωhry pomoc√≠ lodash
        const winner = this.checkVictory(result.player);
        if (winner) {
            this.endGame();
            return;
        }

        // P≈ôejdeme na dal≈°√≠ho hr√°ƒçe
        this.switchToNextPlayer();
    }

    /**
     * Vypoƒç√≠t√° v√Ωsledek tahu - s lodash optimalizac√≠
     * @param {boolean} isFarkle - FARKLE flag
     */
    calculateTurnResult(isFarkle) {
        const state = gameState.getState();
        const currentPlayer = cloneDeep(state.players[state.currentPlayerIndex]);

        if (isFarkle) {
            console.log(`üí• ${currentPlayer.name} FARKLE - ztr√°c√≠ ${state.turnScore || 0} bod≈Ø`);
            return {
                player: currentPlayer,
                pointsGained: 0,
                wasFarkle: true,
                oldScore: currentPlayer.score
            };
        }

        // Norm√°ln√≠ ukonƒçen√≠ tahu
        const pointsGained = state.turnScore || 0;
        const oldScore = currentPlayer.score;

        // VALIDACE PRVN√çHO Z√ÅPISU - POUZE P≈òI UKONƒåEN√ç TAHU!
        if (currentPlayer.score === 0 && pointsGained < 300) {
            const errorMsg = `‚ùå Prvn√≠ z√°pis vy≈æaduje minim√°lnƒõ 300 bod≈Ø! M√°te jen ${pointsGained} bod≈Ø. Pokraƒçujte v h√°zen√≠.`;
            console.error(errorMsg);

            // Import chatSystem dynamicky pro men≈°√≠ z√°vislosti
            import('../ai/chatSystem.js').then(({ default: chatSystem }) => {
                import('../utils/colors.js').then(({ CHAT_COLORS }) => {
                    chatSystem.addSystemMessage(errorMsg, CHAT_COLORS.RED);
                });
            });

            // Vr√°t√≠me "farkle-like" v√Ωsledek - neplatn√Ω tah
            return {
                player: currentPlayer,
                pointsGained: 0,
                wasFarkle: false,
                invalidTurn: true,
                reason: 'Nedostateƒçn√© body pro prvn√≠ z√°pis',
                oldScore
            };
        }

        return {
            player: currentPlayer,
            pointsGained,
            wasFarkle: false,
            oldScore
        };
    }

    /**
     * Aktualizuje sk√≥re hr√°ƒçe
     * @param {Object} result - V√Ωsledek tahu
     */
    updatePlayerScore(playerName, points) {
        const state = gameState.getState();
        const playerIndex = state.players.findIndex(p => p.name === playerName);

        if (playerIndex === -1) {
            console.error(`‚ùå Hr√°ƒç ${playerName} nenalezen`);
            return;
        }

        const player = state.players[playerIndex];
        const oldScore = player.score;
        const newScore = oldScore + points;

        console.log(`üîç updatePlayerScore: ${playerName} mƒõl ${oldScore}, z√≠sk√°v√° ${points}, bude m√≠t ${newScore}`);

        // Aktualizace sk√≥re
        gameState.updatePlayerScore(playerName, points);

        // Syst√©mov√© zpr√°vy a animace
        if (points > 0) {
            console.log(`‚úÖ ${playerName}: +${points} bod≈Ø (${oldScore} ‚Üí ${newScore})`);

            const color = playerName === "Hr√°ƒç" ? CHAT_COLORS.GREEN : CHAT_COLORS.BLUE;
            chatSystem.addMessage(playerName, `Ukonƒçuji tah. Solidn√≠ v√Ωsledek! ‚úÖ`, color);

        } else {
            console.log(`üí• ${playerName}: FARKLE! (${newScore} bod≈Ø)`);
        }

        // Kontrola v√≠tƒõzstv√≠ s aktualizovan√Ωm sk√≥re
        const updatedPlayer = { ...player, score: newScore };
        this.checkVictory(updatedPlayer);
    }

    /**
     * Loguje v√Ωsledek tahu
     */
    logTurnResult(player, state, points, oldScore) {
        const newScore = oldScore + points;
        const message = points > 0
            ? `‚úÖ ${player.name}: +${points} bod≈Ø (${oldScore} ‚Üí ${newScore})`
            : `üí• ${player.name}: FARKLE! (${oldScore} bod≈Ø)`;

        console.log(message);
        chatSystem.addSystemMessage(message, points > 0 ? CHAT_COLORS.GREEN : CHAT_COLORS.RED);
    }

    /**
     * Kontrola v√Ωhry - s lodash optimalizac√≠
     * @param {Object} player - Hr√°ƒç
     */
    checkVictory(player) {
        const state = gameState.getState();
        const hasWon = player.score >= state.targetScore;

        console.log(`üîç checkVictory: ${player.name} m√° ${player.score} bod≈Ø, c√≠l ${state.targetScore}, hasWon: ${hasWon}, finalRound: ${state.finalRound}`);

        if (hasWon && !state.finalRound) {
            console.log(`üèÜ ${player.name} dos√°hl ${state.targetScore} bod≈Ø! Zaƒç√≠n√° fin√°ln√≠ kolo.`);

            gameState.updateState({
                finalRound: true,
                finalRoundLeader: player.name,
                finalRoundStartPlayerIndex: state.currentPlayerIndex
            });

            const message = `üèÜ ${player.name} dos√°hl ${state.targetScore} bod≈Ø! Fin√°ln√≠ kolo zaƒç√≠n√°!`;
            chatSystem.addSystemMessage(message, CHAT_COLORS.YELLOW);

            // üéµ Zvuk pro dosa≈æen√≠ c√≠le
            soundSystem.play('victory');

            // Neukonƒçujeme hru zde - ƒçek√°me na dokonƒçen√≠ fin√°ln√≠ho kola
            return false;
        }

        // Pokud u≈æ je fin√°ln√≠ kolo a nƒõkdo dos√°hne vy≈°≈°√≠ho sk√≥re, hra pokraƒçuje
        return false;
    }

    /**
     * Kontrola dokonƒçen√≠ fin√°ln√≠ho kola
     */
    checkFinalRoundCompletion() {
        const state = gameState.getState();
        if (!state.finalRound) return false;

        // Fin√°ln√≠ kolo konƒç√≠, kdy≈æ se dostaneme zpƒõt k hr√°ƒçi, kter√Ω ho zaƒçal
        return state.currentPlayerIndex === state.finalRoundStartPlayerIndex;
    }

    /**
     * Ukonƒç√≠ hru a urƒç√≠ v√≠tƒõze - s lodash maxBy
     */
    endGame() {
        const state = gameState.getState();

        // Lodash maxBy pro nalezen√≠ v√≠tƒõze
        const winner = maxBy(state.players, 'score');

        console.log(`üèÜ Hra skonƒçila! V√≠tƒõz: ${winner.name} s ${winner.score} body`);

        // Ulo≈æ√≠me v√≠tƒõze do s√≠nƒõ slavy
        import('../utils/hallOfFame.js').then(({ addScoreToHallOfFame }) => {
            addScoreToHallOfFame(winner.name, winner.score);
        }).catch(error => {
            console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ do s√≠nƒõ slavy:', error);
        });

        const message = `üèÜ V√≠tƒõz: ${winner.name} s ${winner.score} body!`;
        chatSystem.addSystemMessage(message, CHAT_COLORS.GOLD);

        // üéµ Z√°vƒõreƒçn√Ω zvuk
        soundSystem.play('gameEnd');

        gameState.updateState({ gamePhase: 'gameover' });
    }

    /**
     * P≈ôepne na dal≈°√≠ho hr√°ƒçe
     */
    switchToNextPlayer() {
        const state = gameState.getState();
        const nextPlayerIndex = (state.currentPlayerIndex + 1) % state.players.length;

        // Reset hasFarkle flag pro v≈°echny hr√°ƒçe
        const resetPlayers = state.players.map(player => ({
            ...player,
            hasFarkle: false
        }));

        gameState.updateState({
            currentPlayerIndex: nextPlayerIndex,
            currentRoll: [],
            selectedDice: [],
            savedDice: [],
            turnScore: 0,
            players: resetPlayers,
            isFarkleProcessing: false
        });

        const nextPlayer = resetPlayers[nextPlayerIndex];
        console.log(`üîÑ Dal≈°√≠ hr√°ƒç: ${nextPlayer.name}`);

        // Kontrola fin√°ln√≠ho kola - pokud jsme zpƒõt u hr√°ƒçe, kter√Ω ho zaƒçal
        console.log(`üîç switchToNextPlayer: finalRound: ${state.finalRound}, nextPlayerIndex: ${nextPlayerIndex}, finalRoundStartPlayerIndex: ${state.finalRoundStartPlayerIndex}`);

        if (state.finalRound && nextPlayerIndex === state.finalRoundStartPlayerIndex) {
            console.log(`üèÅ Fin√°ln√≠ kolo dokonƒçeno - urƒçujeme v√≠tƒõze`);
            this.endGame();
            return;
        }

        // Pokud je dal≈°√≠ hr√°ƒç AI, automaticky zaƒçne hr√°t
        if (!nextPlayer.isHuman) {
            console.log(`ü§ñ ${nextPlayer.name} zaƒç√≠n√° AI tah`);

            // AI timeout bez flag ochrany - ka≈æd√Ω AI m√° vlastn√≠ timeout
            setTimeout(async () => {
                try {
                    if (this.aiController) {
                        await this.aiController.playAiTurn(nextPlayer);
                    } else {
                        console.error('‚ùå AI Controller nen√≠ inicializov√°n!');
                    }
                } catch (error) {
                    console.error('‚ùå Chyba v AI tahu:', error);
                }
            }, 1000);
        }
    }

    /**
     * Z√≠sk√° aktu√°ln√≠ data tahu
     */
    getCurrentTurnData() {
        const state = gameState.getState();
        return {
            player: state.players[state.currentPlayerIndex],
            turnScore: state.turnScore || 0,
            savedDice: state.savedDice || [],
            currentRoll: state.currentRoll || [],
            canRoll: !state.isRolling && (!state.selectedDice || state.selectedDice.length === 0)
        };
    }
}
