/**
 * üåü AI Dice Challenge - Dice Glow Manager
 * 
 * Modul pro spr√°vu neon glow efekt≈Ø kostek
 * Umo≈æ≈àuje p≈ôep√≠n√°n√≠ mezi custom keyframes a library-based efekty
 */

/**
 * T≈ô√≠da pro spr√°vu glow efekt≈Ø kostek
 */
export class DiceGlowManager {
    constructor() {
        this.glowMode = 'custom'; // 'custom' nebo 'library'
        this.init();
    }

    /**
     * Inicializace glow manageru
     */
    init() {
        // ≈Ω√°dn√© toggle tlaƒç√≠tko - pouze jednoduch√© glow efekty
        console.log('üåü DiceGlowManager inicializov√°n bez UI prvk≈Ø');
    }

    /**
     * Aplikuje speci√°ln√≠ glow efekt na kostku
     * @param {HTMLElement} diceElement - Element kostky
     * @param {string} effectType - Typ efektu ('soft', 'pulse', 'shimmer', 'neon')
     */
    applySpecialGlow(diceElement, effectType = 'soft') {
        if (!diceElement) return;

        // Pouze custom keyframes - ≈æ√°dn√© library t≈ô√≠dy
        console.log(`üåü Aplikuji glow efekt: ${effectType}`);
    }

    /**
     * Aplikuje glow na nov√© kostky
     * @param {HTMLElement[]} newDiceElements - Nov√© kostky
     */
    applyNewDiceGlow(newDiceElements) {
        if (!Array.isArray(newDiceElements)) return;

        newDiceElements.forEach(dice => {
            this.applySpecialGlow(dice, 'shimmer');

            // Po 2 sekund√°ch p≈ôejdeme na norm√°ln√≠ glow
            setTimeout(() => {
                this.applySpecialGlow(dice, 'soft');
            }, 2000);
        });
    }

    /**
     * Aplikuje glow na vybran√© kostky
     * @param {HTMLElement[]} selectedDiceElements - Vybran√© kostky
     */
    applySelectedDiceGlow(selectedDiceElements) {
        if (!Array.isArray(selectedDiceElements)) return;

        selectedDiceElements.forEach(dice => {
            this.applySpecialGlow(dice, 'neon');
        });
    }

    /**
     * Aplikuje glow na kostky p≈ôi hoveru
     * @param {HTMLElement} diceElement - Element kostky
     */
    applyHoverGlow(diceElement) {
        if (!diceElement) return;

        // Library glow se ≈ôe≈°√≠ p≈ôes CSS t≈ô√≠dy automaticky
        if (this.glowMode === 'custom') {
            // Custom hover se ≈ôe≈°√≠ p≈ôes CSS automaticky
        }
    }

    /**
     * Resetuje v≈°echny glow efekty
     */
    resetAllGlow() {
        const diceElements = document.querySelectorAll('.dice');
        const glowClasses = ['glow-soft', 'glow-pulse', 'glow-shimmer', 'glow-neon',
            'glow-variant-1', 'glow-hover', 'glow-variant'];

        diceElements.forEach(dice => {
            dice.classList.remove(...glowClasses);
        });
    }

    /**
     * Z√≠sk√° aktu√°ln√≠ glow re≈æim
     * @returns {string} Aktu√°ln√≠ re≈æim ('custom' nebo 'library')
     */
    getCurrentMode() {
        return this.glowMode;
    }
}

// Export singleton instance
export default new DiceGlowManager();
