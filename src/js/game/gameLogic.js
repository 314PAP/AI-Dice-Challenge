/**
 * Game Logic - Hlavn√≠ hern√≠ logika a mechanics
 * 
 * OBSAH MODULU:
 * - Logika h√°zen√≠ kostkami s animacemi
 * - Odlo≈æen√≠ kostek a validace
 * - Ukonƒçov√°n√≠ tah≈Ø a sk√≥rov√°n√≠
 * - Farkle detekce a zpracov√°n√≠
 * - Hot dice mechanika
 * - Kontrola v√≠tƒõzstv√≠
 * 
 * FUNKCE P≈òESUNUT√â Z gameUI.js:
 * - rollDice() - h√°zen√≠ s animacemi
 * - saveDice() - odlo≈æen√≠ a validace 
 * - endTurn() - ukonƒçen√≠ tahu
 * - pokraƒçov√°n√≠ v tahu logika
 */

import { rollDice as diceRoll, calculatePoints, hasScoringDice, isValidFarkleCombination } from './diceMechanics.js';
import gameState from './gameState.js';
import chatSystem from '../ai/chatSystem.js';
import { CHAT_COLORS } from '../utils/colors.js';

export class GameLogic {
    constructor(gameRenderer) {
        this.gameRenderer = gameRenderer;
    }

    /**
     * Hod√≠ kostky - s dynamickou animac√≠ zmƒõny ƒç√≠sel
     * P≈òESUNUTO Z gameUI.js
     */
    async rollDice() {
        console.log('üé≤ GameLogic: H√°zen√≠ kostkami...');
        
        const state = gameState.getState();
        
        // Urƒç√≠me kolik kostek hodit
        let diceCount;
        
        // Pokud jsou zb√Ωvaj√≠c√≠ kostky z p≈ôedchoz√≠ho hodu, h√°z√≠me jimi
        if (state.currentRoll && state.currentRoll.length > 0) {
            diceCount = state.currentRoll.length;
            console.log(`üéØ H√°z√≠m se zb√Ωvaj√≠c√≠mi ${diceCount} kostkami`);
        } else {
            // Jinak h√°z√≠me nov√Ωmi kostkami podle toho, kolik jich zb√Ωv√°
            const totalSavedDice = (state.savedDice || []).length;
            if (totalSavedDice === 0) {
                // Zaƒç√°tek tahu - hod√≠me v≈°emi 6 kostkami
                diceCount = 6;
            } else {
                // Hot dice - v≈°ech 6 kostek bylo odlo≈æeno, h√°z√≠me znovu v≈°emi
                diceCount = 6;
            }
            console.log(`üéØ H√°z√≠m ${diceCount} nov√Ωmi kostkami`);
        }

        // Uk√°≈æeme animaci h√°zen√≠ch kostek P≈òED v√Ωsledkem
        gameState.updateState({
            currentRoll: Array(diceCount).fill(0), // Doƒçasnƒõ pr√°zdn√© kostky
            selectedDice: [],
            isRolling: true // Flag pro animaci
        });
        
        // Spust√≠me animaci h√°zen√≠
        await this.playRollingAnimation(diceCount);
    }

    /**
     * Animace h√°zen√≠ kostek
     * @param {number} diceCount - Poƒçet kostek
     */
    async playRollingAnimation(diceCount) {
        return new Promise((resolve) => {
            let animationCounter = 0;
            const animationInterval = setInterval(() => {
                animationCounter++;
                const randomDice = Array(diceCount).fill(0).map(() => Math.floor(Math.random() * 6) + 1);
                
                // Aktualizujeme kostky s n√°hodn√Ωmi ƒç√≠sly pro animaci
                gameState.updateState({
                    currentRoll: randomDice,
                    isRolling: true
                });
                
                // Po 10 iterac√≠ch (2 sekundy) ukonƒç√≠me animaci
                if (animationCounter >= 10) {
                    clearInterval(animationInterval);
                    
                    // Po animaci uk√°≈æeme fin√°ln√≠ v√Ωsledek
                    setTimeout(() => {
                        this.finishRoll(diceCount);
                        resolve();
                    }, 100);
                }
            }, 200); // Ka≈æd√Ωch 200ms se zmƒõn√≠ ƒç√≠sla
        });
    }

    /**
     * Dokonƒç√≠ hod kostkami
     * @param {number} diceCount - Poƒçet kostek
     */
    finishRoll(diceCount) {
        // Vyu≈æit√≠ importovan√© funkce pro fin√°ln√≠ hod
        const dice = diceRoll(diceCount);
        
        // Spoƒç√≠t√°me body z tohoto hodu
        const points = calculatePoints(dice);
        
        // Aktualizuje hern√≠ stav s v√Ωsledkem
        gameState.updateState({
            currentRoll: dice,
            selectedDice: [],
            isRolling: false
        });
        
        console.log(`üéØ Hozeno: [${dice.join(', ')}] = ${points} bod≈Ø`);
        chatSystem.addSystemMessage(`üéØ [${dice.join(', ')}] = ${points} bod≈Ø`);
        
        // Zkontrolujeme FARKLE - kdy≈æ hod neobsahuje ≈æ√°dn√© boduj√≠c√≠ kostky
        if (!hasScoringDice(dice)) {
            this.handleFarkle(dice);
        } else {
            // ODSTRANƒöNO: Dlouh√° zpr√°va o v√Ωbƒõru kostek - zbyteƒçn√°
            console.log(`‚úÖ Kostky na v√Ωbƒõr dostupn√©`);
        }
        
        // P≈ôid√°me spawn animaci
        this.addSpawnAnimation();
    }

    /**
     * Zpracuje FARKLE situaci
     * @param {Array} dice - Kostky
     */
    handleFarkle(dice) {
        // OCHRANA PROTI DUPLICITN√çM VOL√ÅN√çM
        const currentState = gameState.getState();
        if (currentState.isFarkleProcessing) {
            console.log('‚ö†Ô∏è Farkle u≈æ se zpracov√°v√°, ignoruji duplicitn√≠ vol√°n√≠');
            return;
        }

        // Oznaƒç√≠me, ≈æe zpracov√°v√°me farkle
        gameState.updateState({ isFarkleProcessing: true });

        const farkleMsg = 'üí• FARKLE!';
        console.warn(farkleMsg);
        chatSystem.addSystemMessage(farkleMsg, CHAT_COLORS.RED);
        
        // P≈ôid√°me farkle animaci ke kostk√°m
        setTimeout(() => {
            const diceElements = document.querySelectorAll('.dice:not(.saved)');
            diceElements.forEach(el => el.classList.add('dice-farkle'));
            
            setTimeout(() => {
                diceElements.forEach(el => el.classList.remove('dice-farkle'));
            }, 1200);
        }, 200);
        
        // Automaticky ukonƒç√≠me tah s farkle
        setTimeout(() => {
            this.endTurn(true);
        }, 1500);
    }

    /**
     * P≈ôid√° spawn animaci ke kostk√°m
     */
    addSpawnAnimation() {
        setTimeout(() => {
            const diceElements = document.querySelectorAll('.dice:not(.saved)');
            diceElements.forEach(el => {
                el.classList.add('dice-new');
            });
            
            // Odstran√≠me t≈ô√≠du po animaci
            setTimeout(() => {
                diceElements.forEach(el => el.classList.remove('dice-new'));
            }, 800);
        }, 50);
    }

    /**
     * Odlo≈æ√≠ vybran√© kostky - p≈ôesune je z aktu√°ln√≠ho hodu do odlo≈æen√Ωch
     * P≈òESUNUTO Z gameUI.js
     */
    saveDice() {
        console.log('üíæ SAVE DEBUG - saveDice() zavol√°na, call count:', (this.saveCount = (this.saveCount || 0) + 1));
        const state = gameState.getState();
        
        if (!state.selectedDice || state.selectedDice.length === 0) {
            const warningMsg = '‚ö†Ô∏è Vyberte kostky k odlo≈æen√≠!';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        if (!state.currentRoll || state.currentRoll.length === 0) {
            const warningMsg = '‚ö†Ô∏è Nejsou ≈æ√°dn√© kostky k odlo≈æen√≠';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        // Z√≠sk√°me hodnoty vybran√Ωch kostek
        const savedDiceValues = state.selectedDice.map(index => state.currentRoll[index]);
        
        // VALIDACE: Zkontroluj, zda jsou kostky podle pravidel Farkle
        if (!isValidFarkleCombination(savedDiceValues)) {
            const warningMsg = '‚ö†Ô∏è NEPLATN√Å KOMBINACE! M≈Ø≈æete odlo≈æit pouze: jedniƒçky, pƒõtky nebo trojice a v√≠ce stejn√Ωch ƒç√≠sel (2,3,4,6).';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        // Spoƒç√≠t√°me body z vybran√Ωch kostek
        const points = calculatePoints(savedDiceValues);
        
        // P≈ôid√°me animaci sk√≥rov√°n√≠
        this.addScoringAnimation();
        
        // Aktualizujeme stav
        this.updateSavedDice(savedDiceValues, points);
    }

    /**
     * P≈ôid√° animaci sk√≥rov√°n√≠ k vybran√Ωm kostk√°m
     */
    addScoringAnimation() {
        const selectedElements = document.querySelectorAll('.dice.selected');
        selectedElements.forEach(el => {
            el.classList.add('dice-scoring');
            setTimeout(() => {
                el.classList.remove('dice-scoring');
            }, 1500);
        });
    }

    /**
     * Aktualizuje stav odlo≈æen√Ωch kostek
     * @param {Array} savedDiceValues - Hodnoty odlo≈æen√Ωch kostek
     * @param {number} points - Body z odlo≈æen√Ωch kostek
     */
    updateSavedDice(savedDiceValues, points) {
        const state = gameState.getState();
        
        // Aktualizujeme stav - p≈ôid√°me odlo≈æen√© kostky a odstran√≠me vybran√© z currentRoll
        const newSavedDice = [...(state.savedDice || []), ...savedDiceValues];
        const newSavedPoints = calculatePoints(newSavedDice);
        
        // Vytvo≈ô√≠me nov√Ω currentRoll bez vybran√Ωch kostek
        const remainingDice = state.currentRoll.filter((die, index) => !state.selectedDice.includes(index));
        
        console.log(`üíæ Odkl√°d√°m kostky: [${savedDiceValues.join(', ')}] = ${points} bod≈Ø`);
        console.log(`üìä Celkem odlo≈æeno: [${newSavedDice.join(', ')}] = ${newSavedPoints} bod≈Ø`);
        console.log(`üé≤ Zb√Ωvaj√≠c√≠ kostky k hodu: ${remainingDice.length}`);
        
        // ZKR√ÅCENO: Jen podstatn√© info, ne duplik√°ty
        chatSystem.addSystemMessage(`ÔøΩ +${points} = ${newSavedPoints} bod≈Ø`, CHAT_COLORS.BLUE);
        
        // Kontrola hot dice
        this.checkHotDice(newSavedDice, newSavedPoints, remainingDice);
    }

    /**
     * Kontroluje a zpracov√°v√° Hot Dice situaci
     * @param {Array} newSavedDice - V≈°echny odlo≈æen√© kostky
     * @param {number} newSavedPoints - Body z odlo≈æen√Ωch kostek
     * @param {Array} remainingDice - Zb√Ωvaj√≠c√≠ kostky
     */
    checkHotDice(newSavedDice, newSavedPoints, remainingDice) {
        const state = gameState.getState();
        
        if (newSavedDice.length >= 6 && remainingDice.length === 0) {
            // √öSPƒöCH! V≈°ech 6 kostek odlo≈æeno - HOT DICE!
            chatSystem.addSystemMessage(`üéØ HOT DICE! +${newSavedPoints}`, CHAT_COLORS.GREEN);
            
            // HOT DICE - akumulujeme body a resetujeme kostky pro nov√Ω hod
            gameState.updateState({ 
                turnScore: (state.turnScore || 0) + newSavedPoints, // Akumulujeme body
                savedDice: [], // VYMA≈ΩEME odlo≈æen√© kostky - hot dice reset
                selectedDice: [],
                currentRoll: [] // Pr√°zdn√© pro umo≈ænƒõn√≠ nov√©ho hodu v≈°emi kostkami
            });
        } else if (remainingDice.length > 0) {
            // ODSTRANƒöNO: Zpr√°va o zb√Ωvaj√≠c√≠ch kostk√°ch - zbyteƒçn√°
            
            console.log(`üîÑ SAVE DEBUG - Aktualizuji stav: savedDice: [${newSavedDice.join(',')}], selectedDice: [], currentRoll: [${remainingDice.join(',')}]`);
            
            gameState.updateState({ 
                savedDice: newSavedDice,
                selectedDice: [],
                currentRoll: remainingDice
            });
        } else {
            chatSystem.addSystemMessage(`üéØ V≈°echny kostky odlo≈æeny! M≈Ø≈æete hodit v≈°ech 6 kostek znovu.`, CHAT_COLORS.GREEN);
            
            gameState.updateState({ 
                savedDice: newSavedDice,
                selectedDice: [],
                currentRoll: [] // Pr√°zdn√© pole pro nov√Ω hod
            });
        }
    }

    /**
     * Ukonƒç√≠ aktu√°ln√≠ tah
     * P≈òESUNUTO Z gameUI.js
     * @param {boolean} isFarkle - Pokud true, jedn√° se o farkle
     */
    endTurn(isFarkle = false) {
        const state = gameState.getState();
        
        // Kontrola, zda hr√°ƒç m√° body k ukonƒçen√≠ tahu (kromƒõ farkle)
        const hasSavedDice = state.savedDice && state.savedDice.length > 0;
        const hasTurnScore = state.turnScore && state.turnScore > 0;
        
        if (!isFarkle && !hasSavedDice && !hasTurnScore) {
            const warningMsg = '‚ö†Ô∏è POZOR: Nem≈Ø≈æete ukonƒçit tah bez odlo≈æen√Ωch kostek nebo bod≈Ø! Nejd≈ô√≠ve odlo≈æte boduj√≠c√≠ kostky.';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        console.log(isFarkle ? 'üí• Ukonƒçuji tah s FARKLE...' : '‚è≠Ô∏è Ukonƒçuji tah...');
        
        const result = this.calculateTurnResult(isFarkle);
        this.updatePlayerScore(result);
        this.checkVictory(result.player);
        this.switchToNextPlayer();
    }

    /**
     * Vypoƒç√≠t√° v√Ωsledek tahu
     * @param {boolean} isFarkle - Zda je to farkle
     * @returns {Object} V√Ωsledek tahu
     */
    calculateTurnResult(isFarkle) {
        const state = gameState.getState();
        const players = [...state.players];
        const currentPlayer = players[state.currentPlayerIndex];
        
        let points = 0;
        const oldScore = currentPlayer.score;
        
        if (!isFarkle) {
            // Norm√°ln√≠ ukonƒçen√≠ tahu - p≈ôid√°me body z odlo≈æen√Ωch kostek PLUS akumulovan√© body z hot dice
            const savedDicePoints = calculatePoints(state.savedDice || []);
            const turnScorePoints = state.turnScore || 0;
            points = savedDicePoints + turnScorePoints;
            
            // KONTROLA MINIM√ÅLN√çHO SK√ìRE: Prvn√≠ z√°pis mus√≠ b√Ωt min. 300 bod≈Ø
            if (currentPlayer.score === 0 && points < 300) {
                const warningMsg = `‚ö†Ô∏è POZOR: Prvn√≠ z√°pis mus√≠ b√Ωt minim√°lnƒõ 300 bod≈Ø! M√°te jen ${points} bod≈Ø. Pokraƒçujte v tahu nebo riskujte!`;
                console.warn(warningMsg);
                chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
                return null; // Neukonƒçuj tah
            }
            
            currentPlayer.score += points;
            this.logTurnResult(currentPlayer, state, points, oldScore);
        } else {
            // FARKLE - ≈æ√°dn√© body se nep≈ôidaj√≠
            console.log(`üí• FARKLE pro hr√°ƒçe ${currentPlayer.name} - ≈æ√°dn√© body!`);
            // ODSTRANƒöNO: Zbyteƒçn√° duplikace farkle zpr√°vy
        }
        
        return { player: currentPlayer, points, oldScore, players, isFarkle };
    }

    /**
     * Zaloguje v√Ωsledek tahu
     */
    logTurnResult(currentPlayer, state, points, oldScore) {
        const savedDicePoints = calculatePoints(state.savedDice || []);
        const turnScorePoints = state.turnScore || 0;
        
        console.log(`üìä Hr√°ƒç ${currentPlayer.name}:`);
        console.log(`   ‚Ä¢ Odlo≈æen√© kostky: [${state.savedDice ? state.savedDice.join(', ') : '≈æ√°dn√©'}] = ${savedDicePoints} bod≈Ø`);
        console.log(`   ‚Ä¢ Hot dice body: ${turnScorePoints} bod≈Ø`);
        console.log(`   ‚Ä¢ Celkem z√≠skan√© body: ${points}`);
        console.log(`   ‚Ä¢ Sk√≥re: ${oldScore} ‚Üí ${currentPlayer.score}`);
        
        if (turnScorePoints > 0 && savedDicePoints > 0) {
            chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: +${points} bod≈Ø`);
        } else if (turnScorePoints > 0) {
            chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: +${points} bod≈Ø`);
        } else {
            chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: +${points} bod≈Ø`);
        }
        chatSystem.addSystemMessage(`üéØ ${currentPlayer.name}: ${currentPlayer.score}`, CHAT_COLORS.BLUE);
    }

    /**
     * Aktualizuje sk√≥re hr√°ƒçe
     */
    updatePlayerScore(result) {
        if (!result) return;
        
        gameState.updateState({
            players: result.players,
            currentRoll: [],
            selectedDice: [],
            savedDice: [],
            turnScore: 0 // Reset turn score pro nov√©ho hr√°ƒçe
        });
    }

    /**
     * Kontroluje v√≠tƒõzstv√≠ a spravuje fin√°ln√≠ kolo
     */
    checkVictory(player) {
        const state = gameState.getState();
        
        if (player.score >= state.targetScore) {
            if (!state.finalRound) {
                // Prvn√≠ hr√°ƒç dos√°hl c√≠lov√©ho sk√≥re - zaƒç√≠n√° fin√°ln√≠ kolo
                const finalRoundMsg = `üö® FIN√ÅLN√ç KOLO! ${player.name} dos√°hl ${state.targetScore} bod≈Ø. Ostatn√≠ hr√°ƒçi maj√≠ je≈°tƒõ jeden tah!`;
                console.log(finalRoundMsg);
                chatSystem.addSystemMessage(finalRoundMsg, CHAT_COLORS.ORANGE);
                
                gameState.updateState({ 
                    finalRound: true,
                    finalRoundLeader: player.name,
                    finalRoundStartPlayerIndex: state.currentPlayerIndex
                });
            } else {
                // Fin√°ln√≠ kolo u≈æ bƒõ≈æ√≠ - zkontroluj jestli v≈°ichni dostali ≈°anci
                this.checkFinalRoundCompletion();
            }
        } else if (state.finalRound) {
            // Fin√°ln√≠ kolo bƒõ≈æ√≠, zkontroluj dokonƒçen√≠
            this.checkFinalRoundCompletion();
        }
    }

    /**
     * Kontroluje, zda je fin√°ln√≠ kolo dokonƒçeno
     */
    checkFinalRoundCompletion() {
        const state = gameState.getState();
        
        if (!state.finalRound) return;
        
        // Zkontroluj, zda jsme dokonƒçili cel√© kolo (v≈°ichni hr√°ƒçi mƒõli ≈°anci)
        const nextPlayerIndex = (state.currentPlayerIndex + 1) % state.players.length;
        
        if (nextPlayerIndex === state.finalRoundStartPlayerIndex) {
            // Fin√°ln√≠ kolo dokonƒçeno - najdi v√≠tƒõze
            this.endGame();
        }
    }

    /**
     * Ukonƒç√≠ hru a vyhl√°s√≠ v√≠tƒõze
     */
    endGame() {
        const state = gameState.getState();
        
        // Najdi hr√°ƒçe s nejvy≈°≈°√≠m sk√≥re
        const winner = state.players.reduce((prev, current) => 
            (prev.score > current.score) ? prev : current);
        
        const victoryMsg = `üèÜ KONEC HRY! ${winner.name} vyhr√°v√° s ${winner.score} body!`;
        console.log(victoryMsg);
        chatSystem.addSystemMessage(victoryMsg, CHAT_COLORS.GREEN);
        
        // Zobraz fin√°ln√≠ sk√≥re v≈°ech hr√°ƒç≈Ø
        const scoreMsg = `üìä Fin√°ln√≠ sk√≥re: ${state.players.map(p => `${p.name}: ${p.score}`).join(', ')}`;
        chatSystem.addSystemMessage(scoreMsg, CHAT_COLORS.BLUE);
        
        gameState.updateState({ gamePhase: 'gameover' });
    }

    /**
     * P≈ôepne na dal≈°√≠ho hr√°ƒçe
     */
    switchToNextPlayer() {
        const state = gameState.getState();
        if (state.gamePhase === 'gameover') return; // Hra skonƒçila
        
        const nextPlayerIndex = (state.currentPlayerIndex + 1) % state.players.length;
        const nextPlayer = state.players[nextPlayerIndex];
        
        console.log(`üë§ Dal≈°√≠ hr√°ƒç: ${nextPlayer.name}`);
        
        if (state.finalRound) {
            chatSystem.addSystemMessage(`üë§ ${nextPlayer.name}`, CHAT_COLORS.ORANGE);
        } else {
            // ODSTRANƒöNO: Syst√©mov√° zpr√°va o dal≈°√≠m hr√°ƒçi - zbyteƒçn√°, vid√≠ se v UI
        }
        
        gameState.updateState({
            currentPlayerIndex: nextPlayerIndex,
            // Reset stav≈Ø pro nov√Ω tah
            currentRoll: [],
            selectedDice: [],
            savedDice: [],
            turnScore: 0,
            isFarkleProcessing: false,
            isRolling: false
        });
        
        // Po p≈ôepnut√≠ hr√°ƒçe zkontroluj fin√°ln√≠ kolo
        if (state.finalRound) {
            this.checkFinalRoundCompletion();
        }
    }
}
