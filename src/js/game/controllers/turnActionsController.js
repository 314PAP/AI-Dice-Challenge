/**
 * Turn Actions Controller
 * Handles player actions during turns: rolling dice, selecting dice, banking dice
 */

import { gameState, nextPlayer, getCurrentPlayer } from '../gameState.js';
import { rollDice, calculateScore, hasScoringDice, validateDiceSelection } from '../diceLogic.js';
import { updateGameDisplay } from '../../ui/gameUI.js';
import { playerTurn } from './gameFlowController.js';

/**
 * Hod kostkami pro lidsk√©ho hr√°ƒçe
 */
export function rollDiceForPlayer() {
    if (gameState.rollsLeft <= 0 || gameState.currentPlayer !== 0) return;
    
    const diceToRoll = 6 - gameState.bankedDice.length;
    gameState.dice = rollDice(diceToRoll);
    gameState.rollsLeft--;
    gameState.mustBankDice = false; // Reset flag
    
    // Vymazat p≈ôedchoz√≠ farkle znaƒçky
    gameState.dice.forEach(die => delete die.farkle);
    
    const diceValues = gameState.dice.map(d => d.value);
    const rollScore = calculateScore(diceValues);
    
    // Debug log
    console.log('üé≤ Hod kostek:', diceValues, 'Sk√≥re:', rollScore);
    
    window.addChatMessage('system', `Hod: ${diceValues.join(', ')} - Mo≈æn√© body z hodu: ${rollScore}`);
    
    if (rollScore === 0) {
        // Farkle - ≈æ√°dn√© boduj√≠c√≠ kostky
        console.log('‚ùå FARKLE detekov√°n! Ukonƒçuji tah...');
        window.addChatMessage('system', `‚ùå FARKLE! ≈Ω√°dn√© boduj√≠c√≠ kostky! Tah konƒç√≠ s 0 body.`);
        
        // Oznaƒçit kostky jako farkle pro vizu√°ln√≠ efekt
        gameState.dice.forEach(die => die.farkle = true);
        
        // Aktualizovat UI pro zobrazen√≠ farkle
        const humanStatus = document.getElementById('humanPlayerStatus');
        const aiStatus = document.getElementById('aiPlayerStatus');
        
        if (gameState.currentPlayer === 0) {
            if (humanStatus) {
                humanStatus.textContent = 'FARKLE! Tah konƒç√≠ s 0 body!';
                humanStatus.style.color = 'var(--neon-orange)';
            }
        } else {
            if (aiStatus) {
                aiStatus.textContent = 'FARKLE! Tah konƒç√≠ s 0 body!';
                aiStatus.style.color = 'var(--neon-orange)';
            }
        }
        
        // AI reakce na farkle (pouze pokud je to lidsk√Ω hr√°ƒç)
        if (gameState.currentPlayer === 0 && window.triggerFarkleHeckling) {
            window.triggerFarkleHeckling('Vy');
        }
        
        // Zpo≈ædƒõn√≠ p≈ôed automatick√Ωm ukonƒçen√≠m tahu
        setTimeout(() => {
            console.log('üîÑ Automaticky ukonƒçuji tah po farkle...');
            gameState.currentTurnScore = 0; // Zru≈°it v≈°echny body z tohoto tahu
            nextPlayer();
            playerTurn();
        }, 2000);
        
        updateGameDisplay();
        return;
    } else {
        // M√°me boduj√≠c√≠ kostky - mus√≠me odlo≈æit alespo≈à nƒõco p≈ôed dal≈°√≠m hodem
        gameState.mustBankDice = true;
        window.addChatMessage('system', `üéØ M√°te boduj√≠c√≠ kostky! Mus√≠te odlo≈æit alespo≈à jednu boduj√≠c√≠ kombinaci p≈ôed dal≈°√≠m hodem.`);
    }
    
    updateGameDisplay();
}

/**
 * Vybere/odznaƒç√≠ kostku
 */
export function selectDie(index) {
    if (gameState.currentPlayer !== 0) return;
    
    gameState.dice[index].selected = !gameState.dice[index].selected;
    updateGameDisplay();
}

/**
 * Odlo≈æ√≠ vybran√© kostky
 */
export function bankSelectedDice() {
    const selectedDice = gameState.dice.filter(d => d.selected);
    if (selectedDice.length === 0) {
        window.addChatMessage('system', "Vyberte kostky, kter√© chcete odlo≈æit.");
        return;
    }
    
    const selectedValues = selectedDice.map(d => d.value);
    const score = calculateScore(selectedValues);
    
    if (score === 0) {
        window.addChatMessage('system', "Vybran√© kostky nenesou ≈æ√°dn√© body! Vyberte platn√© boduj√≠c√≠ kosty.");
        return;
    }
    
    gameState.currentTurnScore += score;
    gameState.bankedDice = gameState.bankedDice.concat(selectedValues);
    gameState.dice = gameState.dice.filter(d => !d.selected);
    gameState.mustBankDice = false; // Reset after banking
    
    window.addChatMessage('system', `Odlo≈æeno: ${selectedValues.join(', ')} za ${score} bod≈Ø. Aktu√°ln√≠ sk√≥re tahu: ${gameState.currentTurnScore}.`);
    
    // HOT DICE: Kontrola, zda jsou v≈°echny kostky odlo≈æen√©
    if (gameState.bankedDice.length === 6) {
        gameState.bankedDice = [];
        gameState.rollsLeft = Math.max(gameState.rollsLeft, 1); // Zajistit alespo≈à jeden hod
        window.addChatMessage('system', "üî• HOT DICE! V≈°echny kostky odlo≈æeny! M≈Ø≈æete pokraƒçovat v h√°zen√≠ v≈°ech 6 kostek.");
    }
    
    updateGameDisplay();
}
