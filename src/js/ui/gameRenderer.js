/**
 * SEZNAM POU≈Ω√çVAN√ùCH CSS T≈ò√çD:
 * Bootstrap: btn, btn-outline-success, btn-outline-danger, col-auto, d-flex, flex-column, justify-content-center, align-items-center, text-center, mb-2, mb-3, position-relative, fs-6, fw-bold, rounded-3, border-2, p-3, mx-auto, w-100
 * Neon t≈ô√≠dy: text-neon-green, text-        const hasTurnScore = state.turnScore && state.turnScore > 0;
        
        if (isAiTurn) {
            endTurnBtn.disabled = true;
            endTurnBtn.style.opacity = '0.3';
            endTurnBtn.title = 'AI hraje automaticky';
        } else if (!savedDiceCount || !hasTurnScore) {e, text-neon-purple, text-neon-orange, text-neon-red, text-neon-yellow, border-neon-green, border-neon-blue, border-neon-purple, border-neon-orange, border-neon-red, border-neon-yellow, bg-neon-black
 * Vlastn√≠: btn-neon, dice-area, dice-item, dice-selected, player-avatar, player-farkle-pulse, dice-rolling
 */

/**
 * SEZNAM PROMƒöNN√ùCH (lok√°ln√≠ v metod√°ch):
 * currentPlayer, container, playersSection, finalRoundAlert, isCurrentPlayer, isLeader, playerCol, cardClasses, playerCard, statusContent,
 * diceSection, diceContainer, isSelected, diceEl, infoText, actionButtons, buttonsContainer, isAiTurn, hasSelectedDice, hasCurrentRoll,
 * savedDiceCount, remainingDiceCount, canRoll, rollBtn, rollCol, saveBtn, saveCol, endTurnBtn, hasSavedDice, hasTurnScore, endCol, menuBtn, menuCol
 * 
 * MO≈ΩN√â DUPLICITY: 
 * - hasSavedDice (pou≈æ√≠v√° se v renderActionButtons - zkontrolovat)
 * - container (pou≈æ√≠v√° se v renderGameScreen a createErrorContainer)
 */

/**
 * Game Renderer - Vykreslov√°n√≠ hern√≠ obrazovky
 * Oddƒõlen od GameUI pro lep≈°√≠ modularitu
 */

import { createNeonButton, createDiceElement, createNeonCard } from './uiComponents.js';
import { CONSOLE_COLORS } from '../utils/colors.js';

export class GameRenderer {
    /**
     * Vykresl√≠ hern√≠ obrazovku
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     * @param {Function} toggleDiceSelection - Callback pro v√Ωbƒõr kostek
     * @param {Function} rollDice - Callback pro h√°zen√≠
     * @param {Function} saveDice - Callback pro odlo≈æen√≠
     * @param {Function} endTurn - Callback pro ukonƒçen√≠ tahu
     * @param {Function} showMenuWithConfirmation - Callback pro menu
     * @returns {HTMLElement} Vytvo≈ôen√Ω hern√≠ kontejner
     */
    renderGameScreen(state, callbacks = {}) {
        console.log('üéÆ GameRenderer: Vykresluje se hern√≠ obrazovka:', state);
        
        if (!state.players || state.players.length === 0) {
            console.error('‚ùå ≈Ω√°dn√≠ hr√°ƒçi v hern√≠m stavu!');
            return this.createErrorContainer('≈Ω√°dn√≠ hr√°ƒçi');
        }
        
        const currentPlayer = state.players[state.currentPlayerIndex];
        if (!currentPlayer) {
            console.error('‚ùå Aktu√°ln√≠ hr√°ƒç nenalezen! Index:', state.currentPlayerIndex);
            return this.createErrorContainer('Aktu√°ln√≠ hr√°ƒç nenalezen');
        }
        
        console.log('üë§ Aktu√°ln√≠ hr√°ƒç:', currentPlayer);
        
        const container = document.createElement('div');
        container.className = 'd-flex flex-column h-100 overflow-hidden';
        
        // 1. Responzivn√≠ karty hr√°ƒç≈Ø
        container.appendChild(this.renderPlayersSection(state));
        
        // 2. Sekce s kostkami
        container.appendChild(this.renderDiceSection(state, callbacks.toggleDiceSelection));
        
        // 3. Akƒçn√≠ tlaƒç√≠tka
        container.appendChild(this.renderButtonsSection(state, currentPlayer, callbacks));
        
        return container;
    }

    /**
     * Vykresl√≠ sekci s kartami hr√°ƒç≈Ø
     */
    renderPlayersSection(state) {
        const playersSection = document.createElement('div');
        playersSection.className = 'row g-1 g-sm-2 mb-3';
        
        // P≈ôid√°me informaci o fin√°ln√≠m kole nad karty hr√°ƒç≈Ø
        if (state.finalRound) {
            const finalRoundAlert = document.createElement('div');
            finalRoundAlert.className = 'col-12 mb-2';
            finalRoundAlert.innerHTML = `
                <div class="alert border border-neon-orange text-neon-orange text-center py-1 py-sm-2 bg-transparent">
                    <strong>üö® FIN√ÅLN√ç KOLO</strong> - ${state.finalRoundLeader} dos√°hl c√≠le!
                </div>
            `;
            playersSection.appendChild(finalRoundAlert);
        }
        
        state.players.forEach((player, index) => {
            const isCurrentPlayer = index === state.currentPlayerIndex;
            const isLeader = state.finalRound && player.name === state.finalRoundLeader;
            
            // V≈ædy 4 sloupce v jednom ≈ô√°dku - responzivn√≠
            const playerCol = document.createElement('div');
            playerCol.className = 'col-3';
            
            // ƒåist√° karta hr√°ƒçe s neonov√Ωm r√°meƒçkem podle barvy
            let cardClasses = `card bg-black border border-neon-${player.color} ${isCurrentPlayer ? 'border-3 player-active' : 'border-2'}`;
            if (isLeader) {
                cardClasses += ' border-neon-orange border-3'; // Leader m√° oran≈æov√Ω r√°meƒçek
            }
            
            const playerCard = document.createElement('div');
            playerCard.className = cardClasses;
            playerCard.id = `player-card-${index}`; // ID pro animace
            
            // Status pro fin√°ln√≠ kolo nebo FARKLE
            let statusContent = '';
            if (player.hasFarkle) {
                statusContent = '<div class="text-neon-red fw-bold player-farkle-pulse small">üí• FARKLE!</div>';
            } else if (state.finalRound) {
                if (isLeader) {
                    statusContent = '<div class="text-neon-orange fw-bold small">üëë LEADER</div>';
                } else {
                    statusContent = '<div class="text-neon-yellow small">Last chance!</div>';
                }
            }
            
            // Responzivn√≠ obsah - responzivn√≠ avatary s Bootstrap
            playerCard.innerHTML = `
                <div class="card-body text-center p-1 p-sm-2">
                    <div class="mb-1 mb-sm-2 d-flex justify-content-center">
                        <img src="ai-icons/${player.avatar}" alt="${player.name}" 
                             class="player-avatar rounded-circle ${isCurrentPlayer ? 'player-avatar-active' : ''} img-fluid" 
                             style="width: 60px; height: 60px; max-width: 60px; max-height: 60px;">
                    </div>
                    <div class="text-neon-${player.color} small fw-bold mb-1 text-truncate">${player.name}</div>
                    <div class="text-neon-green small">Score:</div>
                    <div class="text-neon-green fw-bold">${player.score}</div>
                    <div id="player-status-${index}" class="mt-1 small min-h-0">${statusContent}</div>
                </div>
            `;
            
            playerCol.appendChild(playerCard);
            playersSection.appendChild(playerCol);
        });
        
        return playersSection;
    }

    /**
     * Vykresl√≠ sekci s kostkami
     */
    renderDiceSection(state, toggleDiceCallback) {
        const diceSection = document.createElement('div');
        diceSection.className = 'text-center my-3';
        
        // Kontejner pro kostky s paddingem proti ≈ælut√©mu glow
        const diceContainer = document.createElement('div');
        diceContainer.className = 'd-flex flex-wrap justify-content-center align-items-center dice-container-responsive';
        diceContainer.style.padding = '1rem'; // Vƒõt≈°√≠ padding proti glow efektu
        
        // Pokud jsou nƒõjak√© aktu√°ln√≠ kostky, zobraz√≠me je VLEVO
        if (state.currentRoll && state.currentRoll.length > 0) {
            state.currentRoll.forEach((dieValue, index) => {
                const isSelected = state.selectedDice.includes(index);
                const diceEl = createDiceElement(
                    dieValue || '?', // Zobraz√≠me ? pro h√°zej√≠c√≠ kostky
                    isSelected, 
                    state.isRolling ? null : () => toggleDiceCallback(index)
                );
                
                // P≈ôid√°me animaci h√°zen√≠, pokud je aktivn√≠
                if (state.isRolling) {
                    diceEl.classList.add('dice-rolling');
                    diceEl.style.pointerEvents = 'none';
                } else {
                    diceEl.classList.remove('dice-rolling');
                    diceEl.style.pointerEvents = 'auto';
                }
                
                diceContainer.appendChild(diceEl);
            });
        }
        
        // Potom zobraz√≠me odlo≈æen√© kostky (modr√©, vpravo)
        if (state.savedDice && state.savedDice.length > 0) {
            state.savedDice.forEach(dieValue => {
                const diceEl = createDiceElement(dieValue, false, null);
                diceEl.classList.add('saved');
                diceEl.style.filter = 'brightness(0.8)';
                diceContainer.appendChild(diceEl);
            });
        }
        
        // Pokud nejsou ≈æ√°dn√© kostky
        if ((!state.currentRoll || state.currentRoll.length === 0) && (!state.savedDice || state.savedDice.length === 0)) {
            const infoText = document.createElement('div');
            infoText.className = 'text-neon-yellow fs-5';
            infoText.innerHTML = '<i class="bi bi-dice-6"></i> Stisknƒõte HODIT pro zaƒç√°tek';
            diceContainer.appendChild(infoText);
        }
        
        diceSection.appendChild(diceContainer);
        return diceSection;
    }

    /**
     * Vykresl√≠ sekci s tlaƒç√≠tky
     */
    renderButtonsSection(state, currentPlayer, callbacks) {
        const actionButtons = document.createElement('div');
        actionButtons.className = 'mt-3 mb-3';
        
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'row g-2 px-2';
        
        const isAiTurn = currentPlayer && !currentPlayer.isHuman;
        
        // OPRAVEN√Å LOGIKA H√ÅZEN√ç - hr√°ƒç mus√≠ odlo≈æit vybran√© kostky p≈ôed dal≈°√≠m hodem
        const hasSelectedDice = state.selectedDice && state.selectedDice.length > 0;
        const hasCurrentRoll = state.currentRoll && state.currentRoll.length > 0;
        const savedDiceCount = state.savedDice?.length || 0;
        
        // M≈Ø≈æeme hodit pouze pokud:
        // 1. Nen√≠ animace h√°zen√≠  
        // 2. NEM√ÅME vybran√© kostky (mus√≠ je odlo≈æit)
        // 3. Buƒè nem√°me kostky na stole (zaƒç√°tek) NEBO m√°me odlo≈æen√© kostky a zb√Ωvaj√≠ kostky k hodu
        const remainingDiceCount = 6 - savedDiceCount;
        const canRoll = !state.isRolling && 
                       !hasSelectedDice && 
                       (!hasCurrentRoll || (savedDiceCount > 0 && remainingDiceCount > 0));
        
        console.log(`üé≤ GameRenderer: canRoll=${canRoll} (isRolling=${state.isRolling}, hasSelected=${hasSelectedDice}, hasCurrentRoll=${hasCurrentRoll}, savedDice=${savedDiceCount}, remaining=${remainingDiceCount})`);
        
        
        // 1. Tlaƒç√≠tko HODIT
        const rollBtn = createNeonButton(
            'HODIT', 
            'green', 
            'bi-dice-6-fill',
            () => {
                console.log(`üéØ TLAƒå√çTKO HODIT stisknuto! canRoll=${canRoll}`);
                if (callbacks.rollDice) callbacks.rollDice();
            },
            'btn-sm w-100'
        );
        
        if (isAiTurn) {
            rollBtn.disabled = true;
            rollBtn.style.opacity = '0.3';
            rollBtn.title = 'AI hraje automaticky';
            console.log(`ü§ñ TLAƒå√çTKO HODIT zak√°z√°no - AI tah`);
        } else if (!canRoll) {
            rollBtn.disabled = true;
            rollBtn.style.opacity = '0.5';
            if (state.isRolling) {
                rollBtn.title = 'Prob√≠h√° h√°zen√≠...';
            } else if (state.selectedDice && state.selectedDice.length > 0) {
                rollBtn.title = 'Nejprve odlo≈æte vybran√© kostky';
            } else {
                rollBtn.title = 'Nelze hodit';
            }
            console.log(`‚ùå TLAƒå√çTKO HODIT zak√°z√°no - canRoll=false (${rollBtn.title})`);
        } else {
            rollBtn.disabled = false;
            rollBtn.style.opacity = '1';
            rollBtn.title = 'Hodit kostkami';
            console.log(`‚úÖ TLAƒå√çTKO HODIT povoleno - canRoll=true`);
        }
        
        const rollCol = document.createElement('div');
        rollCol.className = 'col-6 mb-2';
        rollCol.appendChild(rollBtn);
        buttonsContainer.appendChild(rollCol);
        
        // 2. Tlaƒç√≠tko ODLO≈ΩIT
        const saveBtn = createNeonButton(
            'ODLO≈ΩIT', 
            'blue', 
            'bi-floppy-fill',
            () => {
                console.log(`üíæ TLAƒå√çTKO ODLO≈ΩIT stisknuto! selectedDice=${state.selectedDice?.length || 0}`);
                if (callbacks.saveDice) callbacks.saveDice();
            },
            'btn-sm w-100'
        );
        
        if (isAiTurn) {
            saveBtn.disabled = true;
            saveBtn.style.opacity = '0.3';
            saveBtn.title = 'AI hraje automaticky';
            console.log(`ü§ñ TLAƒå√çTKO ODLO≈ΩIT zak√°z√°no - AI tah`);
        } else if (!state.selectedDice || state.selectedDice.length === 0) {
            saveBtn.disabled = true;
            saveBtn.style.opacity = '0.5';
            saveBtn.title = 'Nejsou vybran√© kostky';
            console.log(`‚ùå TLAƒå√çTKO ODLO≈ΩIT zak√°z√°no - ≈æ√°dn√© vybran√© kostky`);
        } else {
            saveBtn.disabled = false;
            saveBtn.style.opacity = '1';
            saveBtn.title = 'Odlo≈æit vybran√© kostky';
            console.log(`‚úÖ TLAƒå√çTKO ODLO≈ΩIT povoleno - ${state.selectedDice.length} kostek vybr√°no`);
        }
        
        const saveCol = document.createElement('div');
        saveCol.className = 'col-6 mb-2';
        saveCol.appendChild(saveBtn);
        buttonsContainer.appendChild(saveCol);
        
        // 3. Tlaƒç√≠tko UKONƒåIT TAH
        const endTurnBtn = createNeonButton(
            'UKONƒåIT TAH', 
            'orange', 
            'bi-skip-forward-fill',
            callbacks.endTurn,
            'btn-sm w-100'
        );
        
        const hasSavedDice = state.savedDice && state.savedDice.length > 0;
        const hasTurnScore = state.turnScore && state.turnScore > 0;
        
        if (isAiTurn) {
            endTurnBtn.disabled = true;
            endTurnBtn.style.opacity = '0.3';
            endTurnBtn.title = 'AI hraje automaticky';
        } else if (!hasSavedDice && !hasTurnScore) {
            endTurnBtn.disabled = true;
            endTurnBtn.style.opacity = '0.5';
            endTurnBtn.title = 'Nejsou body k ukonƒçen√≠';
        } else {
            endTurnBtn.disabled = false;
            endTurnBtn.style.opacity = '1';
            endTurnBtn.title = 'Ukonƒçit tah';
        }
        
        const endCol = document.createElement('div');
        endCol.className = 'col-6 mb-2';
        endCol.appendChild(endTurnBtn);
        buttonsContainer.appendChild(endCol);
        
        // 4. Tlaƒç√≠tko MENU
        const menuBtn = createNeonButton(
            'MENU', 
            'red', 
            'bi-list', 
            callbacks.showMenuWithConfirmation,
            'btn-sm w-100'
        );
        
        const menuCol = document.createElement('div');
        menuCol.className = 'col-6 mb-2';
        menuCol.appendChild(menuBtn);
        buttonsContainer.appendChild(menuCol);
        
        actionButtons.appendChild(buttonsContainer);
        return actionButtons;
    }

    /**
     * Vytvo≈ô√≠ error kontejner
     */
    createErrorContainer(message) {
        const container = document.createElement('div');
        container.className = 'd-flex flex-column justify-content-center align-items-center h-100';
        container.innerHTML = `
            <div class="text-neon-red fs-4 mb-3">
                <i class="bi bi-exclamation-triangle-fill"></i> ${message}
            </div>
        `;
        return container;
    }
}
