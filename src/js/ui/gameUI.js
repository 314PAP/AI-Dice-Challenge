/**
 * Game UI Manager - Spr√°va hern√≠ho UI
 * Star√° se o vykreslov√°n√≠ a aktualizaci hern√≠ho rozhran√≠
 */

import gameState from '../game/gameState.js';
import { createNeonButton, createDiceElement, createNeonCard } from './uiComponents.js';
import { UI_CONSTANTS, NEON_COLORS } from '../utils/constants.js';
import { CONSOLE_COLORS, CHAT_COLORS, pxToRem } from '../utils/colors.js';
import { rollDie, rollDice, calculatePoints, hasScoringDice, isValidFarkleCombination } from '../game/diceMechanics.js';
import chatSystem from '../ai/chatSystem.js';

/**
 * GameUI t≈ô√≠da - Zaji≈°≈•uje ve≈°ker√© renderov√°n√≠ hern√≠ plochy
 */
export class GameUI {
    constructor() {
        this.gameArea = document.getElementById('gameArea');
        
        // Ovƒõ≈ô√≠me, ≈æe gameArea existuje
        if (!this.gameArea) {
            console.warn('‚ö†Ô∏è GameUI: Element #gameArea nenalezen. GameUI bude ƒçekat na DOM.');
            // Pokus√≠me se naj√≠t gameArea po naƒçten√≠ DOM
            document.addEventListener('DOMContentLoaded', () => {
                this.gameArea = document.getElementById('gameArea');
                if (this.gameArea) {
                    console.log('‚úÖ GameUI: Element #gameArea nalezen po DOMContentLoaded');
                    this.initEventListeners();
                }
            });
            return;
        }
        
        this.initEventListeners();
    }

    /**
     * Inicializuje event listenery pro UI
     */
    initEventListeners() {
        // Listener pro zmƒõny hern√≠ho stavu
        gameState.addListener(this.renderUI.bind(this));
    }

    /**
     * Hlavn√≠ render funkce - rozhoduje, co se m√° zobrazit
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     */
    renderUI(state) {
        if (!this.gameArea) {
            console.warn('‚ö†Ô∏è GameUI.renderUI: gameArea element nen√≠ dostupn√Ω');
            return;
        }
        
        // Vyƒçist√≠me hern√≠ plochu
        this.gameArea.innerHTML = '';
        
        // Zobraz√≠me spr√°vn√Ω obsah podle f√°ze hry
        switch (state.gamePhase) {
            case 'menu':
                this.renderMainMenu();
                break;
            case 'game':
                this.renderGameScreen(state);
                break;
            case 'gameover':
                this.renderGameOver(state);
                break;
            case 'rules':
                this.renderRules();
                break;
            case 'halloffame':
                this.renderHallOfFame();
                break;
            default:
                this.renderMainMenu();
        }
    }

    /**
     * Vykresl√≠ hlavn√≠ menu - optimalizovan√© pro v≈°echny re≈æimy zobrazen√≠
     */
    renderMainMenu() {
        const container = document.createElement('div');
        container.className = 'd-flex flex-column justify-content-center align-items-center h-100';
        
        // Nadpis - ƒåIST√ù BOOTSTRAP
        const title = document.createElement('h1');
        title.className = 'text-neon-green display-6 mb-4 text-center';
        title.innerHTML = '<i class="bi bi-star-fill"></i> C√≠lov√© sk√≥re';
        container.appendChild(title);
        
        // Selector pro c√≠lov√© sk√≥re - ƒåIST√ù BOOTSTRAP
        const scoreSelector = document.createElement('div');
        scoreSelector.className = 'mb-4 d-flex align-items-center justify-content-center fs-5';
        
        // Tlaƒç√≠tka - ƒåIST√ù BOOTSTRAP
        const minusBtn = createNeonButton('-', 'blue', null, () => this.adjustTargetScore(-1000), 'btn-sm');
        
        const scoreValue = document.createElement('div');
        scoreValue.className = 'px-4 text-neon-yellow fs-4';
        scoreValue.textContent = gameState.getState().targetScore;
        scoreValue.id = 'targetScoreValue';
        
        const plusBtn = createNeonButton('+', 'blue', null, () => this.adjustTargetScore(1000), 'btn-sm');
        
        scoreSelector.appendChild(minusBtn);
        scoreSelector.appendChild(scoreValue);
        scoreSelector.appendChild(plusBtn);
        
        container.appendChild(scoreSelector);
        
        // Tlaƒç√≠tka akc√≠ - ƒåIST√ù BOOTSTRAP GRID
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'row g-2';
        
        const startBtn = createNeonButton(
            'ZAƒå√çT HRU', 
            'green', 
            'bi-play-fill', 
            () => this.startGame(), 
            'btn w-100'
        );
        
        const rulesBtn = createNeonButton(
            'PRAVIDLA', 
            'blue', 
            'bi-book-fill', 
            () => this.showRules(), 
            'btn w-100'
        );
        
        const hallOfFameBtn = createNeonButton(
            'S√ç≈á SL√ÅVY', 
            'orange', 
            'bi-trophy-fill', 
            () => this.showHallOfFame(), 
            'btn w-100'
        );
        
        const exitGameBtn = createNeonButton(
            'UKONƒåIT HRU', 
            'red', 
            'bi-power', 
            () => window.close(), 
            'btn w-100'
        );
        
        const col1 = document.createElement('div');
        col1.className = 'col-12 col-sm-6 mb-2';
        col1.appendChild(startBtn);
        
        const col2 = document.createElement('div');
        col2.className = 'col-12 col-sm-6 mb-2';
        col2.appendChild(rulesBtn);
        
        const col3 = document.createElement('div');
        col3.className = 'col-12 col-sm-6 mb-2';
        col3.appendChild(hallOfFameBtn);
        
        const col4 = document.createElement('div');
        col4.className = 'col-12 col-sm-6 mb-2';
        col4.appendChild(exitGameBtn);
        
        buttonsContainer.appendChild(col1);
        buttonsContainer.appendChild(col2);
        buttonsContainer.appendChild(col3);
        buttonsContainer.appendChild(col4);
        
        container.appendChild(buttonsContainer);
        
        // Vyƒçist√≠me a p≈ôid√°me nov√Ω obsah
        if (this.gameArea) {
            this.gameArea.innerHTML = '';
            this.gameArea.appendChild(container);
        } else {
            console.warn('‚ö†Ô∏è GameUI.renderMainMenu: gameArea nen√≠ dostupn√Ω');
        }
    }

    /**
     * Uprav√≠ c√≠lov√© sk√≥re
     * @param {number} change - O kolik zmƒõnit sk√≥re
     */
    adjustTargetScore(change) {
        const currentScore = gameState.getState().targetScore;
        const newScore = Math.max(1000, Math.min(50000, currentScore + change));
        
        gameState.updateState({ targetScore: newScore });
        
        // Aktualizujeme zobrazen√≠
        const scoreValueEl = document.getElementById('targetScoreValue');
        if (scoreValueEl) {
            scoreValueEl.textContent = newScore;
        }
    }

    /**
     * Spust√≠ hru
     */
    startGame() {
        console.log('Startuje hra...');
        gameState.updateState({ 
            gameStarted: true,
            gamePhase: 'game',
            currentPlayerIndex: 0,
            currentRoll: [],
            selectedDice: [],
            turnScore: 0,
            players: gameState.getState().players.map(p => ({ ...p, score: 0 }))
        });
        console.log('Nov√Ω hern√≠ stav:', gameState.getState());
        
        // Pokud zaƒç√≠n√° AI hr√°ƒç, spust√≠me jeho tah
        const currentPlayer = gameState.getState().players[0];
        if (!currentPlayer.isHuman) {
            setTimeout(() => {
                this.playAiTurn(currentPlayer);
            }, 2000); // Kr√°tk√° pauza po startu hry
        }
    }

    /**
     * Zobraz√≠ pravidla
     */
    showRules() {
        gameState.updateState({ gamePhase: 'rules' });
    }

    /**
     * Zobraz√≠ s√≠≈à sl√°vy
     */
    showHallOfFame() {
        gameState.updateState({ gamePhase: 'halloffame' });
    }

    /**
     * Vykresl√≠ hern√≠ obrazovku
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     */
    renderGameScreen(state) {
        console.log('üéÆ Vykresluje se hern√≠ obrazovka:', state);
        
        if (!state.players || state.players.length === 0) {
            console.error('‚ùå ≈Ω√°dn√≠ hr√°ƒçi v hern√≠m stavu!');
            return;
        }
        
        const currentPlayer = state.players[state.currentPlayerIndex];
        if (!currentPlayer) {
            console.error('‚ùå Aktu√°ln√≠ hr√°ƒç nenalezen! Index:', state.currentPlayerIndex);
            return;
        }
        
        console.log('üë§ Aktu√°ln√≠ hr√°ƒç:', currentPlayer);
        
        const container = document.createElement('div');
        container.className = 'd-flex flex-column h-100 overflow-hidden';
        
        // Responzivn√≠ karty hr√°ƒç≈Ø - v≈ædy v jednom ≈ô√°dku
        const playersSection = document.createElement('div');
        playersSection.className = 'row g-1 g-sm-2 mb-3';
        
        state.players.forEach((player, index) => {
            const isCurrentPlayer = index === state.currentPlayerIndex;
            
            // V≈ædy 4 sloupce v jednom ≈ô√°dku - responzivn√≠
            const playerCol = document.createElement('div');
            playerCol.className = 'col-3';
            
            // ƒåist√° karta hr√°ƒçe s neonov√Ωm r√°meƒçkem podle barvy
            const playerCard = document.createElement('div');
            playerCard.className = `card bg-black border border-neon-${player.color} ${isCurrentPlayer ? 'border-3 player-active' : 'border-2'}`;
            playerCard.id = `player-card-${index}`; // ID pro animace
            
            // Responzivn√≠ obsah - responzivn√≠ avatary s Bootstrap
            playerCard.innerHTML = `
                <div class="card-body text-center p-1 p-sm-2">
                    <div class="mb-1 mb-sm-2 d-flex justify-content-center">
                        <img src="ai-icons/${player.avatar}" alt="${player.name}" 
                             class="player-avatar rounded-circle ${isCurrentPlayer ? 'player-avatar-active' : ''} img-fluid" 
                             style="width: min(12vw, 60px); height: min(12vw, 60px); max-width: 60px; max-height: 60px; object-fit: cover;">
                    </div>
                    <div class="text-neon-${player.color} small fw-bold mb-1 text-truncate">${player.name}</div>
                    <div class="text-neon-green" style="font-size: clamp(0.6rem, 1.5vw, 0.7rem);">Score:</div>
                    <div class="text-neon-green fw-bold" style="font-size: clamp(0.7rem, 2vw, 0.875rem);">${player.score}</div>
                    <div id="player-status-${index}" class="mt-1" style="min-height: 1rem; font-size: clamp(0.6rem, 1.5vw, 0.75rem);"></div>
                </div>
            `;
            
            playerCol.appendChild(playerCard);
            playersSection.appendChild(playerCol);
        });
        
        container.appendChild(playersSection);
        
        // Sekce s kostkami - odlo≈æen√© i aktu√°ln√≠ v jedn√© ≈ôadƒõ
        const diceSection = document.createElement('div');
        diceSection.className = 'text-center my-3';
        
        // Kontejner pro kostky - Bootstrap flexbox s garantovanou responzivitou
        const diceContainer = document.createElement('div');
        diceContainer.className = 'd-flex flex-wrap justify-content-center align-items-center dice-container-responsive';
        
        // Pokud jsou nƒõjak√© aktu√°ln√≠ kostky, zobraz√≠me je VLEVO
        if (state.currentRoll && state.currentRoll.length > 0) {
            state.currentRoll.forEach((dieValue, index) => {
                const isSelected = state.selectedDice.includes(index);
                const diceEl = createDiceElement(
                    dieValue || '?', // Zobraz√≠me ? pro h√°zej√≠c√≠ kostky
                    isSelected, 
                    state.isRolling ? null : () => this.toggleDiceSelection(index) // Zak√°≈æeme klik bƒõhem h√°zen√≠
                );
                
                // P≈ôid√°me animaci h√°zen√≠, pokud je aktivn√≠
                if (state.isRolling) {
                    diceEl.classList.add('dice-rolling');
                    // Zak√°≈æeme hover bƒõhem h√°zen√≠
                    diceEl.style.pointerEvents = 'none';
                } else {
                    diceEl.classList.remove('dice-rolling');
                    diceEl.style.pointerEvents = 'auto';
                }
                
                diceContainer.appendChild(diceEl);
            });
        }
        
        // Potom zobraz√≠me odlo≈æen√© kostky (modr√©, vpravo) - odkl√°dan√© zprava doleva
        if (state.savedDice && state.savedDice.length > 0) {
            state.savedDice.forEach(dieValue => {
                const diceEl = createDiceElement(dieValue, false, null);
                // Pou≈æijeme CSS t≈ô√≠du saved pro modrou barvu
                diceEl.classList.add('saved');
                diceEl.style.filter = 'brightness(0.8)'; // Trochu ztlumit pro rozli≈°en√≠
                diceContainer.appendChild(diceEl);
            });
        }
        
        // Pokud nejsou ≈æ√°dn√© kostky (ani odlo≈æen√©, ani aktu√°ln√≠)
        if ((!state.currentRoll || state.currentRoll.length === 0) && (!state.savedDice || state.savedDice.length === 0)) {
            const infoText = document.createElement('div');
            infoText.className = 'text-neon-yellow fs-5';
            infoText.innerHTML = '<i class="bi bi-dice-6"></i> Stisknƒõte HODIT pro zaƒç√°tek';
            diceContainer.appendChild(infoText);
        }
        
        diceSection.appendChild(diceContainer);
        container.appendChild(diceSection);
        
        // Akƒçn√≠ tlaƒç√≠tka - TƒöSNƒö POD KOSTKAMI, ne na spodku
        const actionButtons = document.createElement('div');
        actionButtons.className = 'mt-3 mb-3'; // Zmƒõna z mt-auto na mt-3
        
        // Kontejner pro tlaƒç√≠tka - BOOTSTRAP GRID s men≈°√≠mi tlaƒç√≠tky
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'row g-2 px-2'; // P≈ôid√°n padding pro okraje
        
        // Tlaƒç√≠tko HODIT - dostupn√© pouze kdy≈æ:
        // 1. Na zaƒç√°tku tahu (≈æ√°dn√© kostky na stole)
        // 2. Po odlo≈æen√≠ v≈°ech kostek (hot dice)
        const rollBtn = createNeonButton(
            'HODIT', 
            'green', 
            'bi-dice-6-fill',
            () => this.rollDice(),
            'btn-sm w-100'
        );
        
        // KONTROLA AI HR√ÅƒåE - blokujeme v≈°echna tlaƒç√≠tka kromƒõ MENU
        const isAiTurn = currentPlayer && currentPlayer.isAi;
        
        // Logika pro disable tlaƒç√≠tka HODIT:
        const hasSelectedDice = state.selectedDice && state.selectedDice.length > 0;
        const hasCurrentRoll = state.currentRoll && state.currentRoll.length > 0;
        const hasSavedDice = state.savedDice && state.savedDice.length > 0;
        
        // HODIT je povoleno kdy≈æ:
        // 1. Na zaƒç√°tku tahu (currentRoll je pr√°zdn√©)
        // 2. Po odlo≈æen√≠ kostek - OPRAVENO: m≈Ø≈æeme hodit se zb√Ωvaj√≠c√≠mi kostkami
        // 3. V≈ædy pokud nen√≠ pr√°vƒõ h√°zen√≠ v progresu
        const canRoll = !state.isRolling;
        
        if (isAiTurn) {
            rollBtn.disabled = true;
            rollBtn.style.opacity = '0.3';
            rollBtn.title = 'AI hraje automaticky';
        } else if (!canRoll) {
            rollBtn.disabled = true;
            rollBtn.style.opacity = '0.5';
            rollBtn.title = 'Nejd≈ô√≠ve odlo≈æte kostky nebo ukonƒçete tah';
        } else {
            rollBtn.disabled = false;
            rollBtn.style.opacity = '1';
            rollBtn.title = 'H√°zet kostkami';
        }
        
        const rollCol = document.createElement('div');
        rollCol.className = 'col-6 mb-2'; // col-6 m√≠sto col-sm-6 pro konzistentn√≠ 2x2 grid
        rollCol.appendChild(rollBtn);
        buttonsContainer.appendChild(rollCol);
        
        // Tlaƒç√≠tko ODLO≈ΩIT - v≈ædy viditeln√©, ale disabled pokud nejsou vybran√© kostky
        const saveBtn = createNeonButton(
            'ODLO≈ΩIT', 
            'blue', 
            'bi-floppy-fill',
            () => this.saveDice(),
            'btn-sm w-100' // Men≈°√≠ tlaƒç√≠tko s plnou ≈°√≠≈ôkou
        );
        
        // Disable tlaƒç√≠tko pokud nejsou vybran√© kostky nebo je AI tah
        if (isAiTurn) {
            saveBtn.disabled = true;
            saveBtn.style.opacity = '0.3';
            saveBtn.title = 'AI hraje automaticky';
        } else if (!state.selectedDice || state.selectedDice.length === 0) {
            saveBtn.disabled = true;
            saveBtn.style.opacity = '0.5';
            saveBtn.title = 'Nejsou vybran√© kostky';
        } else {
            saveBtn.disabled = false;
            saveBtn.style.opacity = '1';
            saveBtn.title = 'Odlo≈æit vybran√© kostky';
        }
        
        const saveCol = document.createElement('div');
        saveCol.className = 'col-6 mb-2'; // col-6 m√≠sto col-sm-6
        saveCol.appendChild(saveBtn);
        buttonsContainer.appendChild(saveCol);
        
        // Tlaƒç√≠tko UKONƒåIT TAH - dostupn√© kdy≈æ m√° hr√°ƒç nƒõjak√© body (odlo≈æen√© kostky nebo hot dice)
        const endTurnBtn = createNeonButton(
            'UKONƒåIT TAH', 
            'orange', 
            'bi-skip-forward-fill',
            () => this.endTurn(),
            'btn-sm w-100' // Men≈°√≠ tlaƒç√≠tko s plnou ≈°√≠≈ôkou
        );
        
        // Disable tlaƒç√≠tko pokud nem√° ≈æ√°dn√© body k ukonƒçen√≠ nebo je AI tah
        const hasTurnScore = state.turnScore && state.turnScore > 0;
        
        if (isAiTurn) {
            endTurnBtn.disabled = true;
            endTurnBtn.style.opacity = '0.3';
            endTurnBtn.title = 'AI hraje automaticky';
        } else if (!hasSavedDice && !hasTurnScore) {
            endTurnBtn.disabled = true;
            endTurnBtn.style.opacity = '0.5';
            endTurnBtn.title = 'Nejsou body k ukonƒçen√≠';
        } else {
            endTurnBtn.disabled = false;
            endTurnBtn.style.opacity = '1';
            endTurnBtn.title = 'Ukonƒçit tah';
        }
        
        const endCol = document.createElement('div');
        endCol.className = 'col-6 mb-2'; // col-6 m√≠sto col-sm-6
        endCol.appendChild(endTurnBtn);
        buttonsContainer.appendChild(endCol);
        
        // Tlaƒç√≠tko MENU - v≈ædy dostupn√© s potvrzen√≠m
        const menuBtn = createNeonButton(
            'MENU', 
            'red', 
            'bi-list', 
            () => this.showMenuWithConfirmation(),
            'btn-sm w-100' // Men≈°√≠ tlaƒç√≠tko s plnou ≈°√≠≈ôkou
        );
        
        const menuCol = document.createElement('div');
        menuCol.className = 'col-6 mb-2'; // col-6 m√≠sto col-sm-6
        menuCol.appendChild(menuBtn);
        buttonsContainer.appendChild(menuCol);
        
        actionButtons.appendChild(buttonsContainer);
        
        container.appendChild(actionButtons);
        
        // Vyƒçist√≠me a p≈ôid√°me nov√Ω obsah
        if (this.gameArea) {
            this.gameArea.innerHTML = '';
            this.gameArea.appendChild(container);
        } else {
            console.warn('‚ö†Ô∏è GameUI.renderGameScreen: gameArea nen√≠ dostupn√Ω');
        }
    }
    
    /**
     * P≈ôep√≠n√° v√Ωbƒõr kostky
     * @param {number} index - Index kostky
     */
    toggleDiceSelection(index) {
        console.log('üéØ toggleDiceSelection vol√°n s indexem:', index);
        const state = gameState.getState();
        console.log('üìä Aktu√°ln√≠ selectedDice:', state.selectedDice);
        let selectedDice = [...state.selectedDice];
        
        if (selectedDice.includes(index)) {
            // Odznaƒçov√°n√≠ - v≈ædy povoleno
            selectedDice = selectedDice.filter(i => i !== index);
            console.log('‚ûñ Odeb√≠r√°m index', index, 'nov√© selectedDice:', selectedDice);
        } else {
            // Oznaƒçov√°n√≠ - kontrolujeme, zda kostka m√° platnou hodnotu
            const dieValue = state.currentRoll[index];
            
            // Kontrola, zda lze kostku odlo≈æit samostatnƒõ (1 nebo 5)
            if (dieValue === 1 || dieValue === 5) {
                selectedDice.push(index);
                console.log('‚ûï P≈ôid√°v√°m platnou kostku', dieValue, 'index', index);
            } else {
                // Pro 2,3,4,6 - mus√≠me zkontrolovat, zda existuje trojice/v√≠ce t√©to hodnoty
                const availableDice = state.currentRoll;
                const countOfValue = availableDice.filter(die => die === dieValue).length;
                
                if (countOfValue >= 3) {
                    // Existuje trojice t√©to hodnoty - kostku lze oznaƒçit
                    selectedDice.push(index);
                    console.log('‚ûï P≈ôid√°v√°m kostku do trojice/v√≠ce', dieValue, 'index', index, `(${countOfValue} kus≈Ø k dispozici)`);
                } else {
                    // Kostka nem≈Ø≈æe b√Ωt oznaƒçena - nen√≠ souƒç√°st√≠ trojice
                    const warningMsg = `‚ö†Ô∏è Kostka ${dieValue} nem≈Ø≈æe b√Ωt oznaƒçena! Pot≈ôebujete alespo≈à 3 stejn√© kostky (m√°te jen ${countOfValue}).`;
                    console.warn(warningMsg);
                    chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
                    return; // Nepokraƒçujeme v aktualizaci stavu
                }
            }
        }
        
        gameState.updateState({ selectedDice });
        console.log('‚úÖ Stav aktualizov√°n, renderuji...');
    }
    
    /**
     * Hod√≠ kostky - s dynamickou animac√≠ zmƒõny ƒç√≠sel
     */
    rollDice() {
        console.log('üé≤ H√°zen√≠ kostkami...');
        
        const state = gameState.getState();
        
        // Urƒç√≠me kolik kostek hodit
        let diceCount;
        
        // Pokud jsou zb√Ωvaj√≠c√≠ kostky z p≈ôedchoz√≠ho hodu, h√°z√≠me jimi
        if (state.currentRoll && state.currentRoll.length > 0) {
            diceCount = state.currentRoll.length;
            console.log(`üéØ H√°z√≠m se zb√Ωvaj√≠c√≠mi ${diceCount} kostkami`);
        } else {
            // Jinak h√°z√≠me nov√Ωmi kostkami podle toho, kolik jich zb√Ωv√°
            const totalSavedDice = (state.savedDice || []).length;
            if (totalSavedDice === 0) {
                // Zaƒç√°tek tahu - hod√≠me v≈°emi 6 kostkami
                diceCount = 6;
            } else {
                // Hot dice - v≈°ech 6 kostek bylo odlo≈æeno, h√°z√≠me znovu v≈°emi
                diceCount = 6;
            }
            console.log(`üéØ H√°z√≠m ${diceCount} nov√Ωmi kostkami`);
        }

        // Uk√°≈æeme animaci h√°zen√≠ch kostek P≈òED v√Ωsledkem
        gameState.updateState({
            currentRoll: Array(diceCount).fill(0), // Doƒçasnƒõ pr√°zdn√© kostky
            selectedDice: [],
            isRolling: true // Flag pro animaci
        });
        
        // P≈ôekresl√≠me s animac√≠ h√°zen√≠
        this.renderGameScreen(gameState.getState());
        
        // Dynamick√° animace zmƒõny ƒç√≠sel bƒõhem h√°zen√≠
        let animationCounter = 0;
        const animationInterval = setInterval(() => {
            animationCounter++;
            const randomDice = Array(diceCount).fill(0).map(() => Math.floor(Math.random() * 6) + 1);
            
            // Aktualizujeme kostky s n√°hodn√Ωmi ƒç√≠sly pro animaci
            gameState.updateState({
                currentRoll: randomDice,
                isRolling: true
            });
            this.renderGameScreen(gameState.getState());
            
            // Po 10 iterac√≠ch (2 sekundy) ukonƒç√≠me animaci
            if (animationCounter >= 10) {
                clearInterval(animationInterval);
                
                // Po animaci uk√°≈æeme fin√°ln√≠ v√Ωsledek
                setTimeout(() => {
                    // Vyu≈æit√≠ importovan√© funkce pro fin√°ln√≠ hod
                    const dice = rollDice(diceCount);
                    
                    // Spoƒç√≠t√°me body z tohoto hodu
                    const points = calculatePoints(dice);
                    
                    // Aktualizuje hern√≠ stav s v√Ωsledkem
                    gameState.updateState({
                        currentRoll: dice,
                        selectedDice: [],
                        isRolling: false
                    });
                    
                    console.log(`üéØ Hozeno: [${dice.join(', ')}] = ${points} bod≈Ø`);
                    chatSystem.addSystemMessage(`üéØ Hozeno: [${dice.join(', ')}] = ${points} bod≈Ø`);
                    
                    // P≈ôid√°me "dice-new" t≈ô√≠du pro spawn animaci
                    setTimeout(() => {
                        const diceElements = document.querySelectorAll('.dice:not(.saved)');
                        diceElements.forEach(el => {
                            el.classList.add('dice-new');
                            console.log('üé≤ P≈ôid√°v√°m spawn animaci');
                        });
                        
                        // Odstran√≠me t≈ô√≠du po animaci
                        setTimeout(() => {
                            diceElements.forEach(el => el.classList.remove('dice-new'));
                        }, 800);
                    }, 50); // Krat≈°√≠ zpo≈ædƒõn√≠ pro lep≈°√≠ synchronizaci
                    
                    // Zkontrolujeme FARKLE - kdy≈æ hod neobsahuje ≈æ√°dn√© boduj√≠c√≠ kostky
                    if (!hasScoringDice(dice)) {
                        const farkleMsg = 'üí• FARKLE! Hod neobsahuje ≈æ√°dn√© boduj√≠c√≠ kostky! P≈ôich√°z√≠te o v≈°echny odlo≈æen√© body tohoto tahu!';
                        console.warn(farkleMsg);
                        chatSystem.addSystemMessage(farkleMsg, CHAT_COLORS.RED);
                        
                        // P≈ôid√°me farkle animaci ke kostk√°m
                        setTimeout(() => {
                            const diceElements = document.querySelectorAll('.dice:not(.saved)');
                            diceElements.forEach(el => el.classList.add('dice-farkle'));
                            
                            setTimeout(() => {
                                diceElements.forEach(el => el.classList.remove('dice-farkle'));
                            }, 1200);
                        }, 200);
                        
                        // Zobraz√≠me FARKLE pod hr√°ƒçem
                        this.showPlayerFarkle();
                        
                        // AI reakce na farkle
                        this.triggerAiReactions('farkle', { dice, points: 0 });
                        
                        // Automaticky ukonƒç√≠me tah s farkle okam≈æitƒõ
                        setTimeout(() => {
                            this.endTurn(true);
                        }, 1500); // 1.5 sekundy na animaci
                        
                    } else {
                        const successMsg = `‚úÖ M√°te kostky na v√Ωbƒõr! Oznaƒçte platn√© kostky k odlo≈æen√≠.`;
                        console.log(successMsg);
                        chatSystem.addSystemMessage(successMsg, CHAT_COLORS.GREEN);
                    }
                    
                    // P≈ôekresl√≠me obrazovku s v√Ωsledkem
                    this.renderGameScreen(gameState.getState());
                    
                }, 100); // Kr√°tk√© zpo≈ædƒõn√≠ po animaci
            }
        }, 200); // Ka≈æd√Ωch 200ms se zmƒõn√≠ ƒç√≠sla
    }

    
    /**
     * Zobraz√≠ menu s potvrzovac√≠m dialogem
     */
    showMenuWithConfirmation() {
        this.showStyledConfirmation(
            'Opravdu chcete odej√≠t do menu?',
            'Rozehran√° hra bude ztracena.',
            () => this.showMenu()
        );
    }

    /**
     * Zobraz√≠ stylovan√Ω potvrzovac√≠ dialog
     */
    showStyledConfirmation(title, message, onConfirm) {
        // Vytvo≈ô√≠me backdrop
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop fade show';
        backdrop.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1050;
            backdrop-filter: blur(5px);
        `;

        // Vytvo≈ô√≠me mod√°ln√≠ dialog
        const modal = document.createElement('div');
        modal.className = 'modal d-flex align-items-center justify-content-center';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1055;
            display: flex !important;
        `;

        modal.innerHTML = `
            <div class="modal-dialog modal-sm">
                <div class="modal-content bg-black border-3 border-neon-red" style="box-shadow: 0 0 2rem var(--neon-red);">
                    <div class="modal-header border-bottom border-neon-red">
                        <h5 class="modal-title text-neon-red fw-bold">${title}</h5>
                    </div>
                    <div class="modal-body text-center">
                        <p class="text-neon-yellow mb-3">${message}</p>
                        <div class="d-flex gap-2 justify-content-center">
                            <button type="button" class="btn btn-neon btn-sm" data-neon-color="green" id="confirm-yes">
                                <i class="bi bi-check-lg me-1"></i>Ano
                            </button>
                            <button type="button" class="btn btn-neon btn-sm" data-neon-color="red" id="confirm-no">
                                <i class="bi bi-x-lg me-1"></i>Ne
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // P≈ôid√°me do DOM
        document.body.appendChild(backdrop);
        document.body.appendChild(modal);

        // Event listenery
        const yesBtn = modal.querySelector('#confirm-yes');
        const noBtn = modal.querySelector('#confirm-no');

        const closeModal = () => {
            document.body.removeChild(backdrop);
            document.body.removeChild(modal);
        };

        yesBtn.addEventListener('click', () => {
            closeModal();
            onConfirm();
        });

        noBtn.addEventListener('click', closeModal);
        backdrop.addEventListener('click', closeModal);

        // ESC key
        const escHandler = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', escHandler);
            }
        };
        document.addEventListener('keydown', escHandler);
    }

    /**
     * Zobraz√≠ hern√≠ menu
     */
    showMenu() {
        gameState.updateState({ gamePhase: 'menu' });
    }

    /**
     * Vykresl√≠ obrazovku konce hry - optimalizovan√° pro v≈°echny re≈æimy zobrazen√≠
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     */
    renderGameOver(state) {
        const container = document.createElement('div');
        container.className = 'd-flex flex-column justify-content-center align-items-center h-100';
        
        // Nadpis - men≈°√≠ na landscape/mal√Ωch za≈ô√≠zen√≠ch
        const title = document.createElement('h1');
        title.className = 'text-neon-green fs-fluid-1 mb-2 mb-md-3 text-center';
        title.innerHTML = '<i class="bi bi-trophy-fill"></i> Konec hry';
        container.appendChild(title);
        
        // Najdeme v√≠tƒõze
        const winner = state.players.reduce((prev, current) => 
            (prev.score > current.score) ? prev : current);
        
        // Informace o v√≠tƒõzi - kompaktnƒõj≈°√≠ pro mal√© displeje s obr√°zkem
        const winnerInfo = document.createElement('div');
        winnerInfo.className = 'text-center mb-3 mb-md-4';
        winnerInfo.innerHTML = `
            <h2 class="fs-fluid-2 text-neon-${winner.color} mb-2">
                <img src="ai-icons/${winner.avatar}" alt="${winner.name}" class="rounded-circle me-1 me-sm-2" style="width: 40px; height: 40px; object-fit: cover;">
                ${winner.name}
            </h2>
            <div class="fs-fluid-3 text-neon-yellow mb-1 mb-sm-2">V√≠tƒõzn√© sk√≥re</div>
            <div class="fs-fluid-1 text-neon-green">${winner.score}</div>
        `;
        container.appendChild(winnerInfo);
        
        // Tlaƒç√≠tka akc√≠ - responzivn√≠ layout pro v≈°echny re≈æimy
        const btnGroup = document.createElement('div');
        btnGroup.className = 'd-flex flex-column flex-sm-row justify-content-center gap-2 w-100 px-3';
        
        // V landscape re≈æimu zobrazit tlaƒç√≠tka vedle sebe pro √∫sporu m√≠sta
        const newGameBtn = createNeonButton(
            'NOV√Å HRA', 
            'green', 
            'bi-play-fill', 
            () => this.startGame(), 
            'btn-custom-sm btn-md-lg flex-grow-1'
        );
        
        const menuBtn = createNeonButton(
            'HLAVN√ç MENU', 
            'blue', 
            'bi-house-fill', 
            () => gameState.updateState({ gamePhase: 'menu' }), 
            'btn-custom-sm btn-md-lg flex-grow-1'
        );
        
        btnGroup.appendChild(newGameBtn);
        btnGroup.appendChild(menuBtn);
        
        container.appendChild(btnGroup);
        
        // Vyƒçist√≠me a p≈ôid√°me nov√Ω obsah
        if (this.gameArea) {
            this.gameArea.innerHTML = '';
            this.gameArea.appendChild(container);
        } else {
            console.warn('‚ö†Ô∏è GameUI.renderGameOver: gameArea nen√≠ dostupn√Ω');
        }
    }

    /**
     * Vykresl√≠ pravidla - optimalizovan√° pro v≈°echny re≈æimy zobrazen√≠
     */
    renderRules() {
        const container = document.createElement('div');
        container.className = 'd-flex flex-column h-100 p-2 p-md-3';
        
        // Nadpis - Bootstrap responsive typography
        const title = document.createElement('h1');
        title.className = 'text-neon-blue h2 h-md-1 mb-3 mb-md-4 text-center';
        title.innerHTML = '<i class="bi bi-book-fill me-2"></i>Pravidla hry';
        container.appendChild(title);
        
        // Pravidla - Bootstrap responsive container s overflow
        const rulesContainer = document.createElement('div');
        rulesContainer.className = 'flex-grow-1 overflow-auto px-0 px-md-2';
        
        // Vytvo≈ôen√≠ pravidel v responsivn√≠ kartƒõ - Bootstrap-first approach
        const rulesCard = createNeonCard('Pravidla kostkovky', 'blue', `
            <div class="mb-3 mb-lg-4">
                <h4 class="text-neon-blue h5 h-md-4 mb-2">C√≠l hry</h4>
                <p class="text-neon-green mb-0">Dos√°hnout jako prvn√≠ c√≠lov√©ho sk√≥re (v√Ωchoz√≠ je 10 000 bod≈Ø).</p>
            </div>
            
            <div class="mb-3 mb-lg-4">
                <h4 class="text-neon-blue h5 h-md-4 mb-2">Pr≈Øbƒõh tahu</h4>
                <ol class="text-neon-green ps-3 ps-md-4 mb-0">
                    <li class="mb-1 mb-md-2">Hr√°ƒç hod√≠ v≈°emi ≈°esti kostkami.</li>
                    <li class="mb-1 mb-md-2">Mus√≠ vybrat alespo≈à jednu bodovanou kombinaci.</li>
                    <li class="mb-1 mb-md-2">M≈Ø≈æe buƒè ukonƒçit tah a p≈ôipsat si body, nebo pokraƒçovat s h√°zen√≠m zb√Ωvaj√≠c√≠mi kostkami.</li>
                    <li class="mb-1 mb-md-2">Pokud pokraƒçuje a hod√≠ kombinaci bez bod≈Ø, ztr√°c√≠ v≈°echny body z aktu√°ln√≠ho tahu.</li>
                </ol>
            </div>
            
            <div class="mb-0">
                <h4 class="text-neon-blue h5 h-md-4 mb-2">Bodov√°n√≠</h4>
                <ul class="text-neon-green ps-3 ps-md-4 mb-0">
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">Jedniƒçka</span> = 100 bod≈Ø</li>
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">Pƒõtka</span> = 50 bod≈Ø</li>
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">T≈ôi stejn√© kostky</span> = hodnota √ó 100 (t≈ôi jedniƒçky = 1000)</li>
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">ƒåty≈ôi stejn√© kostky</span> = hodnota √ó 200</li>
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">Pƒõt stejn√Ωch kostek</span> = hodnota √ó 400</li>
                    <li class="mb-1 mb-md-2"><span class="text-neon-yellow fw-bold">≈†est stejn√Ωch kostek</span> = hodnota √ó 800</li>
                </ul>
            </div>
        `);
        
        rulesContainer.appendChild(rulesCard);
        container.appendChild(rulesContainer);
        
        // Tlaƒç√≠tko zpƒõt - Bootstrap responsive button
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'mt-auto pt-3 d-flex justify-content-center';
        
        const backBtn = createNeonButton('ZPƒöT DO MENU', 'orange', 'bi-arrow-left-circle-fill', 
            () => gameState.updateState({ gamePhase: 'menu' }), 'btn-sm btn-md-regular px-4 py-2 btn-no-scale');
        buttonContainer.appendChild(backBtn);
        container.appendChild(buttonContainer);
        
        // Vyƒçist√≠me a p≈ôid√°me nov√Ω obsah
        if (this.gameArea) {
            this.gameArea.innerHTML = '';
            this.gameArea.appendChild(container);
        } else {
            console.warn('‚ö†Ô∏è GameUI.renderRules: gameArea nen√≠ dostupn√Ω');
        }
    }

    /**
     * Vykresl√≠ s√≠≈à sl√°vy - optimalizovan√° pro v≈°echny re≈æimy zobrazen√≠
     * Odstranƒõny inline styly a nahrazeny Bootstrap t≈ô√≠dami
     */
    renderHallOfFame() {
        const container = document.createElement('div');
        container.className = 'd-flex flex-column h-100 overflow-visible p-1';
        
        // Nadpis - kompaktnƒõj≈°√≠ v landscape re≈æimu
        const title = document.createElement('h1');
        title.className = 'text-neon-orange fs-fluid-1 mb-2 mb-md-3 text-center';
        title.innerHTML = '<i class="bi bi-trophy-fill"></i> S√≠≈à sl√°vy';
        container.appendChild(title);
        
        // Zobrazen√≠ tabulky se z√°znamy - plnƒõ responzivn√≠
        const recordsContainer = document.createElement('div');
        recordsContainer.className = 'flex-grow-1 overflow-auto';
        
        // Vytvo≈ô√≠me fiktivn√≠ z√°znamy pro demonstraci - v re√°ln√©m pou≈æit√≠ by se naƒçetly z localStorage
        const records = [
            { name: 'Hr√°ƒç', score: 12500, date: '2023-12-15' },
            { name: 'Gemini', score: 10800, date: '2023-12-14' },
            { name: 'ChatGPT', score: 10200, date: '2023-12-12' },
            { name: 'Claude', score: 9800, date: '2023-12-10' }
        ];
        
        // Vytvo≈ô√≠me responzivn√≠ tabulku s vyu≈æit√≠m Bootstrap t≈ô√≠d
        const table = document.createElement('div');
        table.className = 'table-responsive';
        
        // Optimalizace pro mal√© obrazovky - Bootstrap-first p≈ô√≠stup
        // ODSTRANƒöNO: Zbyteƒçn√© bg-transparent t≈ô√≠dy (black background je default)
        // OPRAVENO: neon-orange-border-bottom ‚Üí neon-green-border-bottom (zelen√© oddƒõlovaƒçe)
        table.innerHTML = `
            <table class="table table-sm neon-table">
                <thead>
                    <tr class="neon-green-border-bottom">
                        <th scope="col" class="text-center text-neon-orange neon-text-shadow-orange">#</th>
                        <th scope="col" class="text-neon-orange neon-text-shadow-orange">Jm√©no</th>
                        <th scope="col" class="text-center text-neon-orange neon-text-shadow-orange">Sk√≥re</th>
                        <th scope="col" class="text-center d-none d-sm-table-cell text-neon-orange neon-text-shadow-orange">Datum</th>
                    </tr>
                </thead>
                <tbody>
                    ${records.map((record, index) => `
                        <tr>
                            <th scope="row" class="text-center text-neon-yellow neon-text-shadow-yellow">${index + 1}</th>
                            <td class="text-neon-blue neon-text-shadow-blue">${record.name}</td>
                            <td class="text-center text-neon-green neon-text-shadow-green">${record.score}</td>
                            <td class="text-center d-none d-sm-table-cell text-neon-purple neon-text-shadow-purple">${record.date}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        
        recordsContainer.appendChild(table);
        container.appendChild(recordsContainer);
        
        // Tlaƒç√≠tko zpƒõt - sticky na spodek, kompaktn√≠ design s overflow protection
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'mt-auto pt-2 d-flex justify-content-center overflow-visible p-2';
        
        const backBtn = createNeonButton('ZPƒöT DO MENU', 'orange', 'bi-arrow-left-circle-fill', 
            () => gameState.updateState({ gamePhase: 'menu' }), 'btn-sm px-3 py-2');
        buttonContainer.appendChild(backBtn);
        container.appendChild(buttonContainer);
        
        // Vyƒçist√≠me a p≈ôid√°me nov√Ω obsah
        if (this.gameArea) {
            this.gameArea.innerHTML = '';
            this.gameArea.appendChild(container);
        } else {
            console.warn('‚ö†Ô∏è GameUI.renderHallOfFame: gameArea nen√≠ dostupn√Ω');
        }
    }

    /**
     * Odlo≈æ√≠ vybran√© kostky - p≈ôesune je z aktu√°ln√≠ho hodu do odlo≈æen√Ωch
     */
    saveDice() {
        console.log('üíæ saveDice() zavol√°na');
        const state = gameState.getState();
        console.log('üìä Aktu√°ln√≠ stav:', {
            selectedDice: state.selectedDice,
            currentRoll: state.currentRoll,
            savedDice: state.savedDice
        });
        
        if (!state.selectedDice || state.selectedDice.length === 0) {
            const warningMsg = '‚ö†Ô∏è Vyberte kostky k odlo≈æen√≠!';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        if (!state.currentRoll || state.currentRoll.length === 0) {
            const warningMsg = '‚ö†Ô∏è Nejsou ≈æ√°dn√© kostky k odlo≈æen√≠';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        // Z√≠sk√°me hodnoty vybran√Ωch kostek
        const savedDiceValues = state.selectedDice.map(index => state.currentRoll[index]);
        
        // VALIDACE: Zkontroluj, zda jsou kostky podle pravidel Farkle
        if (!isValidFarkleCombination(savedDiceValues)) {
            const warningMsg = '‚ö†Ô∏è NEPLATN√Å KOMBINACE! M≈Ø≈æete odlo≈æit pouze: jedniƒçky, pƒõtky nebo trojice a v√≠ce stejn√Ωch ƒç√≠sel (2,3,4,6).';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        // Spoƒç√≠t√°me body z vybran√Ωch kostek
        const points = calculatePoints(savedDiceValues);
        
        // P≈ôid√°me animaci sk√≥rov√°n√≠ k vybran√Ωm kostk√°m
        const selectedElements = document.querySelectorAll('.dice.selected');
        selectedElements.forEach(el => {
            el.classList.add('dice-scoring');
            setTimeout(() => {
                el.classList.remove('dice-scoring');
            }, 1500);
        });
        
        // Aktualizujeme stav - p≈ôid√°me odlo≈æen√© kostky a odstran√≠me vybran√© z currentRoll
        const newSavedDice = [...(state.savedDice || []), ...savedDiceValues];
        const newSavedPoints = calculatePoints(newSavedDice);
        
        // Vytvo≈ô√≠me nov√Ω currentRoll bez vybran√Ωch kostek
        const remainingDice = state.currentRoll.filter((die, index) => !state.selectedDice.includes(index));
        
        console.log(`üíæ Odkl√°d√°m kostky: [${savedDiceValues.join(', ')}] = ${points} bod≈Ø`);
        console.log(`üìä Celkem odlo≈æeno: [${newSavedDice.join(', ')}] = ${newSavedPoints} bod≈Ø`);
        console.log(`üé≤ Zb√Ωvaj√≠c√≠ kostky k hodu: ${remainingDice.length}`);
        
        chatSystem.addSystemMessage(`üíæ Odkl√°d√°m kostky: [${savedDiceValues.join(', ')}] = ${points} bod≈Ø`);
        chatSystem.addSystemMessage(`üìä Celkem odlo≈æeno: [${newSavedDice.join(', ')}] = ${newSavedPoints} bod≈Ø`, CHAT_COLORS.BLUE);
        
        // Kontrola zda byly odlo≈æeny v≈°echny kostky (6 nebo v√≠ce)
        if (newSavedDice.length >= 6 && remainingDice.length === 0) {
            // √öSPƒöCH! V≈°ech 6 kostek odlo≈æeno - HOT DICE!
            chatSystem.addSystemMessage(`üéØ SKVƒöL√â! V≈°ech 6 kostek odlo≈æeno! Akumulovan√© body: ${newSavedPoints}. M≈Ø≈æete hodit znovu v≈°emi kostkami!`, CHAT_COLORS.GREEN);
            
            // HOT DICE - akumulujeme body a resetujeme kostky pro nov√Ω hod
            gameState.updateState({ 
                turnScore: (state.turnScore || 0) + newSavedPoints, // Akumulujeme body
                savedDice: [], // VYMA≈ΩEME odlo≈æen√© kostky - hot dice reset
                selectedDice: [],
                currentRoll: [] // Pr√°zdn√© pro umo≈ænƒõn√≠ nov√©ho hodu v≈°emi kostkami
            });
        } else if (remainingDice.length > 0) {
            chatSystem.addSystemMessage(`üé≤ Zb√Ωv√° ${remainingDice.length} kostek k dal≈°√≠mu hodu`, CHAT_COLORS.YELLOW);
            
            gameState.updateState({ 
                savedDice: newSavedDice,
                selectedDice: [],
                currentRoll: remainingDice
            });
        } else {
            chatSystem.addSystemMessage(`üéØ V≈°echny kostky odlo≈æeny! M≈Ø≈æete hodit v≈°ech 6 kostek znovu.`, CHAT_COLORS.GREEN);
            
            gameState.updateState({ 
                savedDice: newSavedDice,
                selectedDice: [],
                currentRoll: [] // Pr√°zdn√© pole pro nov√Ω hod
            });
        }
        
        // AI reakce na odlo≈æen√≠ kostek
        this.triggerAiReactions('save', { savedCount: savedDiceValues.length, points: newSavedPoints });
        
        // P≈ôekresl√≠me obrazovku
        this.renderGameScreen(gameState.getState());
    }

    /**
     * Pokraƒçuje v tahu - placeholder pro budouc√≠ implementaci
     */
    continueTurn() {
        console.log('üéØ Pokraƒçuji v tahu...');
        // TODO: Implementovat logiku pokraƒçov√°n√≠ tahu
    }

    /**
     * Ukonƒç√≠ aktu√°ln√≠ tah
     * @param {boolean} isFarkle - Pokud true, jedn√° se o farkle (≈æ√°dn√© body se nep≈ôidaj√≠)
     */
    endTurn(isFarkle = false) {
        const state = gameState.getState();
        
        // Kontrola, zda hr√°ƒç m√° body k ukonƒçen√≠ tahu (kromƒõ farkle)
        const hasSavedDice = state.savedDice && state.savedDice.length > 0;
        const hasTurnScore = state.turnScore && state.turnScore > 0;
        
        if (!isFarkle && !hasSavedDice && !hasTurnScore) {
            const warningMsg = '‚ö†Ô∏è POZOR: Nem≈Ø≈æete ukonƒçit tah bez odlo≈æen√Ωch kostek nebo bod≈Ø! Nejd≈ô√≠ve odlo≈æte boduj√≠c√≠ kostky.';
            console.warn(warningMsg);
            chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
            return;
        }
        
        console.log(isFarkle ? 'üí• Ukonƒçuji tah s FARKLE...' : '‚è≠Ô∏è Ukonƒçuji tah...');
        
        const players = [...state.players];
        const currentPlayer = players[state.currentPlayerIndex];
        
        if (!currentPlayer) {
            console.error('‚ùå Aktu√°ln√≠ hr√°ƒç nenalezen');
            return;
        }
        
        let points = 0;
        let oldScore = currentPlayer.score;
        
        if (!isFarkle) {
            // Norm√°ln√≠ ukonƒçen√≠ tahu - p≈ôid√°me body z odlo≈æen√Ωch kostek PLUS akumulovan√© body z hot dice
            const savedDicePoints = calculatePoints(state.savedDice || []);
            const turnScorePoints = state.turnScore || 0;
            points = savedDicePoints + turnScorePoints;
            
            // KONTROLA MINIM√ÅLN√çHO SK√ìRE: Prvn√≠ z√°pis mus√≠ b√Ωt min. 300 bod≈Ø
            if (currentPlayer.score === 0 && points < 300) {
                const warningMsg = `‚ö†Ô∏è POZOR: Prvn√≠ z√°pis mus√≠ b√Ωt minim√°lnƒõ 300 bod≈Ø! M√°te jen ${points} bod≈Ø. Pokraƒçujte v tahu nebo riskujte!`;
                console.warn(warningMsg);
                chatSystem.addSystemMessage(warningMsg, CHAT_COLORS.RED);
                return;
            }
            
            currentPlayer.score += points;
            
            console.log(`üìä Hr√°ƒç ${currentPlayer.name}:`);
            console.log(`   ‚Ä¢ Odlo≈æen√© kostky: [${state.savedDice ? state.savedDice.join(', ') : '≈æ√°dn√©'}] = ${savedDicePoints} bod≈Ø`);
            console.log(`   ‚Ä¢ Hot dice body: ${turnScorePoints} bod≈Ø`);
            console.log(`   ‚Ä¢ Celkem z√≠skan√© body: ${points}`);
            console.log(`   ‚Ä¢ Sk√≥re: ${oldScore} ‚Üí ${currentPlayer.score}`);
            
            if (turnScorePoints > 0 && savedDicePoints > 0) {
                chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: Odlo≈æen√© kostky [${state.savedDice.join(', ')}] = ${savedDicePoints} bod≈Ø + Hot dice ${turnScorePoints} bod≈Ø`);
            } else if (turnScorePoints > 0) {
                chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: Hot dice body = ${turnScorePoints} bod≈Ø`);
            } else {
                chatSystem.addSystemMessage(`üìä ${currentPlayer.name}: Odlo≈æen√© kostky [${state.savedDice.join(', ')}] = ${savedDicePoints} bod≈Ø`);
            }
            chatSystem.addSystemMessage(`üéØ Sk√≥re: ${oldScore} ‚Üí ${currentPlayer.score}`, CHAT_COLORS.BLUE);
            
            // Animace sk√≥re - zv√Ωrazn√≠me kartu hr√°ƒçe
            this.animatePlayerScore(state.currentPlayerIndex, points);
        } else {
            // FARKLE - ≈æ√°dn√© body se nep≈ôidaj√≠
            console.log(`üí• FARKLE pro hr√°ƒçe ${currentPlayer.name} - ≈æ√°dn√© body!`);
            chatSystem.addSystemMessage(`üí• ${currentPlayer.name} m√° FARKLE - p≈ôich√°z√≠ o v≈°echny body tohoto tahu!`, CHAT_COLORS.RED);
        }
        
        // Kontrola v√≠tƒõzstv√≠
        if (currentPlayer.score >= state.targetScore) {
            const victoryMsg = `üèÜ V√çTƒöZSTV√ç! ${currentPlayer.name} dos√°hl c√≠lov√©ho sk√≥re ${state.targetScore}!`;
            console.log(victoryMsg);
            chatSystem.addSystemMessage(victoryMsg, CHAT_COLORS.GREEN);
            // TODO: Zobrazit obrazovku v√≠tƒõzstv√≠
        }
        
        // P≈ôejdeme na dal≈°√≠ho hr√°ƒçe
        const nextPlayerIndex = (state.currentPlayerIndex + 1) % players.length;
        const nextPlayer = players[nextPlayerIndex];
        
        console.log(`üë§ Dal≈°√≠ hr√°ƒç: ${nextPlayer.name}`);
        chatSystem.addSystemMessage(`üë§ Dal≈°√≠ hr√°ƒç: ${nextPlayer.name}`, CHAT_COLORS.PURPLE);
        
        // AI reakce na ukonƒçen√≠ tahu (pouze pokud nebyl farkle)
        if (!isFarkle) {
            this.triggerAiReactions('endTurn', { points });
        }
        
        gameState.updateState({
            players,
            currentPlayerIndex: nextPlayerIndex,
            currentRoll: [],
            selectedDice: [],
            savedDice: [],
            turnScore: 0 // Reset turn score pro nov√©ho hr√°ƒçe
        });
        
        // P≈ôekresl√≠me obrazovku
        this.renderGameScreen(gameState.getState());
        
        // Pokud je dal≈°√≠ hr√°ƒç AI, spust√≠me jeho automatick√Ω tah
        if (!nextPlayer.isHuman) {
            setTimeout(() => {
                this.playAiTurn(nextPlayer);
            }, 1500); // Kr√°tk√° pauza pro realistiƒçnost
        }
    }

    /**
     * Vyvol√° AI reakce na hern√≠ ud√°lost
     * @param {string} eventType - Typ ud√°losti ('roll', 'save', 'endTurn', 'farkle')
     * @param {Object} eventData - Data o ud√°losti (dice, points, atd.)
     */
    triggerAiReactions(eventType, eventData = {}) {
        const state = gameState.getState();
        const currentPlayer = state.players[state.currentPlayerIndex];
        
        // POUZE pro lidsk√©ho hr√°ƒçe - AI nekomentuje sv√© vlastn√≠ tahy
        if (!currentPlayer.isHuman) {
            console.log(`ü§ñ AI reakce p≈ôeskoƒçeny - na tahu je AI hr√°ƒç ${currentPlayer.name}`);
            return;
        }
        
        // Z√≠sk√°me AI hr√°ƒçe (v≈°ichni kromƒõ aktu√°ln√≠ho)
        const aiPlayers = state.players.filter(player => !player.isHuman);
        
        // N√°hodnƒõ vybereme 1 AI pro reakci (ne v≈°ichni najednou)
        const reactingAI = aiPlayers
            .sort(() => Math.random() - 0.5)
            .slice(0, 1); // Jen jedna AI reaguje, aby to nebylo moc chaotick√©
        
        // Reakce s prodlevou pro realistiƒçnost
        reactingAI.forEach((aiPlayer, index) => {
            setTimeout(() => {
                let reaction = '';
                
                switch (eventType) {
                    case 'roll':
                        if (eventData.points > 500) {
                            reaction = `Wow, ${currentPlayer.name}! ${eventData.points} bod≈Ø! Skvƒõl√Ω hod! üéØ`;
                        } else if (eventData.points > 200) {
                            reaction = `Slu≈°n√Ω hod, ${currentPlayer.name}! ${eventData.points} bod≈Ø nen√≠ ≈°patn√©! üëç`;
                        } else {
                            reaction = `Hmm, ${currentPlayer.name}, jen ${eventData.points} bod≈Ø... Zkus ≈°tƒõst√≠ znovu! üé≤`;
                        }
                        break;
                        
                    case 'farkle':
                        reaction = `Ach ne, ${currentPlayer.name}! FARKLE! üí• To se st√°v√° i tƒõm nejlep≈°√≠m! üòÖ`;
                        break;
                        
                    case 'save':
                        if (eventData.savedCount >= 4) {
                            reaction = `V√Ωbornƒõ, ${currentPlayer.name}! Odlo≈æit ${eventData.savedCount} kostek je chytr√° volba! üß†`;
                        } else {
                            reaction = `Dob≈ôe, ${currentPlayer.name}! Bezpeƒçn√° hra s ${eventData.savedCount} kostkami! üí™`;
                        }
                        break;
                        
                    case 'endTurn':
                        if (eventData.points > 1000) {
                            reaction = `${currentPlayer.name}, ${eventData.points} bod≈Ø za tah?! To je √∫≈æasn√©! üèÜ`;
                        } else if (eventData.points > 500) {
                            reaction = `Pƒõkn√Ωch ${eventData.points} bod≈Ø, ${currentPlayer.name}! Solidn√≠ tah! ‚≠ê`;
                        } else {
                            reaction = `${eventData.points} bod≈Ø, ${currentPlayer.name}... P≈ô√≠≈°tƒõ to bude lep≈°√≠! üí´`;
                        }
                        break;
                        
                    default:
                        reaction = `Zaj√≠mav√Ω tah, ${currentPlayer.name}! üéÆ`;
                }
                
                chatSystem.addAiMessage(aiPlayer.name, reaction);
            }, (index + 1) * 1000); // 1-2 sekundy prodleva mezi reakcemi
        });
    }
    
    /**
     * Hraje automatick√Ω tah za AI hr√°ƒçe
     * @param {Object} aiPlayer - AI hr√°ƒç na tahu
     */
    async playAiTurn(aiPlayer) {
        console.log(`ü§ñ ${aiPlayer.name} hraje automaticky...`);
        chatSystem.addSystemMessage(`ü§ñ ${aiPlayer.name} p≈ôem√Ω≈°l√≠...`, CHAT_COLORS.BLUE);
        
        const state = gameState.getState();
        
        // Pokud AI nen√≠ na tahu, ukonƒç√≠me
        if (state.players[state.currentPlayerIndex].name !== aiPlayer.name) {
            console.warn('‚ö†Ô∏è AI nen√≠ na tahu!');
            return;
        }
        
        try {
            // Pokud nejsou kostky na stole, zaƒçneme hodem
            if (!state.currentRoll || state.currentRoll.length === 0) {
                await this.delay(1000);
                chatSystem.addAiMessage(aiPlayer.name, "Zaƒç√≠n√°m tah! üé≤");
                this.rollDice();
                await this.delay(2000);
            }
            
            // AI rozhodov√°n√≠ loop
            let attempts = 0;
            const maxAttempts = 10; // Ochrana proti nekoneƒçn√© smyƒçce
            
            while (attempts < maxAttempts) {
                attempts++;
                const currentState = gameState.getState();
                
                // Kontrola, zda je AI st√°le na tahu
                if (currentState.players[currentState.currentPlayerIndex].name !== aiPlayer.name) {
                    break;
                }
                
                // Pokud nen√≠ co odlo≈æit, m≈Ø≈æe b√Ωt farkle (u≈æ se zpracuje automaticky)
                if (!currentState.currentRoll || currentState.currentRoll.length === 0) {
                    break;
                }
                
                // AI rozhodov√°n√≠
                const decision = this.makeAiDecision(aiPlayer, currentState);
                
                if (decision.action === 'save') {
                    // AI oznaƒç√≠ kostky a pak je odlo≈æ√≠
                    console.log(`ü§ñ AI ${aiPlayer.name} vyb√≠r√° kostky:`, decision.diceToSave);
                    gameState.updateState({ selectedDice: decision.diceToSave });
                    await this.delay(500);
                    
                    const selectedValues = decision.diceToSave.map(i => currentState.currentRoll[i]);
                    chatSystem.addAiMessage(aiPlayer.name, `Odkl√°d√°m kostky: [${selectedValues.join(', ')}] üíæ`);
                    
                    this.saveDice();
                    await this.delay(1500);
                    
                } else if (decision.action === 'roll') {
                    // H√°zet znovu
                    chatSystem.addAiMessage(aiPlayer.name, "Zkus√≠m ≈°tƒõst√≠ znovu! üéØ");
                    await this.delay(1000);
                    this.rollDice();
                    await this.delay(2000);
                    
                } else if (decision.action === 'endTurn') {
                    // Pokusit se ukonƒçit tah
                    const currentPoints = calculatePoints(currentState.savedDice || []) + (currentState.turnScore || 0);
                    
                    // Kontrola, zda AI m≈Ø≈æe skuteƒçnƒõ ukonƒçit tah (m√° dost bod≈Ø)
                    if (aiPlayer.score === 0 && currentPoints < 300) {
                        // AI nem≈Ø≈æe ukonƒçit tah - pokraƒçuj v hran√≠
                        console.log(`ü§ñ ${aiPlayer.name} nem≈Ø≈æe ukonƒçit tah s ${currentPoints} body, pokraƒçuje...`);
                        chatSystem.addAiMessage(aiPlayer.name, `Nem√°m dost bod≈Ø (${currentPoints}/300), mus√≠m pokraƒçovat! üí™`);
                        
                        // Zkusit h√°zt znovu, pokud je to mo≈æn√©
                        if (currentState.currentRoll && currentState.currentRoll.length > 0 && 
                            (!currentState.selectedDice || currentState.selectedDice.length === 0)) {
                            await this.delay(1000);
                            this.rollDice();
                            await this.delay(2000);
                        } else if (hasScoringDice(currentState.currentRoll || [])) {
                            // Pokud jsou na stole boduj√≠c√≠ kostky, odlo≈æ je
                            const scoringDice = this.findBestScoringDice(currentState.currentRoll);
                            if (scoringDice.length > 0) {
                                gameState.updateState({ selectedDice: scoringDice });
                                await this.delay(500);
                                this.saveDice();
                                await this.delay(1500);
                            } else {
                                break; // Nem≈Ø≈æe pokraƒçovat
                            }
                        } else {
                            break; // Nem≈Ø≈æe pokraƒçovat
                        }
                    } else {
                        // AI m≈Ø≈æe ukonƒçit tah
                        chatSystem.addAiMessage(aiPlayer.name, `Ukonƒçujem tah s ${currentPoints} body! ‚ú®`);
                        await this.delay(1000);
                        this.endTurn();
                        break;
                    }
                }
            }
            
            if (attempts >= maxAttempts) {
                console.warn(`‚ö†Ô∏è AI ${aiPlayer.name} dos√°hlo max pokus≈Ø, vynucuji ukonƒçen√≠ tahu`);
                this.endTurn(true); // Vynucen√© ukonƒçen√≠ jako farkle
            }
            
        } catch (error) {
            console.error('‚ùå Chyba v AI tahu:', error);
            chatSystem.addSystemMessage(`‚ùå Chyba v AI tahu pro ${aiPlayer.name}`, CHAT_COLORS.RED);
        }
    }
    
    /**
     * AI rozhodov√°n√≠ o dal≈°√≠m tahu
     * @param {Object} aiPlayer - AI hr√°ƒç
     * @param {Object} state - Aktu√°ln√≠ hern√≠ stav
     * @returns {Object} Rozhodnut√≠ AI
     */
    makeAiDecision(aiPlayer, state) {
        // Jednoduch√° AI logika - odlo≈æit nejlep≈°√≠ kostky, pak rozhodnout
        const bestDice = this.findBestDiceToSave(state.currentRoll);
        
        if (bestDice.length === 0) {
            // ≈Ω√°dn√© kostky k odlo≈æen√≠ - farkle se zpracuje automaticky
            return { action: 'endTurn' };
        }
        
        // Spoƒç√≠t√°me aktu√°ln√≠ body v tahu
        const currentTurnPoints = calculatePoints(state.savedDice || []) + (state.turnScore || 0);
        const newPoints = calculatePoints(bestDice.map(i => state.currentRoll[i]));
        const totalPoints = currentTurnPoints + newPoints;
        
        // D≈ÆLE≈ΩIT√â: Pokud je to prvn√≠ z√°pis a nem√°me dost bod≈Ø, MUS√çME pokraƒçovat
        if (aiPlayer.score === 0 && totalPoints < 300) {
            // Nejd≈ô√≠ve odlo≈æ√≠me dostupn√© kostky
            if (bestDice.length > 0) {
                return { action: 'save', diceToSave: bestDice };
            } else {
                // Pokud nejsou kostky k odlo≈æen√≠, mus√≠me h√°zet znovu (nebo bude farkle)
                return { action: 'roll' };
            }
        }
        
        // Pokud u≈æ m√°me 300+ bod≈Ø, m≈Ø≈æeme uva≈æovat o ukonƒçen√≠
        if (totalPoints >= 300) {
            // Rozhodov√°n√≠ podle strategie AI
            if (totalPoints >= 500 || Math.random() > 0.6) {
                return { action: 'endTurn' };
            } else {
                return { action: 'save', diceToSave: bestDice };
            }
        }
        
        // M√°me m√©nƒõ ne≈æ 300, ale u≈æ m√°me nƒõjak√© sk√≥re - m≈Ø≈æeme riskovat nebo pokraƒçovat
        if (totalPoints >= 200 && Math.random() > 0.7) {
            return { action: 'endTurn' };
        } else {
            return { action: 'save', diceToSave: bestDice };
        }
    }
    
    /**
     * Najde nejlep≈°√≠ kostky k odlo≈æen√≠
     * @param {Array} dice - Kostky na stole
     * @returns {Array} Indexy nejlep≈°√≠ch kostek
     */
    findBestDiceToSave(dice) {
        const indices = [];
        
        // Najdeme v≈°echny jedniƒçky a pƒõtky
        dice.forEach((value, index) => {
            if (value === 1 || value === 5) {
                indices.push(index);
            }
        });
        
        // Pokud nena≈°li jedniƒçky/pƒõtky, hled√°me trojice
        if (indices.length === 0) {
            const counts = {};
            dice.forEach((value, index) => {
                if (!counts[value]) counts[value] = [];
                counts[value].push(index);
            });
            
            // Najdeme trojice nebo v√≠ce
            for (const [value, valueIndices] of Object.entries(counts)) {
                if (valueIndices.length >= 3) {
                    indices.push(...valueIndices);
                    break; // Bereme jen jednu trojici
                }
            }
        }
        
        return indices;
    }
    
    /**
     * Pomocn√° funkce pro zpo≈ædƒõn√≠
     * @param {number} ms - Milisekundy
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * Animuje sk√≥re hr√°ƒçe p≈ôi z√≠sk√°n√≠ bod≈Ø
     */
    animatePlayerScore(playerIndex, points) {
        const playerCard = document.getElementById(`player-card-${playerIndex}`);
        if (playerCard) {
            console.log(`üéØ Animuji sk√≥re pro hr√°ƒçe ${playerIndex}: +${points} bod≈Ø`);
            playerCard.classList.add('score-animation');
            
            // Odstran√≠me animaci po dokonƒçen√≠
            setTimeout(() => {
                playerCard.classList.remove('score-animation');
            }, 1000);
        }
    }

    /**
     * Zobraz√≠ FARKLE animaci u aktu√°ln√≠ho hr√°ƒçe
     */
    showPlayerFarkle() {
        const state = gameState.getState();
        console.log('üî• FARKLE! Hr√°ƒç:', state.currentPlayerIndex);
        
        const playerCard = document.getElementById(`player-card-${state.currentPlayerIndex}`);
        
        console.log('üéØ Player card:', playerCard);
        
        if (playerCard) {
            // P≈ôid√°me FARKLE animaci na kartu
            playerCard.classList.add('player-card-farkle');
            console.log('‚úÖ FARKLE animace p≈ôid√°na');
            
            // Vytvo≈ô√≠me ƒçerven√Ω ≈°ikm√Ω FARKLE text overlay
            const farkleOverlay = document.createElement('div');
            farkleOverlay.className = 'farkle-text-overlay';
            farkleOverlay.textContent = 'FARKLE!';
            farkleOverlay.id = `farkle-overlay-${state.currentPlayerIndex}`;
            
            // P≈ôid√°me overlay do karty hr√°ƒçe
            playerCard.appendChild(farkleOverlay);
            console.log('‚úÖ FARKLE ƒçerven√Ω ≈°ikm√Ω text overlay p≈ôid√°n');
            
            // Odstran√≠me animaci a overlay po 3 sekund√°ch
            setTimeout(() => {
                playerCard.classList.remove('player-card-farkle');
                const overlay = document.getElementById(`farkle-overlay-${state.currentPlayerIndex}`);
                if (overlay) {
                    overlay.remove();
                }
                console.log('üîÑ FARKLE animace a overlay odstranƒõny');
            }, 3000);
        } else {
            console.error('‚ùå Nepoda≈ôilo se naj√≠t player card!');
        }
    }
}

// Exportujeme t≈ô√≠du GameUI
export default GameUI;
// Force refresh P√°¬†11.¬†ƒçervence¬†2025,¬†18:21:25¬†CEST
