/**
 * 游늵 Scoreboard Module - Funkcion치ln칤 spr치va sk칩re tabulky
 */

import { pipe, when } from 'ramda';
import { gameState } from '../../game/gameState.js';
import { safeGetElement } from '../../utils/gameUtils.js';

// 游늵 PLAYER ELEMENT UPDATER - Functional approach
const updatePlayerElement = (player, index) => {
    const playerId = index === 0 ? 'humanPlayer' : `aiPlayer${index}`;
    const playerElement = safeGetElement(playerId);
    
    when(
        Boolean,
        (element) => {
            const nameElement = element.querySelector('.player-name');
            const scoreElement = element.querySelector('.player-score');
            
            when(Boolean, (el) => { el.textContent = player.name; })(nameElement);
            when(Boolean, (el) => { el.textContent = player.score; })(scoreElement);
        }
    )(playerElement);
};

// 游꿢 ACTIVE PLAYER INDICATOR - Oprava pro spr치vn칠 barvy a zobrazen칤 aktivn칤ho hr치캜e
const updatePlayerActiveState = (_player, _index) => {
    // Mapov치n칤 typ콢 hr치캜콢 na CSS t콏칤dy - uspo콏치dan칠 podle index콢 hr치캜콢
    const playerClasses = [
        'human-player',  // Index 0 - lidsk칳 hr치캜
        'gemini-player', // Index 1 - Gemini AI
        'chatgpt-player', // Index 2 - ChatGPT AI
        'claude-player'   // Index 3 - Claude AI
    ];
    
    // Nejprve resetujeme v코echny hr치캜e - odstran칤me t콏칤du active
    document.querySelectorAll('.player').forEach(p => {
        p.classList.remove('active');
    });
    
    // Z칤sk치me aktu치ln칤ho hr치캜e
    const currentPlayer = gameState.players[gameState.currentPlayer];
    if (!currentPlayer) {
        console.error(`游댮 Neplatn칳 index hr치캜e: ${gameState.currentPlayer}`);
        return;
    }
    
    // Spr치vn칳 element hr치캜e najdeme pomoc칤 jeho indexu, ne podle t콏칤dy
    const currentPlayerClass = playerClasses[gameState.currentPlayer];
    if (!currentPlayerClass) {
        console.error(`游댮 Neplatn치 t콏칤da pro index hr치캜e: ${gameState.currentPlayer}`);
        return;
    }
    
    // Vyhled치me element aktivn칤ho hr치캜e podle spr치vn칠 t콏칤dy
    const activePlayerElement = document.querySelector(`.${currentPlayerClass}`);
    if (activePlayerElement) {
        // P콏id치me t콏칤du active pro aktivn칤ho hr치캜e
        activePlayerElement.classList.add('active');
        
        // Debug log pro ov캩콏en칤 spr치vn칠ho ozna캜en칤
        console.log(`游꿢 Aktivn칤 hr치캜: ${gameState.currentPlayer} (${currentPlayer.name}) - t콏칤da ${currentPlayerClass}`);
    } else {
        console.error(`游댮 Element hr치캜e nenalezen pro t콏칤du: .${currentPlayerClass}`);
    }
};

// 游늵 MAIN SCOREBOARD UPDATER
export const updateScoreboard = pipe(
    () => console.log('游늵 Updating scoreboard...'),
    () => gameState.players.forEach(updatePlayerElement)
);

// 游꿢 ACTIVE PLAYER UPDATER
export const updateActivePlayer = pipe(
    () => console.log('游꿢 Updating active player...'),
    () => gameState.players.forEach(updatePlayerActiveState)
);
