// Fin√°ln√≠ oprava aplikace AI Kostkov√° V√Ωzva
// Tato oprava zajist√≠, ≈æe aplikace funguje spr√°vnƒõ

console.log('üõ†Ô∏è FIN√ÅLN√ç OPRAVA APLIKACE - START');

// 1. Kontrola existence kritick√Ωch element≈Ø
function checkCriticalElements() {
    console.log('üîç Kontrola kritick√Ωch element≈Ø...');
    
    const elements = {
        gameContent: document.getElementById('gameContent'),
        gameControls: document.getElementById('gameControls'),
        gameControlsMobile: document.getElementById('gameControlsMobile'),
        gameMobileContent: document.getElementById('gameMobileContent'),
        chatPanel: document.getElementById('chatPanel'),
        chatPanelMobileContainer: document.getElementById('chatPanelMobileContainer')
    };
    
    for (const [name, element] of Object.entries(elements)) {
        if (element) {
            console.log(`‚úÖ ${name} - nalezen`);
        } else {
            console.error(`‚ùå ${name} - nenalezen!`);
        }
    }
    
    return elements;
}

// 2. Oprava CSS t≈ô√≠d pro zobrazen√≠ hern√≠ch kontrol
function fixGameControlsVisibility() {
    console.log('üé® Oprava CSS t≈ô√≠d pro hern√≠ kontroly...');
    
    const gameControls = document.getElementById('gameControls');
    if (gameControls) {
        // Odstran√≠me v≈°echny problematick√© t≈ô√≠dy
        gameControls.classList.remove('d-none', 'hidden');
        // P≈ôid√°me spr√°vn√© Bootstrap t≈ô√≠dy
        gameControls.classList.add('d-none', 'd-md-block');
        console.log('‚úÖ Desktop game controls CSS opraveny');
    }
    
    const gameControlsMobile = document.getElementById('gameControlsMobile');
    if (gameControlsMobile) {
        // Odstran√≠me v≈°echny problematick√© t≈ô√≠dy
        gameControlsMobile.classList.remove('d-none', 'hidden');
        // P≈ôid√°me spr√°vn√© Bootstrap t≈ô√≠dy
        gameControlsMobile.classList.add('d-none', 'd-md-none');
        console.log('‚úÖ Mobile game controls CSS opraveny');
    }
}

// 3. Oprava startGame funkce
function fixStartGameFunction() {
    console.log('üéÆ Oprava startGame funkce...');
    
    // Vytvo≈ô√≠me zjednodu≈°enou verzi startGame
    window.fixedStartGame = function() {
        console.log('üéÆ Spou≈°t√≠m opravenou verzi startGame...');
        
        // Z√≠sk√°n√≠ target score
        const targetScoreInput = document.getElementById('targetScoreInput') || 
                                document.getElementById('targetScoreInputMobile');
        
        if (!targetScoreInput) {
            console.error('‚ùå Input pro target score nenalezen!');
            alert('Chyba: Nenalezen input pro c√≠lov√© sk√≥re!');
            return;
        }
        
        const targetScore = parseInt(targetScoreInput.value);
        if (targetScore < 1000) {
            alert('C√≠lov√© sk√≥re mus√≠ b√Ωt alespo≈à 1000 bod≈Ø!');
            return;
        }
        
        console.log('üéØ Target score nastaven na:', targetScore);
        
        // Skryt√≠ menu
        const gameHeader = document.getElementById('gameHeader');
        if (gameHeader) {
            gameHeader.classList.add('d-none');
            console.log('‚úÖ Desktop menu skryto');
        }
        
        const gameMobileContent = document.getElementById('gameMobileContent');
        if (gameMobileContent) {
            gameMobileContent.classList.add('d-none');
            console.log('‚úÖ Mobile menu skryto');
        }
        
        // Zobrazen√≠ hern√≠ch kontrol
        const gameControls = document.getElementById('gameControls');
        if (gameControls) {
            gameControls.classList.remove('d-none');
            gameControls.classList.add('d-block', 'd-md-block');
            console.log('‚úÖ Desktop hern√≠ kontroly zobrazeny');
        }
        
        const gameControlsMobile = document.getElementById('gameControlsMobile');
        if (gameControlsMobile) {
            gameControlsMobile.classList.remove('d-none');
            gameControlsMobile.classList.add('d-block', 'd-md-none');
            console.log('‚úÖ Mobile hern√≠ kontroly zobrazeny');
        }
        
        // Aktualizace target score display
        const targetScoreDisplay = document.getElementById('targetScoreDisplay');
        if (targetScoreDisplay) {
            targetScoreDisplay.textContent = targetScore;
        }
        
        // Zpr√°va do chatu
        if (window.addChatMessage) {
            window.addChatMessage('system', `üéÆ Hra zaƒçala! C√≠l: ${targetScore} bod≈Ø`);
        }
        
        console.log('‚úÖ Hra √∫spƒõ≈°nƒõ spu≈°tƒõna!');
    };
}

// 4. Oprava menu tlaƒç√≠tek
function fixMenuButtons() {
    console.log('üîò Oprava menu tlaƒç√≠tek...');
    
    // Najdeme v≈°echna start game tlaƒç√≠tka
    const startBtns = [
        document.getElementById('startGameBtn'),
        document.getElementById('startGameBtnMobile')
    ].filter(Boolean);
    
    startBtns.forEach((btn, index) => {
        // Odstran√≠me v≈°echny existuj√≠c√≠ event listenery
        const newBtn = btn.cloneNode(true);
        btn.parentNode.replaceChild(newBtn, btn);
        
        // P≈ôid√°me nov√Ω event listener
        newBtn.addEventListener('click', window.fixedStartGame);
        console.log(`‚úÖ Start game tlaƒç√≠tko ${index + 1} opraveno`);
    });
}

// 5. Hlavn√≠ opravn√° funkce
function applyFinalFix() {
    console.log('üîß Aplikace fin√°ln√≠ opravy...');
    
    // ƒåek√°me na pln√© naƒçten√≠ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', applyFinalFix);
        return;
    }
    
    // Aplikujeme opravy
    checkCriticalElements();
    fixGameControlsVisibility();
    fixStartGameFunction();
    
    // ƒåek√°me na naƒçten√≠ ≈°ablon
    setTimeout(() => {
        fixMenuButtons();
        console.log('‚úÖ FIN√ÅLN√ç OPRAVA DOKONƒåENA');
    }, 1000);
}

// Spu≈°tƒõn√≠ opravy
applyFinalFix();
