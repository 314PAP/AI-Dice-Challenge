#!/bin/bash

# üé≤ AI DICE CHALLENGE - INTELIGENTN√ç AUTO-WATCHER
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Hl√≠d√° zmƒõny v projektu a automaticky nab√≠z√≠ spu≈°tƒõn√≠ test≈Ø
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Barvy pro v√Ωstup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo ""
echo -e "${PURPLE}ü§ñ INTELIGENTN√ç AUTO-WATCHER SPU≈†TƒöN${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}Hl√≠d√°m zmƒõny v projektu... (Ctrl+C pro ukonƒçen√≠)${NC}"
echo ""

# Kontrola, ≈æe jsme v root adres√°≈ôi
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Nejste v root adres√°≈ôi projektu!${NC}"
    exit 1
fi

# Promƒõnn√© pro sledov√°n√≠
LAST_CHANGE=""
COOLDOWN=5  # Sekund mezi testy
LAST_TEST_TIME=0

# Funkce pro detekci typu zmƒõny
detect_change_type() {
    local changed_file="$1"
    
    case "$changed_file" in
        *.css)
            echo "css"
            ;;
        *.js)
            echo "js"
            ;;
        *.html)
            echo "html"
            ;;
        *.md)
            echo "docs"
            ;;
        *)
            echo "other"
            ;;
    esac
}

# Funkce pro spu≈°tƒõn√≠ test≈Ø podle typu zmƒõny
run_tests_for_change() {
    local change_type="$1"
    local file="$2"
    
    current_time=$(date +%s)
    
    # Cooldown check
    if [ $((current_time - LAST_TEST_TIME)) -lt $COOLDOWN ]; then
        echo -e "${YELLOW}‚è≥ Cooldown aktivn√≠, ƒçek√°m...${NC}"
        return
    fi
    
    echo ""
    echo -e "${YELLOW}üîç Detekov√°na zmƒõna: ${BLUE}$file${NC}"
    echo -e "${CYAN}Typ zmƒõny: $change_type${NC}"
    echo ""
    
    case "$change_type" in
        "css")
            echo -e "${YELLOW}üé® CSS zmƒõna detekov√°na!${NC}"
            echo "Doporuƒçuji: CSS validaci + rychl√© testy"
            echo ""
            read -t 10 -p "Spustit CSS validaci? (y/N/s=skip): " choice
            
            case "$choice" in
                [Yy]*)
                    echo -e "${GREEN}‚úÖ Spou≈°t√≠m CSS validaci...${NC}"
                    ./skripty/hlavni-test.sh --quick
                    ;;
                [Ss]*)
                    echo -e "${BLUE}‚è≠Ô∏è P≈ôeskoƒçeno${NC}"
                    ;;
                *)
                    echo -e "${BLUE}‚è≠Ô∏è Timeout nebo 'N' - p≈ôeskoƒçeno${NC}"
                    ;;
            esac
            ;;
            
        "js")
            echo -e "${YELLOW}‚öôÔ∏è JavaScript zmƒõna detekov√°na!${NC}"
            echo "Doporuƒçuji: Hern√≠ logika testy"
            echo ""
            read -t 15 -p "Spustit testy hern√≠ logiky? (y/N/f=full): " choice
            
            case "$choice" in
                [Yy]*)
                    echo -e "${GREEN}‚úÖ Spou≈°t√≠m testy hern√≠ logiky...${NC}"
                    if [ -f "skripty/testy/test-farkle-comprehensive.js" ]; then
                        node skripty/testy/test-farkle-comprehensive.js
                    fi
                    ;;
                [Ff]*)
                    echo -e "${GREEN}‚úÖ Spou≈°t√≠m kompletn√≠ testy...${NC}"
                    ./skripty/hlavni-test.sh --full
                    ;;
                *)
                    echo -e "${BLUE}‚è≠Ô∏è Timeout nebo 'N' - p≈ôeskoƒçeno${NC}"
                    ;;
            esac
            ;;
            
        "html")
            echo -e "${YELLOW}üèóÔ∏è HTML zmƒõna detekov√°na!${NC}"
            echo "Doporuƒçuji: Rychl√© testy (CSS + validace)"
            echo ""
            read -t 10 -p "Spustit rychl√© testy? (y/N): " choice
            
            case "$choice" in
                [Yy]*)
                    echo -e "${GREEN}‚úÖ Spou≈°t√≠m rychl√© testy...${NC}"
                    ./skripty/hlavni-test.sh --quick
                    ;;
                *)
                    echo -e "${BLUE}‚è≠Ô∏è Timeout nebo 'N' - p≈ôeskoƒçeno${NC}"
                    ;;
            esac
            ;;
            
        *)
            echo -e "${CYAN}‚ÑπÔ∏è Jin√Ω typ zmƒõny - ≈æ√°dn√© automatick√© testy${NC}"
            ;;
    esac
    
    LAST_TEST_TIME=$current_time
    echo ""
    echo -e "${CYAN}üëÄ Pokraƒçujem v hl√≠d√°n√≠ zmƒõn...${NC}"
    echo ""
}

# Sledov√°n√≠ zmƒõn pomoc√≠ inotifywait (pokud je k dispozici)
if command -v inotifywait &> /dev/null; then
    echo -e "${GREEN}‚úÖ Pou≈æ√≠v√°m inotifywait pro real-time monitoring${NC}"
    echo ""
    
    # Sledov√°n√≠ pouze d≈Øle≈æit√Ωch adres√°≈ô≈Ø a typ≈Ø soubor≈Ø
    inotifywait -m -r -e modify -e create -e delete \
        --include='.*\.(js|css|html|md)$' \
        src/ skripty/ . 2>/dev/null | while read path action file; do
        
        # Ignorovat temporary soubory
        case "$file" in
            .*|*~|*.tmp|*.swp|*.bak)
                continue
                ;;
        esac
        
        change_type=$(detect_change_type "$file")
        full_path="${path}${file}"
        
        run_tests_for_change "$change_type" "$full_path"
    done
else
    # Fallback na polling
    echo -e "${YELLOW}‚ö†Ô∏è inotifywait nen√≠ k dispozici, pou≈æ√≠v√°m polling${NC}"
    echo -e "${BLUE}üí° Pro lep≈°√≠ v√Ωkon nainstalujte: sudo apt install inotify-tools${NC}"
    echo ""
    
    while true; do
        # Z√°kladn√≠ polling ka≈æd√Ωch 3 sekundy
        sleep 3
        
        # Zde by byl k√≥d pro polling zmƒõn, ale pro jednoduchost
        # pouze ƒçek√°me na manu√°ln√≠ spu≈°tƒõn√≠
        echo -n "."
    done
fi
