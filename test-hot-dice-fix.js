#!/usr/bin/env node

/**
 * üî• QUICK HOT DICE TEST
 * Testuje HOT DICE logiku po opravƒõ
 */

// Simulace hern√≠ho stavu pro HOT DICE test
class HotDiceTest {
    constructor() {
        this.state = {
            savedDice: [],
            currentRoll: [],
            turnScore: 0,
            selectedDice: []
        };
    }

    // Simulace updateSavedDice metody
    updateSavedDice(selectedValues, points) {
        console.log(`üì• Ukl√°d√°m kostky: [${selectedValues.join(', ')}] za ${points} bod≈Ø`);
        
        this.state.savedDice = [...this.state.savedDice, ...selectedValues];
        this.state.turnScore += points;
        this.state.currentRoll = []; // Simulace zb√Ωvaj√≠c√≠ch kostek
        this.state.selectedDice = [];
        
        console.log(`üìä Nov√Ω stav po ulo≈æen√≠:`);
        console.log(`   savedDice: [${this.state.savedDice.join(', ')}] (${this.state.savedDice.length} kostek)`);
        console.log(`   turnScore: ${this.state.turnScore}`);
        
        // Kontrola HOT DICE
        this.checkHotDice();
    }

    // Simulace checkHotDice metody (OPRAVEN√Å VERZE)
    checkHotDice() {
        if (this.state.savedDice.length === 6) {
            console.log('\nüî• HOT DICE DETEKOV√ÅN!');
            console.log('   V≈°ech 6 kostek ulo≈æeno');
            
            // OPRAVEN√Å LOGIKA: Vyƒçi≈°tƒõn√≠ savedDice po HOT DICE
            console.log('\nüßπ ƒåist√≠m stav pro nov√Ω hod:');
            console.log(`   savedDice: [${this.state.savedDice.join(', ')}] ‚Üí []`);
            console.log(`   turnScore z≈Øst√°v√°: ${this.state.turnScore}`);
            
            this.state.savedDice = []; // KL√çƒåOV√Å OPRAVA
            this.state.currentRoll = [];
            this.state.selectedDice = [];
            
            console.log('\n‚úÖ Stav po HOT DICE reset:');
            console.log(`   savedDice: [${this.state.savedDice.join(', ')}] (${this.state.savedDice.length} kostek)`);
            console.log(`   turnScore: ${this.state.turnScore}`);
            console.log('   ‚Üí P≈ôipraven pro nov√Ω hod se v≈°emi 6 kostkami');
            
            return true;
        }
        return false;
    }

    // Test HOT DICE scen√°ra
    testHotDiceScenario() {
        console.log('üé≤ HOT DICE TEST SCENARIO');
        console.log('=' .repeat(50));
        
        console.log('\n1Ô∏è‚É£ Prvn√≠ ulo≈æen√≠: 3 jedniƒçky');
        this.updateSavedDice([1, 1, 1], 1000);
        
        console.log('\n2Ô∏è‚É£ Druh√© ulo≈æen√≠: 2 pƒõtky');
        this.updateSavedDice([5, 5], 100);
        
        console.log('\n3Ô∏è‚É£ T≈ôet√≠ ulo≈æen√≠: 1 pƒõtka (dosa≈æen√≠ 6 kostek)');
        const hotDiceTriggered = this.updateSavedDice([5], 50);
        
        console.log('\nüìã FIN√ÅLN√ç KONTROLA:');
        console.log(`   Celkov√Ω turnScore: ${this.state.turnScore}`);
        console.log(`   Ulo≈æen√© kostky: [${this.state.savedDice.join(', ')}] (${this.state.savedDice.length} kostek)`);
        console.log(`   ‚úÖ Oƒçek√°van√© chov√°n√≠: 0 ulo≈æen√Ωch kostek, 1150 bod≈Ø`);
        
        if (this.state.savedDice.length === 0 && this.state.turnScore === 1150) {
            console.log('\nüéâ HOT DICE TEST PRO≈†EL!');
            return true;
        } else {
            console.log('\n‚ùå HOT DICE TEST SELHAL!');
            console.log(`   Oƒçek√°van√©: 0 ulo≈æen√Ωch kostek, 1150 bod≈Ø`);
            console.log(`   Skuteƒçn√©: ${this.state.savedDice.length} ulo≈æen√Ωch kostek, ${this.state.turnScore} bod≈Ø`);
            return false;
        }
    }
}

// Spu≈°tƒõn√≠ testu
const test = new HotDiceTest();
const success = test.testHotDiceScenario();

process.exit(success ? 0 : 1);
